
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004902  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001da  00800060  00004902  00004996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008f  0080023a  0080023a  00004b70  2**0
                  ALLOC
  3 .stab         00004dc4  00000000  00000000  00004b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002513  00000000  00000000  00009934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000be47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000bfe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f96a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00010ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3c       	cpi	r26, 0xC9	; 201
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <main>
      8a:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 24 	jmp	0x482e	; 0x482e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e0       	ldi	r26, 0x04	; 4
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 24 	jmp	0x482e	; 0x482e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 24 	jmp	0x483e	; 0x483e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e0       	ldi	r22, 0x04	; 4
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3b 24 	jmp	0x4876	; 0x4876 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 27 24 	jmp	0x484e	; 0x484e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 43 24 	jmp	0x4886	; 0x4886 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 1f 24 	jmp	0x483e	; 0x483e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 3b 24 	jmp	0x4876	; 0x4876 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e4 5f       	subi	r30, 0xF4	; 244
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <toggle>:
#include <util/delay.h>
#include "LCD_i2c.h"


void toggle ()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	TWDR |= 0x02;					//---PIN En de la LCD en = 1;  -----Latching data in to LCD data register using High to Low signal
     e36:	a3 e2       	ldi	r26, 0x23	; 35
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e2       	ldi	r30, 0x23	; 35
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	82 60       	ori	r24, 0x02	; 2
     e42:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	//---Enable I2C and clear interrupt- Esta linea y la siguiente simepre van despues de querer mandar un coamndo por TDWR
     e44:	e6 e5       	ldi	r30, 0x56	; 86
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	84 e8       	ldi	r24, 0x84	; 132
     e4a:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWINT)));	//---Simepre poner despues de la linea anterior al mandar datos por TWDR
     e4c:	e6 e5       	ldi	r30, 0x56	; 86
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	88 23       	and	r24, r24
     e54:	dc f7       	brge	.-10     	; 0xe4c <toggle+0x1e>
	delay(1);
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 b9 08 	call	0x1172	; 0x1172 <delay>
	TWDR &= ~0x02;					//---PIN del Enable de la LCD en = 0;
     e5e:	a3 e2       	ldi	r26, 0x23	; 35
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e3 e2       	ldi	r30, 0x23	; 35
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8d 7f       	andi	r24, 0xFD	; 253
     e6a:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	//---Enable I2C and clear interrupt
     e6c:	e6 e5       	ldi	r30, 0x56	; 86
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	84 e8       	ldi	r24, 0x84	; 132
     e72:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWINT)));
     e74:	e6 e5       	ldi	r30, 0x56	; 86
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	88 23       	and	r24, r24
     e7c:	dc f7       	brge	.-10     	; 0xe74 <toggle+0x46>
}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <lcd_send_cmd>:

void lcd_send_cmd (uint8 cmd)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	89 83       	std	Y+1, r24	; 0x01
    TWDR&=~0x01;                    //rs = 0; ----Selecting register as command register
     e90:	a3 e2       	ldi	r26, 0x23	; 35
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e3 e2       	ldi	r30, 0x23	; 35
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8e 7f       	andi	r24, 0xFE	; 254
     e9c:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);    //Enable I2C and clear interrupt
     e9e:	e6 e5       	ldi	r30, 0x56	; 86
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	84 e8       	ldi	r24, 0x84	; 132
     ea4:	80 83       	st	Z, r24
    while  (!(TWCR &(1<<TWINT)));
     ea6:	e6 e5       	ldi	r30, 0x56	; 86
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	88 23       	and	r24, r24
     eae:	dc f7       	brge	.-10     	; 0xea6 <lcd_send_cmd+0x22>
    TWDR &= 0x0F;                   //----clearing the Higher 4 bits
     eb0:	a3 e2       	ldi	r26, 0x23	; 35
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e3 e2       	ldi	r30, 0x23	; 35
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 70       	andi	r24, 0x0F	; 15
     ebc:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);    //Enable I2C and clear interrupt
     ebe:	e6 e5       	ldi	r30, 0x56	; 86
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	84 e8       	ldi	r24, 0x84	; 132
     ec4:	80 83       	st	Z, r24
    while  (!(TWCR &(1<<TWINT)));
     ec6:	e6 e5       	ldi	r30, 0x56	; 86
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	88 23       	and	r24, r24
     ece:	dc f7       	brge	.-10     	; 0xec6 <lcd_send_cmd+0x42>
    TWDR |= (cmd & 0xF0);            //----Masking higher 4 bits and sending to LCD
     ed0:	a3 e2       	ldi	r26, 0x23	; 35
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e3 e2       	ldi	r30, 0x23	; 35
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	98 2f       	mov	r25, r24
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	80 7f       	andi	r24, 0xF0	; 240
     ee0:	89 2b       	or	r24, r25
     ee2:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);    //Enable I2C and clear interrupt
     ee4:	e6 e5       	ldi	r30, 0x56	; 86
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	84 e8       	ldi	r24, 0x84	; 132
     eea:	80 83       	st	Z, r24
    while  (!(TWCR &(1<<TWINT)));
     eec:	e6 e5       	ldi	r30, 0x56	; 86
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	88 23       	and	r24, r24
     ef4:	dc f7       	brge	.-10     	; 0xeec <lcd_send_cmd+0x68>
    toggle();
     ef6:	0e 94 17 07 	call	0xe2e	; 0xe2e <toggle>

    TWDR &= 0x0F;                    //----clearing the Higher 4 bits
     efa:	a3 e2       	ldi	r26, 0x23	; 35
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e3 e2       	ldi	r30, 0x23	; 35
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 70       	andi	r24, 0x0F	; 15
     f06:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);    //Enable I2C and clear interrupt
     f08:	e6 e5       	ldi	r30, 0x56	; 86
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	84 e8       	ldi	r24, 0x84	; 132
     f0e:	80 83       	st	Z, r24
    while  (!(TWCR &(1<<TWINT)));
     f10:	e6 e5       	ldi	r30, 0x56	; 86
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 23       	and	r24, r24
     f18:	dc f7       	brge	.-10     	; 0xf10 <lcd_send_cmd+0x8c>
    TWDR |= ((cmd & 0x0F)<<4);        //----Masking lower 4 bits and sending to LCD
     f1a:	a3 e2       	ldi	r26, 0x23	; 35
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e3 e2       	ldi	r30, 0x23	; 35
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	28 2f       	mov	r18, r24
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	82 95       	swap	r24
     f2e:	92 95       	swap	r25
     f30:	90 7f       	andi	r25, 0xF0	; 240
     f32:	98 27       	eor	r25, r24
     f34:	80 7f       	andi	r24, 0xF0	; 240
     f36:	98 27       	eor	r25, r24
     f38:	82 2b       	or	r24, r18
     f3a:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);    //Enable I2C and clear interrupt
     f3c:	e6 e5       	ldi	r30, 0x56	; 86
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	84 e8       	ldi	r24, 0x84	; 132
     f42:	80 83       	st	Z, r24
    while  (!(TWCR &(1<<TWINT)));
     f44:	e6 e5       	ldi	r30, 0x56	; 86
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 23       	and	r24, r24
     f4c:	dc f7       	brge	.-10     	; 0xf44 <lcd_send_cmd+0xc0>
    toggle();
     f4e:	0e 94 17 07 	call	0xe2e	; 0xe2e <toggle>
}
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <lcd_send_hf_cmd>:

void lcd_send_hf_cmd(uint8 cmd)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	89 83       	std	Y+1, r24	; 0x01
	TWDR &=~0x01;					//PIN RS de la LCD rs = 0; ----Selecting register as Command register
     f66:	a3 e2       	ldi	r26, 0x23	; 35
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e3 e2       	ldi	r30, 0x23	; 35
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     f74:	e6 e5       	ldi	r30, 0x56	; 86
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	84 e8       	ldi	r24, 0x84	; 132
     f7a:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWINT)));
     f7c:	e6 e5       	ldi	r30, 0x56	; 86
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	88 23       	and	r24, r24
     f84:	dc f7       	brge	.-10     	; 0xf7c <lcd_send_hf_cmd+0x22>
	TWDR &= 0x0F;					//----clearing the Higher 4 bits
     f86:	a3 e2       	ldi	r26, 0x23	; 35
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e3 e2       	ldi	r30, 0x23	; 35
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8f 70       	andi	r24, 0x0F	; 15
     f92:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     f94:	e6 e5       	ldi	r30, 0x56	; 86
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	84 e8       	ldi	r24, 0x84	; 132
     f9a:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWINT)));
     f9c:	e6 e5       	ldi	r30, 0x56	; 86
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	88 23       	and	r24, r24
     fa4:	dc f7       	brge	.-10     	; 0xf9c <lcd_send_hf_cmd+0x42>
	TWDR |= (cmd & 0xF0);			//----Masking higher 4 bits and sending to LCD
     fa6:	a3 e2       	ldi	r26, 0x23	; 35
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e3 e2       	ldi	r30, 0x23	; 35
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	98 2f       	mov	r25, r24
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	80 7f       	andi	r24, 0xF0	; 240
     fb6:	89 2b       	or	r24, r25
     fb8:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     fba:	e6 e5       	ldi	r30, 0x56	; 86
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	84 e8       	ldi	r24, 0x84	; 132
     fc0:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWINT)));
     fc2:	e6 e5       	ldi	r30, 0x56	; 86
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	88 23       	and	r24, r24
     fca:	dc f7       	brge	.-10     	; 0xfc2 <lcd_send_hf_cmd+0x68>
	toggle();
     fcc:	0e 94 17 07 	call	0xe2e	; 0xe2e <toggle>
}
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <lcd_send_char>:


void lcd_send_char (uint8 data)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	0f 92       	push	r0
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
    TWDR|=0x01;                        //rs = 1; ----Selecting register as command register
     fe4:	a3 e2       	ldi	r26, 0x23	; 35
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e3 e2       	ldi	r30, 0x23	; 35
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	81 60       	ori	r24, 0x01	; 1
     ff0:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);    //Enable I2C and clear interrupt
     ff2:	e6 e5       	ldi	r30, 0x56	; 86
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	84 e8       	ldi	r24, 0x84	; 132
     ff8:	80 83       	st	Z, r24
    while  (!(TWCR &(1<<TWINT)));
     ffa:	e6 e5       	ldi	r30, 0x56	; 86
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 23       	and	r24, r24
    1002:	dc f7       	brge	.-10     	; 0xffa <lcd_send_char+0x22>
    TWDR &= 0x0F;                    //----clearing the Higher 4 bits
    1004:	a3 e2       	ldi	r26, 0x23	; 35
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e3 e2       	ldi	r30, 0x23	; 35
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 70       	andi	r24, 0x0F	; 15
    1010:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);    //Enable I2C and clear interrupt
    1012:	e6 e5       	ldi	r30, 0x56	; 86
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	84 e8       	ldi	r24, 0x84	; 132
    1018:	80 83       	st	Z, r24
    while  (!(TWCR &(1<<TWINT)));
    101a:	e6 e5       	ldi	r30, 0x56	; 86
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	88 23       	and	r24, r24
    1022:	dc f7       	brge	.-10     	; 0x101a <lcd_send_char+0x42>
    TWDR |= (data & 0xF0);            //----Masking higher 4 bits and sending to LCD
    1024:	a3 e2       	ldi	r26, 0x23	; 35
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e3 e2       	ldi	r30, 0x23	; 35
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	98 2f       	mov	r25, r24
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	80 7f       	andi	r24, 0xF0	; 240
    1034:	89 2b       	or	r24, r25
    1036:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);    //Enable I2C and clear interrupt
    1038:	e6 e5       	ldi	r30, 0x56	; 86
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	84 e8       	ldi	r24, 0x84	; 132
    103e:	80 83       	st	Z, r24
    while  (!(TWCR &(1<<TWINT)));
    1040:	e6 e5       	ldi	r30, 0x56	; 86
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	88 23       	and	r24, r24
    1048:	dc f7       	brge	.-10     	; 0x1040 <lcd_send_char+0x68>
    toggle();
    104a:	0e 94 17 07 	call	0xe2e	; 0xe2e <toggle>

    TWDR &= 0x0F;                    //----clearing the Higher 4 bits
    104e:	a3 e2       	ldi	r26, 0x23	; 35
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e3 e2       	ldi	r30, 0x23	; 35
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8f 70       	andi	r24, 0x0F	; 15
    105a:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);    //Enable I2C and clear interrupt
    105c:	e6 e5       	ldi	r30, 0x56	; 86
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	84 e8       	ldi	r24, 0x84	; 132
    1062:	80 83       	st	Z, r24
    while  (!(TWCR &(1<<TWINT)));
    1064:	e6 e5       	ldi	r30, 0x56	; 86
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 23       	and	r24, r24
    106c:	dc f7       	brge	.-10     	; 0x1064 <lcd_send_char+0x8c>
    TWDR |= ((data & 0x0F)<<4);        //----Masking lower 4 bits and sending to LCD
    106e:	a3 e2       	ldi	r26, 0x23	; 35
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e3 e2       	ldi	r30, 0x23	; 35
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	28 2f       	mov	r18, r24
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	82 95       	swap	r24
    1082:	92 95       	swap	r25
    1084:	90 7f       	andi	r25, 0xF0	; 240
    1086:	98 27       	eor	r25, r24
    1088:	80 7f       	andi	r24, 0xF0	; 240
    108a:	98 27       	eor	r25, r24
    108c:	82 2b       	or	r24, r18
    108e:	8c 93       	st	X, r24
    TWCR = (1<<TWINT) | (1<<TWEN);    //Enable I2C and clear interrupt
    1090:	e6 e5       	ldi	r30, 0x56	; 86
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	84 e8       	ldi	r24, 0x84	; 132
    1096:	80 83       	st	Z, r24
    while  (!(TWCR &(1<<TWINT)));
    1098:	e6 e5       	ldi	r30, 0x56	; 86
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	88 23       	and	r24, r24
    10a0:	dc f7       	brge	.-10     	; 0x1098 <lcd_send_char+0xc0>
    toggle();
    10a2:	0e 94 17 07 	call	0xe2e	; 0xe2e <toggle>
}
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <lcd_send_number>:


void lcd_send_number (uint8 data){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <lcd_send_number+0x6>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	8a 83       	std	Y+2, r24	; 0x02
    10ba:	11 c0       	rjmp	.+34     	; 0x10de <lcd_send_number+0x30>

	uint8 mod;

	while(data > 0) //do till num greater than  0
	    {
	         mod = data % 10;  //split last digit from number
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	9a e0       	ldi	r25, 0x0A	; 10
    10c0:	69 2f       	mov	r22, r25
    10c2:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__udivmodqi4>
    10c6:	89 2f       	mov	r24, r25
    10c8:	89 83       	std	Y+1, r24	; 0x01

	        data = data / 10;    //divide num by 10. num /= 10 also a valid one
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9a e0       	ldi	r25, 0x0A	; 10
    10ce:	69 2f       	mov	r22, r25
    10d0:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__udivmodqi4>
    10d4:	8a 83       	std	Y+2, r24	; 0x02
	    	lcd_send_char (mod+30);
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	82 5e       	subi	r24, 0xE2	; 226
    10da:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <lcd_send_char>

void lcd_send_number (uint8 data){

	uint8 mod;

	while(data > 0) //do till num greater than  0
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	88 23       	and	r24, r24
    10e2:	61 f7       	brne	.-40     	; 0x10bc <lcd_send_number+0xe>
	        data = data / 10;    //divide num by 10. num /= 10 also a valid one
	    	lcd_send_char (mod+30);

	    }

}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <LCD_intgerToString>:

void LCD_intgerToString(uint8 data)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	61 97       	sbiw	r28, 0x11	; 17
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1104:	89 89       	ldd	r24, Y+17	; 0x11
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	9e 01       	movw	r18, r28
    110c:	2f 5f       	subi	r18, 0xFF	; 255
    110e:	3f 4f       	sbci	r19, 0xFF	; 255
    1110:	b9 01       	movw	r22, r18
    1112:	4a e0       	ldi	r20, 0x0A	; 10
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	0e 94 4e 24 	call	0x489c	; 0x489c <itoa>
   lcd_send_string(buff); /* Display the string */
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
}
    1122:	61 96       	adiw	r28, 0x11	; 17
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <lcd_init>:

void lcd_init ()
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    lcd_send_hf_cmd(0x30);       //-----Sequence for initializing LCD
    113c:	80 e3       	ldi	r24, 0x30	; 48
    113e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_send_hf_cmd>
    lcd_send_hf_cmd(0x30);       //-----     "            "              "               "
    1142:	80 e3       	ldi	r24, 0x30	; 48
    1144:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_send_hf_cmd>
    lcd_send_hf_cmd(0x20);       //-----     "            "              "               "
    1148:	80 e2       	ldi	r24, 0x20	; 32
    114a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_send_hf_cmd>
    lcd_send_cmd(0x28);          //-----Selecting 16 x 2 LCD in 4Bit mode
    114e:	88 e2       	ldi	r24, 0x28	; 40
    1150:	0e 94 42 07 	call	0xe84	; 0xe84 <lcd_send_cmd>
    lcd_send_cmd(0x0C);          //-----Display ON Cursor OFF
    1154:	8c e0       	ldi	r24, 0x0C	; 12
    1156:	0e 94 42 07 	call	0xe84	; 0xe84 <lcd_send_cmd>
    lcd_send_cmd(0x01);          //-----Clear display
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	0e 94 42 07 	call	0xe84	; 0xe84 <lcd_send_cmd>
    lcd_send_cmd(0x06);          //-----Cursor Auto Increment
    1160:	86 e0       	ldi	r24, 0x06	; 6
    1162:	0e 94 42 07 	call	0xe84	; 0xe84 <lcd_send_cmd>
    lcd_send_cmd(0x80);          //-----1st line 1st location of LCD
    1166:	80 e8       	ldi	r24, 0x80	; 128
    1168:	0e 94 42 07 	call	0xe84	; 0xe84 <lcd_send_cmd>
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <delay>:

void delay (uint16 ms)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <delay+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <delay+0x8>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
//	_delay_ms(ms);
    uint8 i,j;
    for(i=0;i<=ms;i++)
    1182:	1a 82       	std	Y+2, r1	; 0x02
    1184:	0b c0       	rjmp	.+22     	; 0x119c <delay+0x2a>
    for(j=0;j<=120;j++);
    1186:	19 82       	std	Y+1, r1	; 0x01
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <delay+0x1e>
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	8f 5f       	subi	r24, 0xFF	; 255
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	89 37       	cpi	r24, 0x79	; 121
    1194:	d0 f3       	brcs	.-12     	; 0x118a <delay+0x18>

void delay (uint16 ms)
{
//	_delay_ms(ms);
    uint8 i,j;
    for(i=0;i<=ms;i++)
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	8a 83       	std	Y+2, r24	; 0x02
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	82 17       	cp	r24, r18
    11a8:	93 07       	cpc	r25, r19
    11aa:	68 f7       	brcc	.-38     	; 0x1186 <delay+0x14>
    for(j=0;j<=120;j++);
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <lcd_send_string>:

void lcd_send_string (uint8 *str)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <lcd_send_string+0x6>
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	0b c0       	rjmp	.+22     	; 0x11e0 <lcd_send_string+0x26>
    while (*str) lcd_send_char (*str++);
    11ca:	e9 81       	ldd	r30, Y+1	; 0x01
    11cc:	fa 81       	ldd	r31, Y+2	; 0x02
    11ce:	20 81       	ld	r18, Z
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	9a 83       	std	Y+2, r25	; 0x02
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	82 2f       	mov	r24, r18
    11dc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <lcd_send_char>
    11e0:	e9 81       	ldd	r30, Y+1	; 0x01
    11e2:	fa 81       	ldd	r31, Y+2	; 0x02
    11e4:	80 81       	ld	r24, Z
    11e6:	88 23       	and	r24, r24
    11e8:	81 f7       	brne	.-32     	; 0x11ca <lcd_send_string+0x10>
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <lcd_moveCursor>:

void lcd_moveCursor(uint16 row, uint16 col)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <lcd_moveCursor+0x6>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <lcd_moveCursor+0x8>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <lcd_moveCursor+0xa>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	7c 83       	std	Y+4, r23	; 0x04
    1208:	6b 83       	std	Y+3, r22	; 0x03
    switch (row)
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	9e 83       	std	Y+6, r25	; 0x06
    1210:	8d 83       	std	Y+5, r24	; 0x05
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	31 f0       	breq	.+12     	; 0x1226 <lcd_moveCursor+0x32>
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	9e 81       	ldd	r25, Y+6	; 0x06
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	39 f0       	breq	.+14     	; 0x1232 <lcd_moveCursor+0x3e>
    1224:	0b c0       	rjmp	.+22     	; 0x123c <lcd_moveCursor+0x48>
    {
        case 0:
            col |= 0x80;
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	80 68       	ori	r24, 0x80	; 128
    122c:	9c 83       	std	Y+4, r25	; 0x04
    122e:	8b 83       	std	Y+3, r24	; 0x03
    1230:	05 c0       	rjmp	.+10     	; 0x123c <lcd_moveCursor+0x48>
            break;
        case 1:
            col |= 0xC0;
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	80 6c       	ori	r24, 0xC0	; 192
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	8b 83       	std	Y+3, r24	; 0x03
            break;
    }

    lcd_send_cmd (col);
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	0e 94 42 07 	call	0xe84	; 0xe84 <lcd_send_cmd>
}
    1242:	26 96       	adiw	r28, 0x06	; 6
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <lcd_clear>:

void lcd_clear (void)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	0f 92       	push	r0
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    uint8 i;
	lcd_send_cmd (0x80);
    125e:	80 e8       	ldi	r24, 0x80	; 128
    1260:	0e 94 42 07 	call	0xe84	; 0xe84 <lcd_send_cmd>
	for (i=0; i<70; i++)
    1264:	19 82       	std	Y+1, r1	; 0x01
    1266:	06 c0       	rjmp	.+12     	; 0x1274 <lcd_clear+0x20>
	{
		lcd_send_char (' ');
    1268:	80 e2       	ldi	r24, 0x20	; 32
    126a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <lcd_send_char>

void lcd_clear (void)
{
    uint8 i;
	lcd_send_cmd (0x80);
	for (i=0; i<70; i++)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	86 34       	cpi	r24, 0x46	; 70
    1278:	b8 f3       	brcs	.-18     	; 0x1268 <lcd_clear+0x14>
	{
		lcd_send_char (' ');
	}
//	lcd_moveCursor(0,0);
}
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <__vector_1>:

volatile uint8 g_Interrupt_Flag = 0;


ISR(INT0_vect)
{
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	8f 93       	push	r24
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	// set the interrupt flag to indicate that INT1 occurs
	g_Interrupt_Flag = 1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 3a 02 	sts	0x023A, r24

}
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	8f 91       	pop	r24
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <INT0_Init>:


/* External INT1 enable and configuration function */
void INT0_Init(void)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(DDRD,EXTERNAL_INTERRUPTS_0_PIN_ID);
    12b4:	a1 e3       	ldi	r26, 0x31	; 49
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e1 e3       	ldi	r30, 0x31	; 49
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8f 7e       	andi	r24, 0xEF	; 239
    12c0:	8c 93       	st	X, r24

	// Trigger INT0 with both edges
	SET_BIT(MCUCR,0);
    12c2:	a5 e5       	ldi	r26, 0x55	; 85
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e5 e5       	ldi	r30, 0x55	; 85
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	8c 93       	st	X, r24


	GICR  |= (1<<INT0);    // Enable external interrupt pin INT0
    12d0:	ab e5       	ldi	r26, 0x5B	; 91
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	eb e5       	ldi	r30, 0x5B	; 91
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 64       	ori	r24, 0x40	; 64
    12dc:	8c 93       	st	X, r24

}
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
funcReturn GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <GPIO_setupPinDirection+0x6>
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <GPIO_setupPinDirection+0x8>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <GPIO_setupPinDirection+0xa>
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	6a 83       	std	Y+2, r22	; 0x02
    12f6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 30       	cpi	r24, 0x08	; 8
    12fc:	18 f4       	brcc	.+6      	; 0x1304 <GPIO_setupPinDirection+0x20>
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	84 30       	cpi	r24, 0x04	; 4
    1302:	10 f0       	brcs	.+4      	; 0x1308 <GPIO_setupPinDirection+0x24>
	{
		return NOT_OK;
    1304:	1e 82       	std	Y+6, r1	; 0x06
    1306:	e5 c0       	rjmp	.+458    	; 0x14d2 <GPIO_setupPinDirection+0x1ee>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3d 83       	std	Y+5, r19	; 0x05
    1310:	2c 83       	std	Y+4, r18	; 0x04
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	91 05       	cpc	r25, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <GPIO_setupPinDirection+0x3a>
    131c:	55 c0       	rjmp	.+170    	; 0x13c8 <GPIO_setupPinDirection+0xe4>
    131e:	2c 81       	ldd	r18, Y+4	; 0x04
    1320:	3d 81       	ldd	r19, Y+5	; 0x05
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	2c f4       	brge	.+10     	; 0x1332 <GPIO_setupPinDirection+0x4e>
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	71 f0       	breq	.+28     	; 0x134c <GPIO_setupPinDirection+0x68>
    1330:	ce c0       	rjmp	.+412    	; 0x14ce <GPIO_setupPinDirection+0x1ea>
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	3d 81       	ldd	r19, Y+5	; 0x05
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <GPIO_setupPinDirection+0x5a>
    133c:	71 c0       	rjmp	.+226    	; 0x1420 <GPIO_setupPinDirection+0x13c>
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	9d 81       	ldd	r25, Y+5	; 0x05
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <GPIO_setupPinDirection+0x66>
    1348:	97 c0       	rjmp	.+302    	; 0x1478 <GPIO_setupPinDirection+0x194>
    134a:	c1 c0       	rjmp	.+386    	; 0x14ce <GPIO_setupPinDirection+0x1ea>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	a1 f4       	brne	.+40     	; 0x137a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1352:	aa e3       	ldi	r26, 0x3A	; 58
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ea e3       	ldi	r30, 0x3A	; 58
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <GPIO_setupPinDirection+0x8c>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <GPIO_setupPinDirection+0x88>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	aa c0       	rjmp	.+340    	; 0x14ce <GPIO_setupPinDirection+0x1ea>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    137a:	aa e3       	ldi	r26, 0x3A	; 58
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ea e3       	ldi	r30, 0x3A	; 58
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GPIO_setupPinDirection+0xb2>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	2a 95       	dec	r18
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <GPIO_setupPinDirection+0xae>
    139a:	80 95       	com	r24
    139c:	84 23       	and	r24, r20
    139e:	8c 93       	st	X, r24
				SET_BIT(PORTA,pin_num);
    13a0:	ab e3       	ldi	r26, 0x3B	; 59
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	eb e3       	ldi	r30, 0x3B	; 59
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <GPIO_setupPinDirection+0xda>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <GPIO_setupPinDirection+0xd6>
    13c2:	84 2b       	or	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	83 c0       	rjmp	.+262    	; 0x14ce <GPIO_setupPinDirection+0x1ea>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	a1 f4       	brne	.+40     	; 0x13f6 <GPIO_setupPinDirection+0x112>
			{
				SET_BIT(DDRB,pin_num);
    13ce:	a7 e3       	ldi	r26, 0x37	; 55
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e7 e3       	ldi	r30, 0x37	; 55
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <GPIO_setupPinDirection+0x108>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <GPIO_setupPinDirection+0x104>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	6c c0       	rjmp	.+216    	; 0x14ce <GPIO_setupPinDirection+0x1ea>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13f6:	a7 e3       	ldi	r26, 0x37	; 55
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e7 e3       	ldi	r30, 0x37	; 55
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_setupPinDirection+0x130>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <GPIO_setupPinDirection+0x12c>
    1418:	80 95       	com	r24
    141a:	84 23       	and	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	57 c0       	rjmp	.+174    	; 0x14ce <GPIO_setupPinDirection+0x1ea>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	a1 f4       	brne	.+40     	; 0x144e <GPIO_setupPinDirection+0x16a>
			{
				SET_BIT(DDRC,pin_num);
    1426:	a4 e3       	ldi	r26, 0x34	; 52
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e4 e3       	ldi	r30, 0x34	; 52
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <GPIO_setupPinDirection+0x160>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <GPIO_setupPinDirection+0x15c>
    1448:	84 2b       	or	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	40 c0       	rjmp	.+128    	; 0x14ce <GPIO_setupPinDirection+0x1ea>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    144e:	a4 e3       	ldi	r26, 0x34	; 52
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e4 e3       	ldi	r30, 0x34	; 52
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_setupPinDirection+0x188>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_setupPinDirection+0x184>
    1470:	80 95       	com	r24
    1472:	84 23       	and	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	2b c0       	rjmp	.+86     	; 0x14ce <GPIO_setupPinDirection+0x1ea>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	a1 f4       	brne	.+40     	; 0x14a6 <GPIO_setupPinDirection+0x1c2>
			{
				SET_BIT(DDRD,pin_num);
    147e:	a1 e3       	ldi	r26, 0x31	; 49
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e1 e3       	ldi	r30, 0x31	; 49
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_setupPinDirection+0x1b8>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_setupPinDirection+0x1b4>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <GPIO_setupPinDirection+0x1ea>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14a6:	a1 e3       	ldi	r26, 0x31	; 49
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e1 e3       	ldi	r30, 0x31	; 49
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_setupPinDirection+0x1e0>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_setupPinDirection+0x1dc>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24
			}
			break;
		}
	}
	return OK;
    14ce:	91 e0       	ldi	r25, 0x01	; 1
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8e 81       	ldd	r24, Y+6	; 0x06

}
    14d4:	26 96       	adiw	r28, 0x06	; 6
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
funcReturn GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <GPIO_writePin+0x6>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <GPIO_writePin+0x8>
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <GPIO_writePin+0xa>
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	6a 83       	std	Y+2, r22	; 0x02
    14f8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	88 30       	cpi	r24, 0x08	; 8
    14fe:	18 f4       	brcc	.+6      	; 0x1506 <GPIO_writePin+0x20>
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	10 f0       	brcs	.+4      	; 0x150a <GPIO_writePin+0x24>
	{
		return NOT_OK;
    1506:	1e 82       	std	Y+6, r1	; 0x06
    1508:	d3 c0       	rjmp	.+422    	; 0x16b0 <GPIO_writePin+0x1ca>
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	3d 83       	std	Y+5, r19	; 0x05
    1512:	2c 83       	std	Y+4, r18	; 0x04
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	9d 81       	ldd	r25, Y+5	; 0x05
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <GPIO_writePin+0x3a>
    151e:	43 c0       	rjmp	.+134    	; 0x15a6 <GPIO_writePin+0xc0>
    1520:	2c 81       	ldd	r18, Y+4	; 0x04
    1522:	3d 81       	ldd	r19, Y+5	; 0x05
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	2c f4       	brge	.+10     	; 0x1534 <GPIO_writePin+0x4e>
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	71 f0       	breq	.+28     	; 0x154e <GPIO_writePin+0x68>
    1532:	bc c0       	rjmp	.+376    	; 0x16ac <GPIO_writePin+0x1c6>
    1534:	2c 81       	ldd	r18, Y+4	; 0x04
    1536:	3d 81       	ldd	r19, Y+5	; 0x05
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	09 f4       	brne	.+2      	; 0x1540 <GPIO_writePin+0x5a>
    153e:	5f c0       	rjmp	.+190    	; 0x15fe <GPIO_writePin+0x118>
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	83 30       	cpi	r24, 0x03	; 3
    1546:	91 05       	cpc	r25, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <GPIO_writePin+0x66>
    154a:	85 c0       	rjmp	.+266    	; 0x1656 <GPIO_writePin+0x170>
    154c:	af c0       	rjmp	.+350    	; 0x16ac <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	a1 f4       	brne	.+40     	; 0x157c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1554:	ab e3       	ldi	r26, 0x3B	; 59
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	eb e3       	ldi	r30, 0x3B	; 59
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <GPIO_writePin+0x8c>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <GPIO_writePin+0x88>
    1576:	84 2b       	or	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	98 c0       	rjmp	.+304    	; 0x16ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    157c:	ab e3       	ldi	r26, 0x3B	; 59
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	eb e3       	ldi	r30, 0x3B	; 59
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <GPIO_writePin+0xb4>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <GPIO_writePin+0xb0>
    159e:	80 95       	com	r24
    15a0:	84 23       	and	r24, r20
    15a2:	8c 93       	st	X, r24
    15a4:	83 c0       	rjmp	.+262    	; 0x16ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	a1 f4       	brne	.+40     	; 0x15d4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15ac:	a8 e3       	ldi	r26, 0x38	; 56
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e8 e3       	ldi	r30, 0x38	; 56
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <GPIO_writePin+0xe4>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <GPIO_writePin+0xe0>
    15ce:	84 2b       	or	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	6c c0       	rjmp	.+216    	; 0x16ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15d4:	a8 e3       	ldi	r26, 0x38	; 56
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e8 e3       	ldi	r30, 0x38	; 56
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_writePin+0x10c>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_writePin+0x108>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	57 c0       	rjmp	.+174    	; 0x16ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	a1 f4       	brne	.+40     	; 0x162c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1604:	a5 e3       	ldi	r26, 0x35	; 53
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e5 e3       	ldi	r30, 0x35	; 53
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_writePin+0x13c>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_writePin+0x138>
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	40 c0       	rjmp	.+128    	; 0x16ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    162c:	a5 e3       	ldi	r26, 0x35	; 53
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e5 e3       	ldi	r30, 0x35	; 53
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <GPIO_writePin+0x164>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <GPIO_writePin+0x160>
    164e:	80 95       	com	r24
    1650:	84 23       	and	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	2b c0       	rjmp	.+86     	; 0x16ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	a1 f4       	brne	.+40     	; 0x1684 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    165c:	a2 e3       	ldi	r26, 0x32	; 50
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e2 e3       	ldi	r30, 0x32	; 50
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <GPIO_writePin+0x194>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <GPIO_writePin+0x190>
    167e:	84 2b       	or	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1684:	a2 e3       	ldi	r26, 0x32	; 50
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e2 e3       	ldi	r30, 0x32	; 50
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <GPIO_writePin+0x1bc>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <GPIO_writePin+0x1b8>
    16a6:	80 95       	com	r24
    16a8:	84 23       	and	r24, r20
    16aa:	8c 93       	st	X, r24
			}
			break;
		}
	}
	return OK;
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8e 81       	ldd	r24, Y+6	; 0x06

}
    16b2:	26 96       	adiw	r28, 0x06	; 6
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <GPIO_readPin+0x6>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <GPIO_readPin+0x8>
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	8a 83       	std	Y+2, r24	; 0x02
    16d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16d6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	88 30       	cpi	r24, 0x08	; 8
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <GPIO_readPin+0x1c>
    16de:	84 c0       	rjmp	.+264    	; 0x17e8 <GPIO_readPin+0x124>
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	84 30       	cpi	r24, 0x04	; 4
    16e4:	08 f0       	brcs	.+2      	; 0x16e8 <GPIO_readPin+0x24>
    16e6:	80 c0       	rjmp	.+256    	; 0x17e8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3d 83       	std	Y+5, r19	; 0x05
    16f0:	2c 83       	std	Y+4, r18	; 0x04
    16f2:	4c 81       	ldd	r20, Y+4	; 0x04
    16f4:	5d 81       	ldd	r21, Y+5	; 0x05
    16f6:	41 30       	cpi	r20, 0x01	; 1
    16f8:	51 05       	cpc	r21, r1
    16fa:	79 f1       	breq	.+94     	; 0x175a <GPIO_readPin+0x96>
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	91 05       	cpc	r25, r1
    1704:	34 f4       	brge	.+12     	; 0x1712 <GPIO_readPin+0x4e>
    1706:	2c 81       	ldd	r18, Y+4	; 0x04
    1708:	3d 81       	ldd	r19, Y+5	; 0x05
    170a:	21 15       	cp	r18, r1
    170c:	31 05       	cpc	r19, r1
    170e:	69 f0       	breq	.+26     	; 0x172a <GPIO_readPin+0x66>
    1710:	6b c0       	rjmp	.+214    	; 0x17e8 <GPIO_readPin+0x124>
    1712:	4c 81       	ldd	r20, Y+4	; 0x04
    1714:	5d 81       	ldd	r21, Y+5	; 0x05
    1716:	42 30       	cpi	r20, 0x02	; 2
    1718:	51 05       	cpc	r21, r1
    171a:	b9 f1       	breq	.+110    	; 0x178a <GPIO_readPin+0xc6>
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	9d 81       	ldd	r25, Y+5	; 0x05
    1720:	83 30       	cpi	r24, 0x03	; 3
    1722:	91 05       	cpc	r25, r1
    1724:	09 f4       	brne	.+2      	; 0x1728 <GPIO_readPin+0x64>
    1726:	49 c0       	rjmp	.+146    	; 0x17ba <GPIO_readPin+0xf6>
    1728:	5f c0       	rjmp	.+190    	; 0x17e8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    172a:	e9 e3       	ldi	r30, 0x39	; 57
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a9 01       	movw	r20, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <GPIO_readPin+0x7e>
    173e:	55 95       	asr	r21
    1740:	47 95       	ror	r20
    1742:	8a 95       	dec	r24
    1744:	e2 f7       	brpl	.-8      	; 0x173e <GPIO_readPin+0x7a>
    1746:	ca 01       	movw	r24, r20
    1748:	81 70       	andi	r24, 0x01	; 1
    174a:	90 70       	andi	r25, 0x00	; 0
    174c:	88 23       	and	r24, r24
    174e:	19 f0       	breq	.+6      	; 0x1756 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	49 c0       	rjmp	.+146    	; 0x17e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1756:	19 82       	std	Y+1, r1	; 0x01
    1758:	47 c0       	rjmp	.+142    	; 0x17e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    175a:	e6 e3       	ldi	r30, 0x36	; 54
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a9 01       	movw	r20, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <GPIO_readPin+0xae>
    176e:	55 95       	asr	r21
    1770:	47 95       	ror	r20
    1772:	8a 95       	dec	r24
    1774:	e2 f7       	brpl	.-8      	; 0x176e <GPIO_readPin+0xaa>
    1776:	ca 01       	movw	r24, r20
    1778:	81 70       	andi	r24, 0x01	; 1
    177a:	90 70       	andi	r25, 0x00	; 0
    177c:	88 23       	and	r24, r24
    177e:	19 f0       	breq	.+6      	; 0x1786 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	31 c0       	rjmp	.+98     	; 0x17e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1786:	19 82       	std	Y+1, r1	; 0x01
    1788:	2f c0       	rjmp	.+94     	; 0x17e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    178a:	e3 e3       	ldi	r30, 0x33	; 51
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a9 01       	movw	r20, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <GPIO_readPin+0xde>
    179e:	55 95       	asr	r21
    17a0:	47 95       	ror	r20
    17a2:	8a 95       	dec	r24
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <GPIO_readPin+0xda>
    17a6:	ca 01       	movw	r24, r20
    17a8:	81 70       	andi	r24, 0x01	; 1
    17aa:	90 70       	andi	r25, 0x00	; 0
    17ac:	88 23       	and	r24, r24
    17ae:	19 f0       	breq	.+6      	; 0x17b6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	19 c0       	rjmp	.+50     	; 0x17e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17b6:	19 82       	std	Y+1, r1	; 0x01
    17b8:	17 c0       	rjmp	.+46     	; 0x17e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17ba:	e0 e3       	ldi	r30, 0x30	; 48
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a9 01       	movw	r20, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <GPIO_readPin+0x10e>
    17ce:	55 95       	asr	r21
    17d0:	47 95       	ror	r20
    17d2:	8a 95       	dec	r24
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <GPIO_readPin+0x10a>
    17d6:	ca 01       	movw	r24, r20
    17d8:	81 70       	andi	r24, 0x01	; 1
    17da:	90 70       	andi	r25, 0x00	; 0
    17dc:	88 23       	and	r24, r24
    17de:	19 f0       	breq	.+6      	; 0x17e6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17e6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
funcReturn GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <GPIO_setupPortDirection+0x6>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <GPIO_setupPortDirection+0x8>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	84 30       	cpi	r24, 0x04	; 4
    1810:	10 f0       	brcs	.+4      	; 0x1816 <GPIO_setupPortDirection+0x1c>
	{
		return NOT_OK;
    1812:	1d 82       	std	Y+5, r1	; 0x05
    1814:	34 c0       	rjmp	.+104    	; 0x187e <GPIO_setupPortDirection+0x84>
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3c 83       	std	Y+4, r19	; 0x04
    181e:	2b 83       	std	Y+3, r18	; 0x03
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	d1 f0       	breq	.+52     	; 0x185e <GPIO_setupPortDirection+0x64>
    182a:	2b 81       	ldd	r18, Y+3	; 0x03
    182c:	3c 81       	ldd	r19, Y+4	; 0x04
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	2c f4       	brge	.+10     	; 0x183e <GPIO_setupPortDirection+0x44>
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	61 f0       	breq	.+24     	; 0x1854 <GPIO_setupPortDirection+0x5a>
    183c:	1e c0       	rjmp	.+60     	; 0x187a <GPIO_setupPortDirection+0x80>
    183e:	2b 81       	ldd	r18, Y+3	; 0x03
    1840:	3c 81       	ldd	r19, Y+4	; 0x04
    1842:	22 30       	cpi	r18, 0x02	; 2
    1844:	31 05       	cpc	r19, r1
    1846:	81 f0       	breq	.+32     	; 0x1868 <GPIO_setupPortDirection+0x6e>
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	83 30       	cpi	r24, 0x03	; 3
    184e:	91 05       	cpc	r25, r1
    1850:	81 f0       	breq	.+32     	; 0x1872 <GPIO_setupPortDirection+0x78>
    1852:	13 c0       	rjmp	.+38     	; 0x187a <GPIO_setupPortDirection+0x80>
		{
		case PORTA_ID:
			DDRA = direction;
    1854:	ea e3       	ldi	r30, 0x3A	; 58
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	80 83       	st	Z, r24
    185c:	0e c0       	rjmp	.+28     	; 0x187a <GPIO_setupPortDirection+0x80>
			break;
		case PORTB_ID:
			DDRB = direction;
    185e:	e7 e3       	ldi	r30, 0x37	; 55
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	80 83       	st	Z, r24
    1866:	09 c0       	rjmp	.+18     	; 0x187a <GPIO_setupPortDirection+0x80>
			break;
		case PORTC_ID:
			DDRC = direction;
    1868:	e4 e3       	ldi	r30, 0x34	; 52
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	80 83       	st	Z, r24
    1870:	04 c0       	rjmp	.+8      	; 0x187a <GPIO_setupPortDirection+0x80>
			break;
		case PORTD_ID:
			DDRD = direction;
    1872:	e1 e3       	ldi	r30, 0x31	; 49
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 83       	st	Z, r24
			break;
		}
	}
	return OK;
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	9d 83       	std	Y+5, r25	; 0x05
    187e:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
funcReturn GPIO_writePort(uint8 port_num, uint8 value)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <GPIO_writePort+0x6>
    1896:	00 d0       	rcall	.+0      	; 0x1898 <GPIO_writePort+0x8>
    1898:	0f 92       	push	r0
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	10 f0       	brcs	.+4      	; 0x18ac <GPIO_writePort+0x1c>
	{
		return NOT_OK;
    18a8:	1d 82       	std	Y+5, r1	; 0x05
    18aa:	34 c0       	rjmp	.+104    	; 0x1914 <GPIO_writePort+0x84>
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3c 83       	std	Y+4, r19	; 0x04
    18b4:	2b 83       	std	Y+3, r18	; 0x03
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	91 05       	cpc	r25, r1
    18be:	d1 f0       	breq	.+52     	; 0x18f4 <GPIO_writePort+0x64>
    18c0:	2b 81       	ldd	r18, Y+3	; 0x03
    18c2:	3c 81       	ldd	r19, Y+4	; 0x04
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <GPIO_writePort+0x44>
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	61 f0       	breq	.+24     	; 0x18ea <GPIO_writePort+0x5a>
    18d2:	1e c0       	rjmp	.+60     	; 0x1910 <GPIO_writePort+0x80>
    18d4:	2b 81       	ldd	r18, Y+3	; 0x03
    18d6:	3c 81       	ldd	r19, Y+4	; 0x04
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	81 f0       	breq	.+32     	; 0x18fe <GPIO_writePort+0x6e>
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	91 05       	cpc	r25, r1
    18e6:	81 f0       	breq	.+32     	; 0x1908 <GPIO_writePort+0x78>
    18e8:	13 c0       	rjmp	.+38     	; 0x1910 <GPIO_writePort+0x80>
		{
		case PORTA_ID:
			PORTA = value;
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	80 83       	st	Z, r24
    18f2:	0e c0       	rjmp	.+28     	; 0x1910 <GPIO_writePort+0x80>
			break;
		case PORTB_ID:
			PORTB = value;
    18f4:	e8 e3       	ldi	r30, 0x38	; 56
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	80 83       	st	Z, r24
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <GPIO_writePort+0x80>
			break;
		case PORTC_ID:
			PORTC = value;
    18fe:	e5 e3       	ldi	r30, 0x35	; 53
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	80 83       	st	Z, r24
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <GPIO_writePort+0x80>
			break;
		case PORTD_ID:
			PORTD = value;
    1908:	e2 e3       	ldi	r30, 0x32	; 50
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	80 83       	st	Z, r24
			break;
		}
	}
	return OK;
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	9d 83       	std	Y+5, r25	; 0x05
    1914:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <GPIO_readPort+0x6>
    192c:	00 d0       	rcall	.+0      	; 0x192e <GPIO_readPort+0x8>
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1934:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	90 f5       	brcc	.+100    	; 0x19a0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	3c 83       	std	Y+4, r19	; 0x04
    1944:	2b 83       	std	Y+3, r18	; 0x03
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	91 05       	cpc	r25, r1
    194e:	d1 f0       	breq	.+52     	; 0x1984 <GPIO_readPort+0x5e>
    1950:	2b 81       	ldd	r18, Y+3	; 0x03
    1952:	3c 81       	ldd	r19, Y+4	; 0x04
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	2c f4       	brge	.+10     	; 0x1964 <GPIO_readPort+0x3e>
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	61 f0       	breq	.+24     	; 0x197a <GPIO_readPort+0x54>
    1962:	1e c0       	rjmp	.+60     	; 0x19a0 <GPIO_readPort+0x7a>
    1964:	2b 81       	ldd	r18, Y+3	; 0x03
    1966:	3c 81       	ldd	r19, Y+4	; 0x04
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	81 f0       	breq	.+32     	; 0x198e <GPIO_readPort+0x68>
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	81 f0       	breq	.+32     	; 0x1998 <GPIO_readPort+0x72>
    1978:	13 c0       	rjmp	.+38     	; 0x19a0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    197a:	e9 e3       	ldi	r30, 0x39	; 57
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	0e c0       	rjmp	.+28     	; 0x19a0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1984:	e6 e3       	ldi	r30, 0x36	; 54
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	09 c0       	rjmp	.+18     	; 0x19a0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    198e:	e3 e3       	ldi	r30, 0x33	; 51
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	04 c0       	rjmp	.+8      	; 0x19a0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1998:	e0 e3       	ldi	r30, 0x30	; 48
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <i2c_init>:
#include <avr/io.h>

#include "i2c.h"
#include "std_types.h"

void i2c_init(){
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x62;		//	Baud rate is set by calculating
    19b8:	e0 e2       	ldi	r30, 0x20	; 32
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	82 e6       	ldi	r24, 0x62	; 98
    19be:	80 83       	st	Z, r24
	TWCR = (1<<TWEN);	//Enable I2C
    19c0:	e6 e5       	ldi	r30, 0x56	; 86
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	84 e0       	ldi	r24, 0x04	; 4
    19c6:	80 83       	st	Z, r24
	TWSR = 0x00;		//Prescaler set to 1
    19c8:	e1 e2       	ldi	r30, 0x21	; 33
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	10 82       	st	Z, r1

}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <i2c_start>:
		//Start condition
void i2c_start(){
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);	//start condition
    19dc:	e6 e5       	ldi	r30, 0x56	; 86
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	84 ea       	ldi	r24, 0xA4	; 164
    19e2:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));				//check for start condition
    19e4:	e6 e5       	ldi	r30, 0x56	; 86
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	88 23       	and	r24, r24
    19ec:	dc f7       	brge	.-10     	; 0x19e4 <i2c_start+0x10>

}
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <i2c_write>:
		//I2C stop condition
void i2c_write(uint8 x){				//Cpn esta funcion se escribe en el bus de TWDR
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	0f 92       	push	r0
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	89 83       	std	Y+1, r24	; 0x01
	TWDR = x;						//Move value to I2C
    1a00:	e3 e2       	ldi	r30, 0x23	; 35
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
    1a08:	e6 e5       	ldi	r30, 0x56	; 86
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	84 e8       	ldi	r24, 0x84	; 132
    1a0e:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWINT)));
    1a10:	e6 e5       	ldi	r30, 0x56	; 86
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	88 23       	and	r24, r24
    1a18:	dc f7       	brge	.-10     	; 0x1a10 <i2c_write+0x1c>
}
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <i2c_read>:

char i2c_read(){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	TWCR  = (1<<TWEN) | (1<<TWINT);	//Enable I2C and clear interrupt
    1a2a:	e6 e5       	ldi	r30, 0x56	; 86
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	84 e8       	ldi	r24, 0x84	; 132
    1a30:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));	//Read successful with all data received in TWDR
    1a32:	e6 e5       	ldi	r30, 0x56	; 86
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	88 23       	and	r24, r24
    1a3a:	dc f7       	brge	.-10     	; 0x1a32 <i2c_read+0x10>
	return TWDR;
    1a3c:	e3 e2       	ldi	r30, 0x23	; 35
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
}
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <__vector_6>:
static volatile void (*ICU_g_callBackPtr)(void) = NULL_PTR;

  uint16 ICU_CapturedValue=0;
  uint8 ICU_ISR_lastEdge=0;

ISR(TIMER1_CAPT_vect){
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	if(ICU_g_callBackPtr != NULL_PTR)
    1a72:	80 91 3b 02 	lds	r24, 0x023B
    1a76:	90 91 3c 02 	lds	r25, 0x023C
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <__vector_6+0x40>

	(*ICU_g_callBackPtr)();	//Call the callback function that is stored in the pointer
    1a7e:	e0 91 3b 02 	lds	r30, 0x023B
    1a82:	f0 91 3c 02 	lds	r31, 0x023C
    1a86:	09 95       	icall

//	SET_BIT(TIFR,ICF1);		//Lower the ICU flag
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	ff 91       	pop	r31
    1a8e:	ef 91       	pop	r30
    1a90:	bf 91       	pop	r27
    1a92:	af 91       	pop	r26
    1a94:	9f 91       	pop	r25
    1a96:	8f 91       	pop	r24
    1a98:	7f 91       	pop	r23
    1a9a:	6f 91       	pop	r22
    1a9c:	5f 91       	pop	r21
    1a9e:	4f 91       	pop	r20
    1aa0:	3f 91       	pop	r19
    1aa2:	2f 91       	pop	r18
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <ICU_init>:





void ICU_init(const ICU_ConfigType *Config_ptr){
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <ICU_init+0x6>
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01

	//Timer1 normal mode
	CLEAR_BIT(TCCR1A,WGM10);
    1abc:	af e4       	ldi	r26, 0x4F	; 79
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	ef e4       	ldi	r30, 0x4F	; 79
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8e 7f       	andi	r24, 0xFE	; 254
    1ac8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    1aca:	af e4       	ldi	r26, 0x4F	; 79
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	ef e4       	ldi	r30, 0x4F	; 79
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8d 7f       	andi	r24, 0xFD	; 253
    1ad6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    1ad8:	ae e4       	ldi	r26, 0x4E	; 78
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	ee e4       	ldi	r30, 0x4E	; 78
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	87 7f       	andi	r24, 0xF7	; 247
    1ae4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    1ae6:	ae e4       	ldi	r26, 0x4E	; 78
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	ee e4       	ldi	r30, 0x4E	; 78
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	8f 7e       	andi	r24, 0xEF	; 239
    1af2:	8c 93       	st	X, r24

	//Non PWM mode
	CLEAR_BIT(TCCR1A,FOC1A);
    1af4:	af e4       	ldi	r26, 0x4F	; 79
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	ef e4       	ldi	r30, 0x4F	; 79
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	87 7f       	andi	r24, 0xF7	; 247
    1b00:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,FOC1B);
    1b02:	af e4       	ldi	r26, 0x4F	; 79
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	ef e4       	ldi	r30, 0x4F	; 79
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	8b 7f       	andi	r24, 0xFB	; 251
    1b0e:	8c 93       	st	X, r24

	//Set direction of ICU1 pin (PORTD PIN6)
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	66 e0       	ldi	r22, 0x06	; 6
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>

	//insert prescaler bits into the first 3 of TCCR1B (Bit 2:0 – CS12:0: Clock Select)
	TCCR1B=(TCCR1B & 0xF8) | (Config_ptr->prescaler  & ~(0xF8));
    1b1a:	ae e4       	ldi	r26, 0x4E	; 78
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	ee e4       	ldi	r30, 0x4E	; 78
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	98 2f       	mov	r25, r24
    1b26:	98 7f       	andi	r25, 0xF8	; 248
    1b28:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2c:	81 81       	ldd	r24, Z+1	; 0x01
    1b2e:	87 70       	andi	r24, 0x07	; 7
    1b30:	89 2b       	or	r24, r25
    1b32:	8c 93       	st	X, r24

	//Select default edge type
	ICU_setEdgeDetectionType(Config_ptr->edge_type);
    1b34:	e9 81       	ldd	r30, Y+1	; 0x01
    1b36:	fa 81       	ldd	r31, Y+2	; 0x02
    1b38:	80 81       	ld	r24, Z
    1b3a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <ICU_setEdgeDetectionType>

	//Reset the current time register
	ICU_clearTimer();
    1b3e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <ICU_clearTimer>

	//Reset the captured value register
	ICR1=0;
    1b42:	e6 e4       	ldi	r30, 0x46	; 70
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	11 82       	std	Z+1, r1	; 0x01
    1b48:	10 82       	st	Z, r1

	//Enable ICU Interrupt
	SET_BIT(TIMSK,TICIE1);
    1b4a:	a9 e5       	ldi	r26, 0x59	; 89
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e9 e5       	ldi	r30, 0x59	; 89
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	80 62       	ori	r24, 0x20	; 32
    1b56:	8c 93       	st	X, r24

}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <ICU_setEdgeDetectionType>:


void ICU_setEdgeDetectionType(const ICU_Edge_Type edge_type)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	0f 92       	push	r0
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	89 83       	std	Y+1, r24	; 0x01
	//Select edge type
	if(edge_type){						//Rising edge configuration
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	88 23       	and	r24, r24
    1b72:	41 f0       	breq	.+16     	; 0x1b84 <ICU_setEdgeDetectionType+0x22>
		SET_BIT(TCCR1B,6);
    1b74:	ae e4       	ldi	r26, 0x4E	; 78
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	ee e4       	ldi	r30, 0x4E	; 78
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 64       	ori	r24, 0x40	; 64
    1b80:	8c 93       	st	X, r24
    1b82:	07 c0       	rjmp	.+14     	; 0x1b92 <ICU_setEdgeDetectionType+0x30>
	}else{								//Falling edge configuration
		CLEAR_BIT(TCCR1B,6);
    1b84:	ae e4       	ldi	r26, 0x4E	; 78
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ee e4       	ldi	r30, 0x4E	; 78
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8f 7b       	andi	r24, 0xBF	; 191
    1b90:	8c 93       	st	X, r24
	}
}
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <ICU_getInputCaptureValue>:


uint16 ICU_getInputCaptureValue(void)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1ba2:	e6 e4       	ldi	r30, 0x46	; 70
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
}
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <ICU_clearTimer>:


void ICU_clearTimer(void)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1bb8:	ec e4       	ldi	r30, 0x4C	; 76
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	11 82       	std	Z+1, r1	; 0x01
    1bbe:	10 82       	st	Z, r1
}
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void)){
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <ICU_setCallBack+0x6>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
	ICU_g_callBackPtr=a_ptr;
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	90 93 3c 02 	sts	0x023C, r25
    1bdc:	80 93 3b 02 	sts	0x023B, r24
}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <PWM_Timer0_Start>:

/*
 * Description: start the pwm output with a certain duty cycle value
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	0f 92       	push	r0
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	89 83       	std	Y+1, r24	; 0x01
//	if(duty_cycle>100){
//		duty_cycle=100;
//	}
	// Set Timer Initial Value to 0
	TCNT0 = 0;
    1bf6:	e2 e5       	ldi	r30, 0x52	; 82
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	10 82       	st	Z, r1

	//fast PWM, non-inverted mode
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1bfc:	e3 e5       	ldi	r30, 0x53	; 83
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8a e6       	ldi	r24, 0x6A	; 106
    1c02:	80 83       	st	Z, r24

	//to get percent: divide duty cycle by 100 then multiply with 256
	OCR0  = (uint8)(((uint16)255*duty_cycle)/100);
    1c04:	ec e5       	ldi	r30, 0x5C	; 92
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	ca 01       	movw	r24, r20
    1c10:	9c 01       	movw	r18, r24
    1c12:	22 0f       	add	r18, r18
    1c14:	33 1f       	adc	r19, r19
    1c16:	c9 01       	movw	r24, r18
    1c18:	96 95       	lsr	r25
    1c1a:	98 2f       	mov	r25, r24
    1c1c:	88 27       	eor	r24, r24
    1c1e:	97 95       	ror	r25
    1c20:	87 95       	ror	r24
    1c22:	82 1b       	sub	r24, r18
    1c24:	93 0b       	sbc	r25, r19
    1c26:	84 0f       	add	r24, r20
    1c28:	95 1f       	adc	r25, r21
    1c2a:	24 e6       	ldi	r18, 0x64	; 100
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	b9 01       	movw	r22, r18
    1c30:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__udivmodhi4>
    1c34:	cb 01       	movw	r24, r22
    1c36:	80 83       	st	Z, r24

	//set direction as output for pin where the PWM signal is generated
	GPIO_setupPinDirection(PWM_ENABLE_PORT_ID,PWM_ENABLE_PIN_ID,PIN_OUTPUT);
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	63 e0       	ldi	r22, 0x03	; 3
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
}
    1c42:	0f 90       	pop	r0
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <UART_init>:
/*
 * Description :
 * Functional responsible for Initialize the UART device
 */
void UART_init(UART_ConfigType *UART_CONFIG_PTR)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <UART_init+0x6>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <UART_init+0x8>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1c5a:	1a 82       	std	Y+2, r1	; 0x02
    1c5c:	19 82       	std	Y+1, r1	; 0x01

	//	for double transmission speed
	UCSRA = (1<<U2X);
    1c5e:	eb e2       	ldi	r30, 0x2B	; 43
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	80 83       	st	Z, r24


	//	 Receiver Enable + Transmitter Enable + Enable RX interrupt
//	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1c66:	ea e2       	ldi	r30, 0x2A	; 42
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	88 e1       	ldi	r24, 0x18	; 24
    1c6c:	80 83       	st	Z, r24


	//	 * URSEL   The URSEL must be one while writing the UCSRC
	SET_BIT(UCSRC,URSEL);
    1c6e:	a0 e4       	ldi	r26, 0x40	; 64
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e0 e4       	ldi	r30, 0x40	; 64
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	80 68       	ori	r24, 0x80	; 128
    1c7a:	8c 93       	st	X, r24
	//	 * UMSEL   Operation mode
	//	 * UPM1:0  parity bit
	//	 * USBS    No of stop bits
	//	 * UCSZ1:0 For data mode
	//	 * UCPOL   Used with the Synchronous operation only
	UCSRC =( (UCSRC & ~0x40) | ( ( (UART_CONFIG_PTR->synchronization)<<UMSEL) & 0x40 ) );
    1c7c:	a0 e4       	ldi	r26, 0x40	; 64
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e0 e4       	ldi	r30, 0x40	; 64
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	28 2f       	mov	r18, r24
    1c88:	2f 7b       	andi	r18, 0xBF	; 191
    1c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8e:	87 81       	ldd	r24, Z+7	; 0x07
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	00 24       	eor	r0, r0
    1c96:	96 95       	lsr	r25
    1c98:	87 95       	ror	r24
    1c9a:	07 94       	ror	r0
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	07 94       	ror	r0
    1ca2:	98 2f       	mov	r25, r24
    1ca4:	80 2d       	mov	r24, r0
    1ca6:	80 74       	andi	r24, 0x40	; 64
    1ca8:	82 2b       	or	r24, r18
    1caa:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x30) | ( ( (UART_CONFIG_PTR->parity)<<UPM0) & 0x30) );
    1cac:	a0 e4       	ldi	r26, 0x40	; 64
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e0 e4       	ldi	r30, 0x40	; 64
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	2f 7c       	andi	r18, 0xCF	; 207
    1cba:	eb 81       	ldd	r30, Y+3	; 0x03
    1cbc:	fc 81       	ldd	r31, Y+4	; 0x04
    1cbe:	81 81       	ldd	r24, Z+1	; 0x01
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	82 95       	swap	r24
    1cc6:	92 95       	swap	r25
    1cc8:	90 7f       	andi	r25, 0xF0	; 240
    1cca:	98 27       	eor	r25, r24
    1ccc:	80 7f       	andi	r24, 0xF0	; 240
    1cce:	98 27       	eor	r25, r24
    1cd0:	80 73       	andi	r24, 0x30	; 48
    1cd2:	82 2b       	or	r24, r18
    1cd4:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x08) | ( ( (UART_CONFIG_PTR->stop_bit)<<USBS) & 0x08) );
    1cd6:	a0 e4       	ldi	r26, 0x40	; 64
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e0 e4       	ldi	r30, 0x40	; 64
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	27 7f       	andi	r18, 0xF7	; 247
    1ce4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	88 70       	andi	r24, 0x08	; 8
    1cfc:	82 2b       	or	r24, r18
    1cfe:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x06) | ( ( (UART_CONFIG_PTR->bit_data)<<UCSZ0) & 0x06) );
    1d00:	a0 e4       	ldi	r26, 0x40	; 64
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e0 e4       	ldi	r30, 0x40	; 64
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	29 7f       	andi	r18, 0xF9	; 249
    1d0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d10:	fc 81       	ldd	r31, Y+4	; 0x04
    1d12:	80 81       	ld	r24, Z
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	86 70       	andi	r24, 0x06	; 6
    1d1e:	82 2b       	or	r24, r18
    1d20:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (UART_CONFIG_PTR->baud_rate * 8UL))) - 1);
    1d22:	eb 81       	ldd	r30, Y+3	; 0x03
    1d24:	fc 81       	ldd	r31, Y+4	; 0x04
    1d26:	83 81       	ldd	r24, Z+3	; 0x03
    1d28:	94 81       	ldd	r25, Z+4	; 0x04
    1d2a:	a5 81       	ldd	r26, Z+5	; 0x05
    1d2c:	b6 81       	ldd	r27, Z+6	; 0x06
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	aa 1f       	adc	r26, r26
    1d34:	bb 1f       	adc	r27, r27
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	aa 1f       	adc	r26, r26
    1d3c:	bb 1f       	adc	r27, r27
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	aa 1f       	adc	r26, r26
    1d44:	bb 1f       	adc	r27, r27
    1d46:	9c 01       	movw	r18, r24
    1d48:	ad 01       	movw	r20, r26
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	94 e2       	ldi	r25, 0x24	; 36
    1d4e:	a4 ef       	ldi	r26, 0xF4	; 244
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__udivmodsi4>
    1d5a:	da 01       	movw	r26, r20
    1d5c:	c9 01       	movw	r24, r18
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1d64:	e0 e4       	ldi	r30, 0x40	; 64
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6c:	89 2f       	mov	r24, r25
    1d6e:	99 27       	eor	r25, r25
    1d70:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1d72:	e9 e2       	ldi	r30, 0x29	; 41
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	80 83       	st	Z, r24
}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <UART_sendByte>:
/*
 * Description :
 * Function responsible for sending a byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	0f 92       	push	r0
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1d94:	eb e2       	ldi	r30, 0x2B	; 43
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	80 72       	andi	r24, 0x20	; 32
    1da0:	90 70       	andi	r25, 0x00	; 0
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	b9 f3       	breq	.-18     	; 0x1d94 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register
	 */
	UDR = data;
    1da6:	ec e2       	ldi	r30, 0x2C	; 44
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	80 83       	st	Z, r24

}
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receiving a byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1dbe:	eb e2       	ldi	r30, 0x2B	; 43
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 23       	and	r24, r24
    1dc6:	dc f7       	brge	.-10     	; 0x1dbe <UART_recieveByte+0x8>

	return UDR;
    1dc8:	ec e2       	ldi	r30, 0x2C	; 44
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <UART_sendString+0x6>
    1dda:	0f 92       	push	r0
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	9b 83       	std	Y+3, r25	; 0x03
    1de2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	0e c0       	rjmp	.+28     	; 0x1e04 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	fc 01       	movw	r30, r24
    1df4:	e2 0f       	add	r30, r18
    1df6:	f3 1f       	adc	r31, r19
    1df8:	80 81       	ld	r24, Z
    1dfa:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <UART_sendByte>
		i++;
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0e:	fc 01       	movw	r30, r24
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	80 81       	ld	r24, Z
    1e16:	88 23       	and	r24, r24
    1e18:	39 f7       	brne	.-50     	; 0x1de8 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <UART_receiveString+0xa>
    1e30:	0f 92       	push	r0
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	9b 83       	std	Y+3, r25	; 0x03
    1e38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e3a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	9b 81       	ldd	r25, Y+3	; 0x03
    1e46:	8c 01       	movw	r16, r24
    1e48:	02 0f       	add	r16, r18
    1e4a:	13 1f       	adc	r17, r19
    1e4c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <UART_recieveByte>
    1e50:	f8 01       	movw	r30, r16
    1e52:	80 83       	st	Z, r24
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	8f 5f       	subi	r24, 0xFF	; 255
    1e5a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	8c 01       	movw	r16, r24
    1e68:	02 0f       	add	r16, r18
    1e6a:	13 1f       	adc	r17, r19
    1e6c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <UART_recieveByte>
    1e70:	f8 01       	movw	r30, r16
    1e72:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e2 0f       	add	r30, r18
    1e82:	f3 1f       	adc	r31, r19
    1e84:	80 81       	ld	r24, Z
    1e86:	83 32       	cpi	r24, 0x23	; 35
    1e88:	31 f7       	brne	.-52     	; 0x1e56 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	9b 81       	ldd	r25, Y+3	; 0x03
    1e94:	fc 01       	movw	r30, r24
    1e96:	e2 0f       	add	r30, r18
    1e98:	f3 1f       	adc	r31, r19
    1e9a:	10 82       	st	Z, r1
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	08 95       	ret

00001eac <DCMotor_Init>:


/*
 * Description: initialize the motor driver
 */
funcReturn DCMotor_Init(void){
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <DCMotor_Init+0x6>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62

	funcReturn ret1;

	//set the enable pin as output
	GPIO_setupPinDirection(DC_MOTOR_ENABLE_PORT, DC_MOTOR_ENABLE_PIN, PIN_OUTPUT);
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	63 e0       	ldi	r22, 0x03	; 3
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>

	//set the IN pins as output
	GPIO_setupPinDirection(DC_MOTOR_FL_IN_PORT, DC_MOTOR_FL_IN_FIRST_PIN+0, PIN_OUTPUT);
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	64 e0       	ldi	r22, 0x04	; 4
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_FL_IN_PORT, DC_MOTOR_FL_IN_FIRST_PIN+1, PIN_OUTPUT);
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	65 e0       	ldi	r22, 0x05	; 5
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>


	GPIO_setupPinDirection(DC_MOTOR_FR_IN_PORT, DC_MOTOR_FR_IN_FIRST_PIN+0, PIN_OUTPUT);
    1ed4:	82 e0       	ldi	r24, 0x02	; 2
    1ed6:	62 e0       	ldi	r22, 0x02	; 2
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_FR_IN_PORT, DC_MOTOR_FR_IN_FIRST_PIN+1, PIN_OUTPUT);
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	63 e0       	ldi	r22, 0x03	; 3
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>


	GPIO_setupPinDirection(DC_MOTOR_BL_IN_PORT, DC_MOTOR_BL_IN_FIRST_PIN+0, PIN_OUTPUT);
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	62 e0       	ldi	r22, 0x02	; 2
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_BL_IN_PORT, DC_MOTOR_BL_IN_FIRST_PIN+1, PIN_OUTPUT);
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	63 e0       	ldi	r22, 0x03	; 3
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>


	GPIO_setupPinDirection(DC_MOTOR_BR_IN_PORT, DC_MOTOR_BR_IN_FIRST_PIN+0, PIN_OUTPUT);
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	66 e0       	ldi	r22, 0x06	; 6
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_BR_IN_PORT, DC_MOTOR_BR_IN_FIRST_PIN+1, PIN_OUTPUT);
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	67 e0       	ldi	r22, 0x07	; 7
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>


	//Stop the motor
	ret1=GPIO_writePin(DC_MOTOR_ENABLE_PORT, DC_MOTOR_ENABLE_PIN, DC_MOTOR_STOP);
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	63 e0       	ldi	r22, 0x03	; 3
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
    1f1a:	89 83       	std	Y+1, r24	; 0x01

	if(ret1 == 0){
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	88 23       	and	r24, r24
    1f20:	11 f4       	brne	.+4      	; 0x1f26 <DCMotor_Init+0x7a>
		return NOT_OK;
    1f22:	1a 82       	std	Y+2, r1	; 0x02
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <DCMotor_Init+0x7e>
	}

	return OK;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	8a 83       	std	Y+2, r24	; 0x02
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <DCMotor_Rotate>:


/*
 * Description: set the motor direction and rotation speed
 */
funcReturn DCMotor_Rotate(DcMotor_Select motor,DcMotor_State state,uint8 speed){
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <DCMotor_Rotate+0x6>
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <DCMotor_Rotate+0x8>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <DCMotor_Rotate+0xa>
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	6a 83       	std	Y+2, r22	; 0x02
    1f48:	4b 83       	std	Y+3, r20	; 0x03

	switch(state){
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	3e 83       	std	Y+6, r19	; 0x06
    1f52:	2d 83       	std	Y+5, r18	; 0x05
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	59 f0       	breq	.+22     	; 0x1f74 <DCMotor_Rotate+0x3e>
    1f5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f60:	3e 81       	ldd	r19, Y+6	; 0x06
    1f62:	22 30       	cpi	r18, 0x02	; 2
    1f64:	31 05       	cpc	r19, r1
    1f66:	79 f1       	breq	.+94     	; 0x1fc6 <DCMotor_Rotate+0x90>
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <DCMotor_Rotate+0x3c>
    1f70:	53 c0       	rjmp	.+166    	; 0x2018 <DCMotor_Rotate+0xe2>
    1f72:	7b c0       	rjmp	.+246    	; 0x206a <DCMotor_Rotate+0x134>
		case DC_MOTOR_CW:
			//set the direction as CW by the IN pins
			GPIO_writePin(DC_MOTOR_FL_IN_PORT, DC_MOTOR_FL_IN_FIRST_PIN+0, LOGIC_LOW);
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	64 e0       	ldi	r22, 0x04	; 4
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_FL_IN_PORT, DC_MOTOR_FL_IN_FIRST_PIN+1, LOGIC_HIGH);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	65 e0       	ldi	r22, 0x05	; 5
    1f82:	41 e0       	ldi	r20, 0x01	; 1
    1f84:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>


			GPIO_writePin(DC_MOTOR_FR_IN_PORT, DC_MOTOR_FR_IN_FIRST_PIN+0, LOGIC_LOW);
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	62 e0       	ldi	r22, 0x02	; 2
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_FR_IN_PORT, DC_MOTOR_FR_IN_FIRST_PIN+1, LOGIC_HIGH);
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	63 e0       	ldi	r22, 0x03	; 3
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>


			GPIO_writePin(DC_MOTOR_BL_IN_PORT, DC_MOTOR_BL_IN_FIRST_PIN+0, LOGIC_LOW);
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	62 e0       	ldi	r22, 0x02	; 2
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_BL_IN_PORT, DC_MOTOR_BL_IN_FIRST_PIN+1, LOGIC_HIGH);
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	63 e0       	ldi	r22, 0x03	; 3
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>


			GPIO_writePin(DC_MOTOR_BR_IN_PORT, DC_MOTOR_BR_IN_FIRST_PIN+0, LOGIC_LOW);
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	66 e0       	ldi	r22, 0x06	; 6
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_BR_IN_PORT, DC_MOTOR_BR_IN_FIRST_PIN+1, LOGIC_HIGH);
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	67 e0       	ldi	r22, 0x07	; 7
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
    1fc4:	54 c0       	rjmp	.+168    	; 0x206e <DCMotor_Rotate+0x138>
			break;

		case DC_MOTOR_CCW:
			//set the direction as CW by the IN pins
			GPIO_writePin(DC_MOTOR_FL_IN_PORT, DC_MOTOR_FL_IN_FIRST_PIN+0, LOGIC_HIGH);
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	64 e0       	ldi	r22, 0x04	; 4
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_FL_IN_PORT, DC_MOTOR_FL_IN_FIRST_PIN+1, LOGIC_LOW);
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	65 e0       	ldi	r22, 0x05	; 5
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>


			GPIO_writePin(DC_MOTOR_FR_IN_PORT, DC_MOTOR_FR_IN_FIRST_PIN+0, LOGIC_HIGH);
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	62 e0       	ldi	r22, 0x02	; 2
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_FR_IN_PORT, DC_MOTOR_FR_IN_FIRST_PIN+1, LOGIC_LOW);
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	63 e0       	ldi	r22, 0x03	; 3
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>


			GPIO_writePin(DC_MOTOR_BL_IN_PORT, DC_MOTOR_BL_IN_FIRST_PIN+0, LOGIC_HIGH);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	62 e0       	ldi	r22, 0x02	; 2
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_BL_IN_PORT, DC_MOTOR_BL_IN_FIRST_PIN+1, LOGIC_LOW);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	63 e0       	ldi	r22, 0x03	; 3
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>


			GPIO_writePin(DC_MOTOR_BR_IN_PORT, DC_MOTOR_BR_IN_FIRST_PIN+0, LOGIC_HIGH);
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	66 e0       	ldi	r22, 0x06	; 6
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_BR_IN_PORT, DC_MOTOR_BR_IN_FIRST_PIN+1, LOGIC_LOW);
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	67 e0       	ldi	r22, 0x07	; 7
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
    2016:	2b c0       	rjmp	.+86     	; 0x206e <DCMotor_Rotate+0x138>
			break;


		case DC_MOTOR_STOP:
			//Stop the motor by the IN pins
			GPIO_writePin(DC_MOTOR_FL_IN_PORT, DC_MOTOR_FL_IN_FIRST_PIN+0, LOGIC_LOW);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	64 e0       	ldi	r22, 0x04	; 4
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_FL_IN_PORT, DC_MOTOR_FL_IN_FIRST_PIN+1, LOGIC_LOW);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	65 e0       	ldi	r22, 0x05	; 5
    2026:	40 e0       	ldi	r20, 0x00	; 0
    2028:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>


			GPIO_writePin(DC_MOTOR_FR_IN_PORT, DC_MOTOR_FR_IN_FIRST_PIN+0, LOGIC_LOW);
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	62 e0       	ldi	r22, 0x02	; 2
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_FR_IN_PORT, DC_MOTOR_FR_IN_FIRST_PIN+1, LOGIC_LOW);
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	63 e0       	ldi	r22, 0x03	; 3
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>


			GPIO_writePin(DC_MOTOR_BL_IN_PORT, DC_MOTOR_BL_IN_FIRST_PIN+0, LOGIC_LOW);
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	62 e0       	ldi	r22, 0x02	; 2
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_BL_IN_PORT, DC_MOTOR_BL_IN_FIRST_PIN+1, LOGIC_LOW);
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	63 e0       	ldi	r22, 0x03	; 3
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>


			GPIO_writePin(DC_MOTOR_BR_IN_PORT, DC_MOTOR_BR_IN_FIRST_PIN+0, LOGIC_LOW);
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	66 e0       	ldi	r22, 0x06	; 6
    2058:	40 e0       	ldi	r20, 0x00	; 0
    205a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_BR_IN_PORT, DC_MOTOR_BR_IN_FIRST_PIN+1, LOGIC_LOW);
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	67 e0       	ldi	r22, 0x07	; 7
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
    2068:	02 c0       	rjmp	.+4      	; 0x206e <DCMotor_Rotate+0x138>
			break;

		default:
			return NOT_OK;
    206a:	1c 82       	std	Y+4, r1	; 0x04
    206c:	05 c0       	rjmp	.+10     	; 0x2078 <DCMotor_Rotate+0x142>
	}

	//set the motor speed by passing the PWM value to the function
	PWM_Timer0_Start(speed);
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <PWM_Timer0_Start>

	return OK;
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	9c 83       	std	Y+4, r25	; 0x04
    2078:	8c 81       	ldd	r24, Y+4	; 0x04

}
    207a:	26 96       	adiw	r28, 0x06	; 6
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <GPS_init>:
uint8 latitude[12]={0};
uint8 logitude[12]={0};



void GPS_init(void){
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	2d 97       	sbiw	r28, 0x0d	; 13
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61

	UART_ConfigType UART_GPS = {UART_8_Bits, UART_PARITY_DISABLED, UART_STOPBIT_1_BIT, 9600, UART_ASYNCHRONOUS};
    20a0:	ce 01       	movw	r24, r28
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	9a 87       	std	Y+10, r25	; 0x0a
    20a6:	89 87       	std	Y+9, r24	; 0x09
    20a8:	ea e2       	ldi	r30, 0x2A	; 42
    20aa:	f2 e0       	ldi	r31, 0x02	; 2
    20ac:	fc 87       	std	Y+12, r31	; 0x0c
    20ae:	eb 87       	std	Y+11, r30	; 0x0b
    20b0:	f8 e0       	ldi	r31, 0x08	; 8
    20b2:	fd 87       	std	Y+13, r31	; 0x0d
    20b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    20b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    20b8:	00 80       	ld	r0, Z
    20ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    20bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	9c 87       	std	Y+12, r25	; 0x0c
    20c2:	8b 87       	std	Y+11, r24	; 0x0b
    20c4:	e9 85       	ldd	r30, Y+9	; 0x09
    20c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    20c8:	00 82       	st	Z, r0
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	01 96       	adiw	r24, 0x01	; 1
    20d0:	9a 87       	std	Y+10, r25	; 0x0a
    20d2:	89 87       	std	Y+9, r24	; 0x09
    20d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    20d6:	91 50       	subi	r25, 0x01	; 1
    20d8:	9d 87       	std	Y+13, r25	; 0x0d
    20da:	ed 85       	ldd	r30, Y+13	; 0x0d
    20dc:	ee 23       	and	r30, r30
    20de:	51 f7       	brne	.-44     	; 0x20b4 <GPS_init+0x28>
	UART_init(&UART_GPS);
    20e0:	ce 01       	movw	r24, r28
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <UART_init>
}
    20e8:	2d 96       	adiw	r28, 0x0d	; 13
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <GPS_readPosition>:

void GPS_readPosition(void){
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62

	GPS_readDataStream();
    2102:	0e 94 88 10 	call	0x2110	; 0x2110 <GPS_readDataStream>

	GPS_processData();
    2106:	0e 94 ef 10 	call	0x21de	; 0x21de <GPS_processData>
}
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <GPS_readDataStream>:

void GPS_readDataStream(void){
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62

	buf[i] = UART_recieveByte();
    211c:	80 91 40 02 	lds	r24, 0x0240
    2120:	08 2f       	mov	r16, r24
    2122:	10 e0       	ldi	r17, 0x00	; 0
    2124:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <UART_recieveByte>
    2128:	f8 01       	movw	r30, r16
    212a:	eb 59       	subi	r30, 0x9B	; 155
    212c:	fd 4f       	sbci	r31, 0xFD	; 253
    212e:	80 83       	st	Z, r24
    2130:	4c c0       	rjmp	.+152    	; 0x21ca <GPS_readDataStream+0xba>

	while(	stringReceived == 0){
		i++;
    2132:	80 91 40 02 	lds	r24, 0x0240
    2136:	8f 5f       	subi	r24, 0xFF	; 255
    2138:	80 93 40 02 	sts	0x0240, r24

		buf[i] = UART_recieveByte();
    213c:	80 91 40 02 	lds	r24, 0x0240
    2140:	08 2f       	mov	r16, r24
    2142:	10 e0       	ldi	r17, 0x00	; 0
    2144:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <UART_recieveByte>
    2148:	f8 01       	movw	r30, r16
    214a:	eb 59       	subi	r30, 0x9B	; 155
    214c:	fd 4f       	sbci	r31, 0xFD	; 253
    214e:	80 83       	st	Z, r24

//		LCD_intgerToString(buf[i]);
//		LCD_intgerToString(i);


		if(i<7)
    2150:	80 91 40 02 	lds	r24, 0x0240
    2154:	87 30       	cpi	r24, 0x07	; 7
    2156:	b0 f4       	brcc	.+44     	; 0x2184 <GPS_readDataStream+0x74>
		{

			if(buf[i-1] != gpgga[i-1]){               // $GPGGA
    2158:	80 91 40 02 	lds	r24, 0x0240
    215c:	88 2f       	mov	r24, r24
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	fc 01       	movw	r30, r24
    2164:	eb 59       	subi	r30, 0x9B	; 155
    2166:	fd 4f       	sbci	r31, 0xFD	; 253
    2168:	20 81       	ld	r18, Z
    216a:	80 91 40 02 	lds	r24, 0x0240
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	fc 01       	movw	r30, r24
    2176:	e4 5f       	subi	r30, 0xF4	; 244
    2178:	fd 4f       	sbci	r31, 0xFD	; 253
    217a:	80 81       	ld	r24, Z
    217c:	28 17       	cp	r18, r24
    217e:	11 f0       	breq	.+4      	; 0x2184 <GPS_readDataStream+0x74>
				i=0;
    2180:	10 92 40 02 	sts	0x0240, r1
			}else{

			}
		}
		if(i>=50){
    2184:	80 91 40 02 	lds	r24, 0x0240
    2188:	82 33       	cpi	r24, 0x32	; 50
    218a:	f8 f0       	brcs	.+62     	; 0x21ca <GPS_readDataStream+0xba>
			stringReceived=1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	80 93 64 02 	sts	0x0264, r24
			SET_BIT(DDRA,0);
    2192:	aa e3       	ldi	r26, 0x3A	; 58
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	ea e3       	ldi	r30, 0x3A	; 58
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	81 60       	ori	r24, 0x01	; 1
    219e:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA,0);
    21a0:	ab e3       	ldi	r26, 0x3B	; 59
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	eb e3       	ldi	r30, 0x3B	; 59
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8e 7f       	andi	r24, 0xFE	; 254
    21ac:	8c 93       	st	X, r24

			CLEAR_BIT(PORTA,0);
    21ae:	ab e3       	ldi	r26, 0x3B	; 59
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	eb e3       	ldi	r30, 0x3B	; 59
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	8e 7f       	andi	r24, 0xFE	; 254
    21ba:	8c 93       	st	X, r24
			SET_BIT(PORTA,0);
    21bc:	ab e3       	ldi	r26, 0x3B	; 59
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	eb e3       	ldi	r30, 0x3B	; 59
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	81 60       	ori	r24, 0x01	; 1
    21c8:	8c 93       	st	X, r24

void GPS_readDataStream(void){

	buf[i] = UART_recieveByte();

	while(	stringReceived == 0){
    21ca:	80 91 64 02 	lds	r24, 0x0264
    21ce:	88 23       	and	r24, r24
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <GPS_readDataStream+0xc4>
    21d2:	af cf       	rjmp	.-162    	; 0x2132 <GPS_readDataStream+0x22>
			CLEAR_BIT(PORTA,0);
			SET_BIT(PORTA,0);
		}
	}

}
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	08 95       	ret

000021de <GPS_processData>:


void GPS_processData(void){
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	66 97       	sbiw	r28, 0x16	; 22
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61

	if(stringReceived == 1)
    21f2:	80 91 64 02 	lds	r24, 0x0264
    21f6:	81 30       	cpi	r24, 0x01	; 1
    21f8:	09 f0       	breq	.+2      	; 0x21fc <GPS_processData+0x1e>
    21fa:	bc c0       	rjmp	.+376    	; 0x2374 <GPS_processData+0x196>

	{

		cli();
    21fc:	f8 94       	cli

		i=0;
    21fe:	10 92 40 02 	sts	0x0240, r1

		stringReceived=0;
    2202:	10 92 64 02 	sts	0x0264, r1



		for(int j=17,k=0;j<28;j++,k++)
    2206:	81 e1       	ldi	r24, 0x11	; 17
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9e 8b       	std	Y+22, r25	; 0x16
    220c:	8d 8b       	std	Y+21, r24	; 0x15
    220e:	1c 8a       	std	Y+20, r1	; 0x14
    2210:	1b 8a       	std	Y+19, r1	; 0x13
    2212:	16 c0       	rjmp	.+44     	; 0x2240 <GPS_processData+0x62>

		{
			latitude[k]=buf[j];
    2214:	2b 89       	ldd	r18, Y+19	; 0x13
    2216:	3c 89       	ldd	r19, Y+20	; 0x14
    2218:	8d 89       	ldd	r24, Y+21	; 0x15
    221a:	9e 89       	ldd	r25, Y+22	; 0x16
    221c:	fc 01       	movw	r30, r24
    221e:	eb 59       	subi	r30, 0x9B	; 155
    2220:	fd 4f       	sbci	r31, 0xFD	; 253
    2222:	80 81       	ld	r24, Z
    2224:	f9 01       	movw	r30, r18
    2226:	ef 5b       	subi	r30, 0xBF	; 191
    2228:	fd 4f       	sbci	r31, 0xFD	; 253
    222a:	80 83       	st	Z, r24

		stringReceived=0;



		for(int j=17,k=0;j<28;j++,k++)
    222c:	8d 89       	ldd	r24, Y+21	; 0x15
    222e:	9e 89       	ldd	r25, Y+22	; 0x16
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	9e 8b       	std	Y+22, r25	; 0x16
    2234:	8d 8b       	std	Y+21, r24	; 0x15
    2236:	8b 89       	ldd	r24, Y+19	; 0x13
    2238:	9c 89       	ldd	r25, Y+20	; 0x14
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	9c 8b       	std	Y+20, r25	; 0x14
    223e:	8b 8b       	std	Y+19, r24	; 0x13
    2240:	8d 89       	ldd	r24, Y+21	; 0x15
    2242:	9e 89       	ldd	r25, Y+22	; 0x16
    2244:	8c 31       	cpi	r24, 0x1C	; 28
    2246:	91 05       	cpc	r25, r1
    2248:	2c f3       	brlt	.-54     	; 0x2214 <GPS_processData+0x36>

		{
			latitude[k]=buf[j];

		}
		for(int j=29,k=0;j<41;j++,k++)
    224a:	8d e1       	ldi	r24, 0x1D	; 29
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9a 8b       	std	Y+18, r25	; 0x12
    2250:	89 8b       	std	Y+17, r24	; 0x11
    2252:	18 8a       	std	Y+16, r1	; 0x10
    2254:	1f 86       	std	Y+15, r1	; 0x0f
    2256:	16 c0       	rjmp	.+44     	; 0x2284 <GPS_processData+0xa6>

		{
			logitude[k]=buf[j];
    2258:	2f 85       	ldd	r18, Y+15	; 0x0f
    225a:	38 89       	ldd	r19, Y+16	; 0x10
    225c:	89 89       	ldd	r24, Y+17	; 0x11
    225e:	9a 89       	ldd	r25, Y+18	; 0x12
    2260:	fc 01       	movw	r30, r24
    2262:	eb 59       	subi	r30, 0x9B	; 155
    2264:	fd 4f       	sbci	r31, 0xFD	; 253
    2266:	80 81       	ld	r24, Z
    2268:	f9 01       	movw	r30, r18
    226a:	e3 5b       	subi	r30, 0xB3	; 179
    226c:	fd 4f       	sbci	r31, 0xFD	; 253
    226e:	80 83       	st	Z, r24

		{
			latitude[k]=buf[j];

		}
		for(int j=29,k=0;j<41;j++,k++)
    2270:	89 89       	ldd	r24, Y+17	; 0x11
    2272:	9a 89       	ldd	r25, Y+18	; 0x12
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	9a 8b       	std	Y+18, r25	; 0x12
    2278:	89 8b       	std	Y+17, r24	; 0x11
    227a:	8f 85       	ldd	r24, Y+15	; 0x0f
    227c:	98 89       	ldd	r25, Y+16	; 0x10
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	98 8b       	std	Y+16, r25	; 0x10
    2282:	8f 87       	std	Y+15, r24	; 0x0f
    2284:	89 89       	ldd	r24, Y+17	; 0x11
    2286:	9a 89       	ldd	r25, Y+18	; 0x12
    2288:	89 32       	cpi	r24, 0x29	; 41
    228a:	91 05       	cpc	r25, r1
    228c:	2c f3       	brlt	.-54     	; 0x2258 <GPS_processData+0x7a>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a8 e4       	ldi	r26, 0x48	; 72
    2294:	b3 e4       	ldi	r27, 0x43	; 67
    2296:	8b 87       	std	Y+11, r24	; 0x0b
    2298:	9c 87       	std	Y+12, r25	; 0x0c
    229a:	ad 87       	std	Y+13, r26	; 0x0d
    229c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229e:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a e7       	ldi	r20, 0x7A	; 122
    22ac:	55 e4       	ldi	r21, 0x45	; 69
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	8f 83       	std	Y+7, r24	; 0x07
    22b8:	98 87       	std	Y+8, r25	; 0x08
    22ba:	a9 87       	std	Y+9, r26	; 0x09
    22bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	2c f4       	brge	.+10     	; 0x22e0 <GPS_processData+0x102>
		__ticks = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
    22de:	3f c0       	rjmp	.+126    	; 0x235e <GPS_processData+0x180>
	else if (__tmp > 65535)
    22e0:	6f 81       	ldd	r22, Y+7	; 0x07
    22e2:	78 85       	ldd	r23, Y+8	; 0x08
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	3f ef       	ldi	r19, 0xFF	; 255
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	57 e4       	ldi	r21, 0x47	; 71
    22f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f4:	18 16       	cp	r1, r24
    22f6:	4c f5       	brge	.+82     	; 0x234a <GPS_processData+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e2       	ldi	r20, 0x20	; 32
    2306:	51 e4       	ldi	r21, 0x41	; 65
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <GPS_processData+0x162>
    2322:	80 e9       	ldi	r24, 0x90	; 144
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <GPS_processData+0x150>
    2332:	9c 83       	std	Y+4, r25	; 0x04
    2334:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	69 f7       	brne	.-38     	; 0x2322 <GPS_processData+0x144>
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <GPS_processData+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234a:	6f 81       	ldd	r22, Y+7	; 0x07
    234c:	78 85       	ldd	r23, Y+8	; 0x08
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	9a 85       	ldd	r25, Y+10	; 0x0a
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <GPS_processData+0x18c>
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01
		}


		_delay_ms(200);

		sei();
    2372:	78 94       	sei

	}

}
    2374:	66 96       	adiw	r28, 0x16	; 22
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <IR_PROXIMITY_init>:


/*
 * Description: initialize
 */
funcReturn IR_PROXIMITY_init(IR_sensors sensor_num){
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <IR_PROXIMITY_init+0x6>
    238c:	00 d0       	rcall	.+0      	; 0x238e <IR_PROXIMITY_init+0x8>
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	89 83       	std	Y+1, r24	; 0x01
	switch(sensor_num){
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	3c 83       	std	Y+4, r19	; 0x04
    239c:	2b 83       	std	Y+3, r18	; 0x03
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	82 30       	cpi	r24, 0x02	; 2
    23a4:	91 05       	cpc	r25, r1
    23a6:	59 f1       	breq	.+86     	; 0x23fe <IR_PROXIMITY_init+0x78>
    23a8:	2b 81       	ldd	r18, Y+3	; 0x03
    23aa:	3c 81       	ldd	r19, Y+4	; 0x04
    23ac:	23 30       	cpi	r18, 0x03	; 3
    23ae:	31 05       	cpc	r19, r1
    23b0:	54 f4       	brge	.+20     	; 0x23c6 <IR_PROXIMITY_init+0x40>
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	b1 f0       	breq	.+44     	; 0x23e6 <IR_PROXIMITY_init+0x60>
    23ba:	2b 81       	ldd	r18, Y+3	; 0x03
    23bc:	3c 81       	ldd	r19, Y+4	; 0x04
    23be:	21 30       	cpi	r18, 0x01	; 1
    23c0:	31 05       	cpc	r19, r1
    23c2:	b9 f0       	breq	.+46     	; 0x23f2 <IR_PROXIMITY_init+0x6c>
    23c4:	34 c0       	rjmp	.+104    	; 0x242e <IR_PROXIMITY_init+0xa8>
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ca:	84 30       	cpi	r24, 0x04	; 4
    23cc:	91 05       	cpc	r25, r1
    23ce:	19 f1       	breq	.+70     	; 0x2416 <IR_PROXIMITY_init+0x90>
    23d0:	2b 81       	ldd	r18, Y+3	; 0x03
    23d2:	3c 81       	ldd	r19, Y+4	; 0x04
    23d4:	24 30       	cpi	r18, 0x04	; 4
    23d6:	31 05       	cpc	r19, r1
    23d8:	c4 f0       	brlt	.+48     	; 0x240a <IR_PROXIMITY_init+0x84>
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	85 30       	cpi	r24, 0x05	; 5
    23e0:	91 05       	cpc	r25, r1
    23e2:	f9 f0       	breq	.+62     	; 0x2422 <IR_PROXIMITY_init+0x9c>
    23e4:	24 c0       	rjmp	.+72     	; 0x242e <IR_PROXIMITY_init+0xa8>

	case LEFT_IR:
		GPIO_setupPinDirection(IR_LEFT_PORT_ID, IR_LEFT_PIN_ID, PIN_INPUT);
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	65 e0       	ldi	r22, 0x05	; 5
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
    23f0:	20 c0       	rjmp	.+64     	; 0x2432 <IR_PROXIMITY_init+0xac>
		break;

	case RIGHT_IR:
		GPIO_setupPinDirection(IR_RIGHT_PORT_ID, IR_RIGHT_PIN_ID, PIN_INPUT);
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	64 e0       	ldi	r22, 0x04	; 4
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
    23fc:	1a c0       	rjmp	.+52     	; 0x2432 <IR_PROXIMITY_init+0xac>
		break;

	case FRONT_IR:
		GPIO_setupPinDirection(IR_FRONT_PORT_ID, IR_FRONT_PIN_ID, PIN_INPUT);
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	66 e0       	ldi	r22, 0x06	; 6
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <IR_PROXIMITY_init+0xac>
		break;

	case BACK_IR:
		GPIO_setupPinDirection(IR_BACK_PORT_ID, IR_BACK_PIN_ID, PIN_INPUT);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	67 e0       	ldi	r22, 0x07	; 7
    240e:	40 e0       	ldi	r20, 0x00	; 0
    2410:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
    2414:	0e c0       	rjmp	.+28     	; 0x2432 <IR_PROXIMITY_init+0xac>
		break;

	case GROUND_L_IR:
		GPIO_setupPinDirection(IR_GROUND_L_PORT_ID, IR_GROUND_L_PIN_ID, PIN_INPUT);
    2416:	83 e0       	ldi	r24, 0x03	; 3
    2418:	62 e0       	ldi	r22, 0x02	; 2
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
    2420:	08 c0       	rjmp	.+16     	; 0x2432 <IR_PROXIMITY_init+0xac>
		break;

	case GROUND_R_IR:
		GPIO_setupPinDirection(IR_GROUND_R_PORT_ID, IR_GROUND_R_PIN_ID, PIN_INPUT);
    2422:	83 e0       	ldi	r24, 0x03	; 3
    2424:	63 e0       	ldi	r22, 0x03	; 3
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <IR_PROXIMITY_init+0xac>
		break;

	default:
		return NOT_OK;
    242e:	1a 82       	std	Y+2, r1	; 0x02
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <IR_PROXIMITY_init+0xb0>

	}

	return OK;
    2432:	91 e0       	ldi	r25, 0x01	; 1
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <IR_PROXIMITY_read>:


/*
 * Description: turn on the buzzer
 */
funcReturn IR_PROXIMITY_read(IR_sensors sensor_num, uint8 *ret){
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	00 d0       	rcall	.+0      	; 0x244c <IR_PROXIMITY_read+0x6>
    244c:	00 d0       	rcall	.+0      	; 0x244e <IR_PROXIMITY_read+0x8>
    244e:	00 d0       	rcall	.+0      	; 0x2450 <IR_PROXIMITY_read+0xa>
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	7b 83       	std	Y+3, r23	; 0x03
    2458:	6a 83       	std	Y+2, r22	; 0x02

	switch(sensor_num){
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	3e 83       	std	Y+6, r19	; 0x06
    2462:	2d 83       	std	Y+5, r18	; 0x05
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	82 30       	cpi	r24, 0x02	; 2
    246a:	91 05       	cpc	r25, r1
    246c:	79 f1       	breq	.+94     	; 0x24cc <IR_PROXIMITY_read+0x86>
    246e:	2d 81       	ldd	r18, Y+5	; 0x05
    2470:	3e 81       	ldd	r19, Y+6	; 0x06
    2472:	23 30       	cpi	r18, 0x03	; 3
    2474:	31 05       	cpc	r19, r1
    2476:	54 f4       	brge	.+20     	; 0x248c <IR_PROXIMITY_read+0x46>
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	b1 f0       	breq	.+44     	; 0x24ac <IR_PROXIMITY_read+0x66>
    2480:	2d 81       	ldd	r18, Y+5	; 0x05
    2482:	3e 81       	ldd	r19, Y+6	; 0x06
    2484:	21 30       	cpi	r18, 0x01	; 1
    2486:	31 05       	cpc	r19, r1
    2488:	c9 f0       	breq	.+50     	; 0x24bc <IR_PROXIMITY_read+0x76>
    248a:	40 c0       	rjmp	.+128    	; 0x250c <IR_PROXIMITY_read+0xc6>
    248c:	8d 81       	ldd	r24, Y+5	; 0x05
    248e:	9e 81       	ldd	r25, Y+6	; 0x06
    2490:	84 30       	cpi	r24, 0x04	; 4
    2492:	91 05       	cpc	r25, r1
    2494:	59 f1       	breq	.+86     	; 0x24ec <IR_PROXIMITY_read+0xa6>
    2496:	2d 81       	ldd	r18, Y+5	; 0x05
    2498:	3e 81       	ldd	r19, Y+6	; 0x06
    249a:	24 30       	cpi	r18, 0x04	; 4
    249c:	31 05       	cpc	r19, r1
    249e:	f4 f0       	brlt	.+60     	; 0x24dc <IR_PROXIMITY_read+0x96>
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	9e 81       	ldd	r25, Y+6	; 0x06
    24a4:	85 30       	cpi	r24, 0x05	; 5
    24a6:	91 05       	cpc	r25, r1
    24a8:	49 f1       	breq	.+82     	; 0x24fc <IR_PROXIMITY_read+0xb6>
    24aa:	30 c0       	rjmp	.+96     	; 0x250c <IR_PROXIMITY_read+0xc6>

	case LEFT_IR:
		*ret=GPIO_readPin(IR_LEFT_PORT_ID, IR_LEFT_PIN_ID);
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	65 e0       	ldi	r22, 0x05	; 5
    24b0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GPIO_readPin>
    24b4:	ea 81       	ldd	r30, Y+2	; 0x02
    24b6:	fb 81       	ldd	r31, Y+3	; 0x03
    24b8:	80 83       	st	Z, r24
    24ba:	2a c0       	rjmp	.+84     	; 0x2510 <IR_PROXIMITY_read+0xca>
		break;

	case RIGHT_IR:
		*ret=GPIO_readPin(IR_RIGHT_PORT_ID, IR_RIGHT_PIN_ID);
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	64 e0       	ldi	r22, 0x04	; 4
    24c0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GPIO_readPin>
    24c4:	ea 81       	ldd	r30, Y+2	; 0x02
    24c6:	fb 81       	ldd	r31, Y+3	; 0x03
    24c8:	80 83       	st	Z, r24
    24ca:	22 c0       	rjmp	.+68     	; 0x2510 <IR_PROXIMITY_read+0xca>
		break;

	case FRONT_IR:
		*ret=GPIO_readPin(IR_FRONT_PORT_ID, IR_FRONT_PIN_ID);
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	66 e0       	ldi	r22, 0x06	; 6
    24d0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GPIO_readPin>
    24d4:	ea 81       	ldd	r30, Y+2	; 0x02
    24d6:	fb 81       	ldd	r31, Y+3	; 0x03
    24d8:	80 83       	st	Z, r24
    24da:	1a c0       	rjmp	.+52     	; 0x2510 <IR_PROXIMITY_read+0xca>
		break;

	case BACK_IR:
		*ret=GPIO_readPin(IR_BACK_PORT_ID, IR_BACK_PIN_ID);
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	67 e0       	ldi	r22, 0x07	; 7
    24e0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GPIO_readPin>
    24e4:	ea 81       	ldd	r30, Y+2	; 0x02
    24e6:	fb 81       	ldd	r31, Y+3	; 0x03
    24e8:	80 83       	st	Z, r24
    24ea:	12 c0       	rjmp	.+36     	; 0x2510 <IR_PROXIMITY_read+0xca>
		break;

	case GROUND_L_IR:
		*ret=GPIO_readPin(IR_GROUND_L_PORT_ID, IR_GROUND_L_PIN_ID);
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	62 e0       	ldi	r22, 0x02	; 2
    24f0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GPIO_readPin>
    24f4:	ea 81       	ldd	r30, Y+2	; 0x02
    24f6:	fb 81       	ldd	r31, Y+3	; 0x03
    24f8:	80 83       	st	Z, r24
    24fa:	0a c0       	rjmp	.+20     	; 0x2510 <IR_PROXIMITY_read+0xca>
		break;

	case GROUND_R_IR:
		*ret=GPIO_readPin(IR_GROUND_R_PORT_ID, IR_GROUND_R_PIN_ID);
    24fc:	83 e0       	ldi	r24, 0x03	; 3
    24fe:	63 e0       	ldi	r22, 0x03	; 3
    2500:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GPIO_readPin>
    2504:	ea 81       	ldd	r30, Y+2	; 0x02
    2506:	fb 81       	ldd	r31, Y+3	; 0x03
    2508:	80 83       	st	Z, r24
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <IR_PROXIMITY_read+0xca>
		break;

	default:
		return NOT_OK;
    250c:	1c 82       	std	Y+4, r1	; 0x04
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <IR_PROXIMITY_read+0xce>

	}

	return OK;
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	9c 83       	std	Y+4, r25	; 0x04
    2514:	8c 81       	ldd	r24, Y+4	; 0x04

}
    2516:	26 96       	adiw	r28, 0x06	; 6
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <SERVO_init>:
#include "std_types.h"
#include "common_macros.h"
#include "avr/io.h"


funcReturn SERVO_init(void){
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	00 d0       	rcall	.+0      	; 0x252e <SERVO_init+0x6>
    252e:	00 d0       	rcall	.+0      	; 0x2530 <SERVO_init+0x8>
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62

	funcReturn ret1,ret2,ret3;

	ret1=GPIO_setupPinDirection(SERVO_PORT_ID, SERVO_PIN_ID, PIN_OUTPUT);
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
    253e:	8b 83       	std	Y+3, r24	; 0x03
	ret2=GPIO_writePin(SERVO_PORT_ID, SERVO_PIN_ID, LOGIC_LOW);
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
    254a:	8a 83       	std	Y+2, r24	; 0x02

	ret3=SERVO_rotate(DEG_90);
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	0e 94 bf 12 	call	0x257e	; 0x257e <SERVO_rotate>
    2552:	89 83       	std	Y+1, r24	; 0x01
	if(ret1 || ret2 || ret3){
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	88 23       	and	r24, r24
    2558:	31 f4       	brne	.+12     	; 0x2566 <SERVO_init+0x3e>
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	88 23       	and	r24, r24
    255e:	19 f4       	brne	.+6      	; 0x2566 <SERVO_init+0x3e>
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	88 23       	and	r24, r24
    2564:	11 f0       	breq	.+4      	; 0x256a <SERVO_init+0x42>
		return NOT_OK;
    2566:	1c 82       	std	Y+4, r1	; 0x04
    2568:	02 c0       	rjmp	.+4      	; 0x256e <SERVO_init+0x46>
	}

	return OK;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	8c 83       	std	Y+4, r24	; 0x04
    256e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <SERVO_rotate>:


funcReturn  SERVO_rotate(SERVO_angles angle){
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	a0 97       	sbiw	r28, 0x20	; 32
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	8d 8f       	std	Y+29, r24	; 0x1d

	funcReturn ret1,ret2;
	uint16 rotation_delay_us=0;
    2594:	1a 8e       	std	Y+26, r1	; 0x1a
    2596:	19 8e       	std	Y+25, r1	; 0x19

	switch(angle){
    2598:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	38 a3       	std	Y+32, r19	; 0x20
    25a0:	2f 8f       	std	Y+31, r18	; 0x1f
    25a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25a4:	98 a1       	ldd	r25, Y+32	; 0x20
    25a6:	82 30       	cpi	r24, 0x02	; 2
    25a8:	91 05       	cpc	r25, r1
    25aa:	21 f1       	breq	.+72     	; 0x25f4 <SERVO_rotate+0x76>
    25ac:	2f 8d       	ldd	r18, Y+31	; 0x1f
    25ae:	38 a1       	ldd	r19, Y+32	; 0x20
    25b0:	23 30       	cpi	r18, 0x03	; 3
    25b2:	31 05       	cpc	r19, r1
    25b4:	54 f4       	brge	.+20     	; 0x25ca <SERVO_rotate+0x4c>
    25b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b8:	98 a1       	ldd	r25, Y+32	; 0x20
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	89 f0       	breq	.+34     	; 0x25e0 <SERVO_rotate+0x62>
    25be:	2f 8d       	ldd	r18, Y+31	; 0x1f
    25c0:	38 a1       	ldd	r19, Y+32	; 0x20
    25c2:	21 30       	cpi	r18, 0x01	; 1
    25c4:	31 05       	cpc	r19, r1
    25c6:	89 f0       	breq	.+34     	; 0x25ea <SERVO_rotate+0x6c>
    25c8:	24 c0       	rjmp	.+72     	; 0x2612 <SERVO_rotate+0x94>
    25ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25cc:	98 a1       	ldd	r25, Y+32	; 0x20
    25ce:	83 30       	cpi	r24, 0x03	; 3
    25d0:	91 05       	cpc	r25, r1
    25d2:	a9 f0       	breq	.+42     	; 0x25fe <SERVO_rotate+0x80>
    25d4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    25d6:	38 a1       	ldd	r19, Y+32	; 0x20
    25d8:	24 30       	cpi	r18, 0x04	; 4
    25da:	31 05       	cpc	r19, r1
    25dc:	a9 f0       	breq	.+42     	; 0x2608 <SERVO_rotate+0x8a>
    25de:	19 c0       	rjmp	.+50     	; 0x2612 <SERVO_rotate+0x94>

	case DEG_0:
		rotation_delay_us=500;
    25e0:	84 ef       	ldi	r24, 0xF4	; 244
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	9a 8f       	std	Y+26, r25	; 0x1a
    25e6:	89 8f       	std	Y+25, r24	; 0x19
    25e8:	16 c0       	rjmp	.+44     	; 0x2616 <SERVO_rotate+0x98>
		break;

	case DEG_45:
		rotation_delay_us=748;
    25ea:	8c ee       	ldi	r24, 0xEC	; 236
    25ec:	92 e0       	ldi	r25, 0x02	; 2
    25ee:	9a 8f       	std	Y+26, r25	; 0x1a
    25f0:	89 8f       	std	Y+25, r24	; 0x19
    25f2:	11 c0       	rjmp	.+34     	; 0x2616 <SERVO_rotate+0x98>
		break;

	case DEG_90:
		rotation_delay_us=1010;
    25f4:	82 ef       	ldi	r24, 0xF2	; 242
    25f6:	93 e0       	ldi	r25, 0x03	; 3
    25f8:	9a 8f       	std	Y+26, r25	; 0x1a
    25fa:	89 8f       	std	Y+25, r24	; 0x19
    25fc:	0c c0       	rjmp	.+24     	; 0x2616 <SERVO_rotate+0x98>
		break;

	case DEG_135:
		rotation_delay_us=1260;
    25fe:	8c ee       	ldi	r24, 0xEC	; 236
    2600:	94 e0       	ldi	r25, 0x04	; 4
    2602:	9a 8f       	std	Y+26, r25	; 0x1a
    2604:	89 8f       	std	Y+25, r24	; 0x19
    2606:	07 c0       	rjmp	.+14     	; 0x2616 <SERVO_rotate+0x98>
		break;

	case DEG_180:
		rotation_delay_us=1509;
    2608:	85 ee       	ldi	r24, 0xE5	; 229
    260a:	95 e0       	ldi	r25, 0x05	; 5
    260c:	9a 8f       	std	Y+26, r25	; 0x1a
    260e:	89 8f       	std	Y+25, r24	; 0x19
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <SERVO_rotate+0x98>
		break;

	default:
		return NOT_OK;
    2612:	1e 8e       	std	Y+30, r1	; 0x1e
    2614:	dc c0       	rjmp	.+440    	; 0x27ce <SERVO_rotate+0x250>

	}

	ret1=GPIO_writePin(SERVO_PORT_ID, SERVO_PIN_ID, LOGIC_HIGH);
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
    2620:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_us(rotation_delay_us-39);
    2622:	89 8d       	ldd	r24, Y+25	; 0x19
    2624:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2626:	87 97       	sbiw	r24, 0x27	; 39
    2628:	cc 01       	movw	r24, r24
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8d 8b       	std	Y+21, r24	; 0x15
    263c:	9e 8b       	std	Y+22, r25	; 0x16
    263e:	af 8b       	std	Y+23, r26	; 0x17
    2640:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2642:	6d 89       	ldd	r22, Y+21	; 0x15
    2644:	7e 89       	ldd	r23, Y+22	; 0x16
    2646:	8f 89       	ldd	r24, Y+23	; 0x17
    2648:	98 8d       	ldd	r25, Y+24	; 0x18
    264a:	2b ea       	ldi	r18, 0xAB	; 171
    264c:	3a ea       	ldi	r19, 0xAA	; 170
    264e:	4a ea       	ldi	r20, 0xAA	; 170
    2650:	50 e4       	ldi	r21, 0x40	; 64
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	89 8b       	std	Y+17, r24	; 0x11
    265c:	9a 8b       	std	Y+18, r25	; 0x12
    265e:	ab 8b       	std	Y+19, r26	; 0x13
    2660:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2662:	69 89       	ldd	r22, Y+17	; 0x11
    2664:	7a 89       	ldd	r23, Y+18	; 0x12
    2666:	8b 89       	ldd	r24, Y+19	; 0x13
    2668:	9c 89       	ldd	r25, Y+20	; 0x14
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e8       	ldi	r20, 0x80	; 128
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2676:	88 23       	and	r24, r24
    2678:	1c f4       	brge	.+6      	; 0x2680 <SERVO_rotate+0x102>
		__ticks = 1;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	88 8b       	std	Y+16, r24	; 0x10
    267e:	91 c0       	rjmp	.+290    	; 0x27a2 <SERVO_rotate+0x224>
	else if (__tmp > 255)
    2680:	69 89       	ldd	r22, Y+17	; 0x11
    2682:	7a 89       	ldd	r23, Y+18	; 0x12
    2684:	8b 89       	ldd	r24, Y+19	; 0x13
    2686:	9c 89       	ldd	r25, Y+20	; 0x14
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	4f e7       	ldi	r20, 0x7F	; 127
    268e:	53 e4       	ldi	r21, 0x43	; 67
    2690:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2694:	18 16       	cp	r1, r24
    2696:	0c f0       	brlt	.+2      	; 0x269a <SERVO_rotate+0x11c>
    2698:	7b c0       	rjmp	.+246    	; 0x2790 <SERVO_rotate+0x212>
	{
		_delay_ms(__us / 1000.0);
    269a:	6d 89       	ldd	r22, Y+21	; 0x15
    269c:	7e 89       	ldd	r23, Y+22	; 0x16
    269e:	8f 89       	ldd	r24, Y+23	; 0x17
    26a0:	98 8d       	ldd	r25, Y+24	; 0x18
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	4a e7       	ldi	r20, 0x7A	; 122
    26a8:	54 e4       	ldi	r21, 0x44	; 68
    26aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	8c 87       	std	Y+12, r24	; 0x0c
    26b4:	9d 87       	std	Y+13, r25	; 0x0d
    26b6:	ae 87       	std	Y+14, r26	; 0x0e
    26b8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    26bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    26be:	8e 85       	ldd	r24, Y+14	; 0x0e
    26c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	4a e7       	ldi	r20, 0x7A	; 122
    26c8:	55 e4       	ldi	r21, 0x45	; 69
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	88 87       	std	Y+8, r24	; 0x08
    26d4:	99 87       	std	Y+9, r25	; 0x09
    26d6:	aa 87       	std	Y+10, r26	; 0x0a
    26d8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    26da:	68 85       	ldd	r22, Y+8	; 0x08
    26dc:	79 85       	ldd	r23, Y+9	; 0x09
    26de:	8a 85       	ldd	r24, Y+10	; 0x0a
    26e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e8       	ldi	r20, 0x80	; 128
    26e8:	5f e3       	ldi	r21, 0x3F	; 63
    26ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ee:	88 23       	and	r24, r24
    26f0:	2c f4       	brge	.+10     	; 0x26fc <SERVO_rotate+0x17e>
		__ticks = 1;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	9f 83       	std	Y+7, r25	; 0x07
    26f8:	8e 83       	std	Y+6, r24	; 0x06
    26fa:	3f c0       	rjmp	.+126    	; 0x277a <SERVO_rotate+0x1fc>
	else if (__tmp > 65535)
    26fc:	68 85       	ldd	r22, Y+8	; 0x08
    26fe:	79 85       	ldd	r23, Y+9	; 0x09
    2700:	8a 85       	ldd	r24, Y+10	; 0x0a
    2702:	9b 85       	ldd	r25, Y+11	; 0x0b
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	3f ef       	ldi	r19, 0xFF	; 255
    2708:	4f e7       	ldi	r20, 0x7F	; 127
    270a:	57 e4       	ldi	r21, 0x47	; 71
    270c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2710:	18 16       	cp	r1, r24
    2712:	4c f5       	brge	.+82     	; 0x2766 <SERVO_rotate+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2714:	6c 85       	ldd	r22, Y+12	; 0x0c
    2716:	7d 85       	ldd	r23, Y+13	; 0x0d
    2718:	8e 85       	ldd	r24, Y+14	; 0x0e
    271a:	9f 85       	ldd	r25, Y+15	; 0x0f
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e2       	ldi	r20, 0x20	; 32
    2722:	51 e4       	ldi	r21, 0x41	; 65
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	bc 01       	movw	r22, r24
    272e:	cd 01       	movw	r24, r26
    2730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	9f 83       	std	Y+7, r25	; 0x07
    273a:	8e 83       	std	Y+6, r24	; 0x06
    273c:	0f c0       	rjmp	.+30     	; 0x275c <SERVO_rotate+0x1de>
    273e:	80 e9       	ldi	r24, 0x90	; 144
    2740:	91 e0       	ldi	r25, 0x01	; 1
    2742:	9d 83       	std	Y+5, r25	; 0x05
    2744:	8c 83       	std	Y+4, r24	; 0x04
    2746:	8c 81       	ldd	r24, Y+4	; 0x04
    2748:	9d 81       	ldd	r25, Y+5	; 0x05
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <SERVO_rotate+0x1cc>
    274e:	9d 83       	std	Y+5, r25	; 0x05
    2750:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2752:	8e 81       	ldd	r24, Y+6	; 0x06
    2754:	9f 81       	ldd	r25, Y+7	; 0x07
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	9f 83       	std	Y+7, r25	; 0x07
    275a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275c:	8e 81       	ldd	r24, Y+6	; 0x06
    275e:	9f 81       	ldd	r25, Y+7	; 0x07
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	69 f7       	brne	.-38     	; 0x273e <SERVO_rotate+0x1c0>
    2764:	24 c0       	rjmp	.+72     	; 0x27ae <SERVO_rotate+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2766:	68 85       	ldd	r22, Y+8	; 0x08
    2768:	79 85       	ldd	r23, Y+9	; 0x09
    276a:	8a 85       	ldd	r24, Y+10	; 0x0a
    276c:	9b 85       	ldd	r25, Y+11	; 0x0b
    276e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	9f 83       	std	Y+7, r25	; 0x07
    2778:	8e 83       	std	Y+6, r24	; 0x06
    277a:	8e 81       	ldd	r24, Y+6	; 0x06
    277c:	9f 81       	ldd	r25, Y+7	; 0x07
    277e:	9b 83       	std	Y+3, r25	; 0x03
    2780:	8a 83       	std	Y+2, r24	; 0x02
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	9b 81       	ldd	r25, Y+3	; 0x03
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <SERVO_rotate+0x208>
    278a:	9b 83       	std	Y+3, r25	; 0x03
    278c:	8a 83       	std	Y+2, r24	; 0x02
    278e:	0f c0       	rjmp	.+30     	; 0x27ae <SERVO_rotate+0x230>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2790:	69 89       	ldd	r22, Y+17	; 0x11
    2792:	7a 89       	ldd	r23, Y+18	; 0x12
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	88 8b       	std	Y+16, r24	; 0x10
    27a2:	88 89       	ldd	r24, Y+16	; 0x10
    27a4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	8a 95       	dec	r24
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <SERVO_rotate+0x22a>
    27ac:	89 83       	std	Y+1, r24	; 0x01
	ret2=GPIO_writePin(SERVO_PORT_ID, SERVO_PIN_ID, LOGIC_LOW);
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
    27b8:	8b 8f       	std	Y+27, r24	; 0x1b

	if(ret1 || ret2){
    27ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27bc:	88 23       	and	r24, r24
    27be:	19 f4       	brne	.+6      	; 0x27c6 <SERVO_rotate+0x248>
    27c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c2:	88 23       	and	r24, r24
    27c4:	11 f0       	breq	.+4      	; 0x27ca <SERVO_rotate+0x24c>
		return NOT_OK;
    27c6:	1e 8e       	std	Y+30, r1	; 0x1e
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <SERVO_rotate+0x250>
	}
	return OK;
    27ca:	31 e0       	ldi	r19, 0x01	; 1
    27cc:	3e 8f       	std	Y+30, r19	; 0x1e
    27ce:	8e 8d       	ldd	r24, Y+30	; 0x1e

	return OK;
}
    27d0:	a0 96       	adiw	r28, 0x20	; 32
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <Ultrasonic_init>:


uint8 g_edgeCount = 0;


funcReturn Ultrasonic_init(void){
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <Ultrasonic_init+0x6>
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <Ultrasonic_init+0x8>
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62

	funcReturn ret1;

	ICU_ConfigType Ultrasonic_ICU_Config = {ICU_RISING_EDGE,F_CPU_8};
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	8a 83       	std	Y+2, r24	; 0x02
    27f2:	82 e0       	ldi	r24, 0x02	; 2
    27f4:	8b 83       	std	Y+3, r24	; 0x03

	ICU_init(&Ultrasonic_ICU_Config);
    27f6:	ce 01       	movw	r24, r28
    27f8:	02 96       	adiw	r24, 0x02	; 2
    27fa:	0e 94 57 0d 	call	0x1aae	; 0x1aae <ICU_init>

	ICU_setCallBack(Ultrasonic_edgeProcessing);
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	95 e1       	ldi	r25, 0x15	; 21
    2802:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <ICU_setCallBack>

	ret1=GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, PIN_OUTPUT);
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	64 e0       	ldi	r22, 0x04	; 4
    280a:	41 e0       	ldi	r20, 0x01	; 1
    280c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GPIO_setupPinDirection>
    2810:	89 83       	std	Y+1, r24	; 0x01

	if(ret1 == 0){
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	88 23       	and	r24, r24
    2816:	11 f4       	brne	.+4      	; 0x281c <Ultrasonic_init+0x3a>
		return NOT_OK;
    2818:	1c 82       	std	Y+4, r1	; 0x04
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <Ultrasonic_init+0x3e>
	}

	return OK;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	8c 83       	std	Y+4, r24	; 0x04
    2820:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <Ultrasonic_Trigger>:


funcReturn Ultrasonic_Trigger(void){
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	6b 97       	sbiw	r28, 0x1b	; 27
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61

	funcReturn ret1,ret2;

	ret1=GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_HIGH);
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	64 e0       	ldi	r22, 0x04	; 4
    2848:	41 e0       	ldi	r20, 0x01	; 1
    284a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
    284e:	8a 8f       	std	Y+26, r24	; 0x1a
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	a0 e7       	ldi	r26, 0x70	; 112
    2856:	b1 e4       	ldi	r27, 0x41	; 65
    2858:	8d 8b       	std	Y+21, r24	; 0x15
    285a:	9e 8b       	std	Y+22, r25	; 0x16
    285c:	af 8b       	std	Y+23, r26	; 0x17
    285e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2860:	6d 89       	ldd	r22, Y+21	; 0x15
    2862:	7e 89       	ldd	r23, Y+22	; 0x16
    2864:	8f 89       	ldd	r24, Y+23	; 0x17
    2866:	98 8d       	ldd	r25, Y+24	; 0x18
    2868:	2b ea       	ldi	r18, 0xAB	; 171
    286a:	3a ea       	ldi	r19, 0xAA	; 170
    286c:	4a ea       	ldi	r20, 0xAA	; 170
    286e:	50 e4       	ldi	r21, 0x40	; 64
    2870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	89 8b       	std	Y+17, r24	; 0x11
    287a:	9a 8b       	std	Y+18, r25	; 0x12
    287c:	ab 8b       	std	Y+19, r26	; 0x13
    287e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2880:	69 89       	ldd	r22, Y+17	; 0x11
    2882:	7a 89       	ldd	r23, Y+18	; 0x12
    2884:	8b 89       	ldd	r24, Y+19	; 0x13
    2886:	9c 89       	ldd	r25, Y+20	; 0x14
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e8       	ldi	r20, 0x80	; 128
    288e:	5f e3       	ldi	r21, 0x3F	; 63
    2890:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2894:	88 23       	and	r24, r24
    2896:	1c f4       	brge	.+6      	; 0x289e <Ultrasonic_Trigger+0x6e>
		__ticks = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	88 8b       	std	Y+16, r24	; 0x10
    289c:	91 c0       	rjmp	.+290    	; 0x29c0 <Ultrasonic_Trigger+0x190>
	else if (__tmp > 255)
    289e:	69 89       	ldd	r22, Y+17	; 0x11
    28a0:	7a 89       	ldd	r23, Y+18	; 0x12
    28a2:	8b 89       	ldd	r24, Y+19	; 0x13
    28a4:	9c 89       	ldd	r25, Y+20	; 0x14
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	53 e4       	ldi	r21, 0x43	; 67
    28ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	0c f0       	brlt	.+2      	; 0x28b8 <Ultrasonic_Trigger+0x88>
    28b6:	7b c0       	rjmp	.+246    	; 0x29ae <Ultrasonic_Trigger+0x17e>
	{
		_delay_ms(__us / 1000.0);
    28b8:	6d 89       	ldd	r22, Y+21	; 0x15
    28ba:	7e 89       	ldd	r23, Y+22	; 0x16
    28bc:	8f 89       	ldd	r24, Y+23	; 0x17
    28be:	98 8d       	ldd	r25, Y+24	; 0x18
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	4a e7       	ldi	r20, 0x7A	; 122
    28c6:	54 e4       	ldi	r21, 0x44	; 68
    28c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	8c 87       	std	Y+12, r24	; 0x0c
    28d2:	9d 87       	std	Y+13, r25	; 0x0d
    28d4:	ae 87       	std	Y+14, r26	; 0x0e
    28d6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    28da:	7d 85       	ldd	r23, Y+13	; 0x0d
    28dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    28de:	9f 85       	ldd	r25, Y+15	; 0x0f
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4a e7       	ldi	r20, 0x7A	; 122
    28e6:	55 e4       	ldi	r21, 0x45	; 69
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	88 87       	std	Y+8, r24	; 0x08
    28f2:	99 87       	std	Y+9, r25	; 0x09
    28f4:	aa 87       	std	Y+10, r26	; 0x0a
    28f6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28f8:	68 85       	ldd	r22, Y+8	; 0x08
    28fa:	79 85       	ldd	r23, Y+9	; 0x09
    28fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e8       	ldi	r20, 0x80	; 128
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290c:	88 23       	and	r24, r24
    290e:	2c f4       	brge	.+10     	; 0x291a <Ultrasonic_Trigger+0xea>
		__ticks = 1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9f 83       	std	Y+7, r25	; 0x07
    2916:	8e 83       	std	Y+6, r24	; 0x06
    2918:	3f c0       	rjmp	.+126    	; 0x2998 <Ultrasonic_Trigger+0x168>
	else if (__tmp > 65535)
    291a:	68 85       	ldd	r22, Y+8	; 0x08
    291c:	79 85       	ldd	r23, Y+9	; 0x09
    291e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2920:	9b 85       	ldd	r25, Y+11	; 0x0b
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	4f e7       	ldi	r20, 0x7F	; 127
    2928:	57 e4       	ldi	r21, 0x47	; 71
    292a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292e:	18 16       	cp	r1, r24
    2930:	4c f5       	brge	.+82     	; 0x2984 <Ultrasonic_Trigger+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2932:	6c 85       	ldd	r22, Y+12	; 0x0c
    2934:	7d 85       	ldd	r23, Y+13	; 0x0d
    2936:	8e 85       	ldd	r24, Y+14	; 0x0e
    2938:	9f 85       	ldd	r25, Y+15	; 0x0f
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	51 e4       	ldi	r21, 0x41	; 65
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9f 83       	std	Y+7, r25	; 0x07
    2958:	8e 83       	std	Y+6, r24	; 0x06
    295a:	0f c0       	rjmp	.+30     	; 0x297a <Ultrasonic_Trigger+0x14a>
    295c:	80 e9       	ldi	r24, 0x90	; 144
    295e:	91 e0       	ldi	r25, 0x01	; 1
    2960:	9d 83       	std	Y+5, r25	; 0x05
    2962:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2964:	8c 81       	ldd	r24, Y+4	; 0x04
    2966:	9d 81       	ldd	r25, Y+5	; 0x05
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <Ultrasonic_Trigger+0x138>
    296c:	9d 83       	std	Y+5, r25	; 0x05
    296e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2970:	8e 81       	ldd	r24, Y+6	; 0x06
    2972:	9f 81       	ldd	r25, Y+7	; 0x07
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	9f 83       	std	Y+7, r25	; 0x07
    2978:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297a:	8e 81       	ldd	r24, Y+6	; 0x06
    297c:	9f 81       	ldd	r25, Y+7	; 0x07
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	69 f7       	brne	.-38     	; 0x295c <Ultrasonic_Trigger+0x12c>
    2982:	24 c0       	rjmp	.+72     	; 0x29cc <Ultrasonic_Trigger+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2984:	68 85       	ldd	r22, Y+8	; 0x08
    2986:	79 85       	ldd	r23, Y+9	; 0x09
    2988:	8a 85       	ldd	r24, Y+10	; 0x0a
    298a:	9b 85       	ldd	r25, Y+11	; 0x0b
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	9f 83       	std	Y+7, r25	; 0x07
    2996:	8e 83       	std	Y+6, r24	; 0x06
    2998:	8e 81       	ldd	r24, Y+6	; 0x06
    299a:	9f 81       	ldd	r25, Y+7	; 0x07
    299c:	9b 83       	std	Y+3, r25	; 0x03
    299e:	8a 83       	std	Y+2, r24	; 0x02
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	9b 81       	ldd	r25, Y+3	; 0x03
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <Ultrasonic_Trigger+0x174>
    29a8:	9b 83       	std	Y+3, r25	; 0x03
    29aa:	8a 83       	std	Y+2, r24	; 0x02
    29ac:	0f c0       	rjmp	.+30     	; 0x29cc <Ultrasonic_Trigger+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ae:	69 89       	ldd	r22, Y+17	; 0x11
    29b0:	7a 89       	ldd	r23, Y+18	; 0x12
    29b2:	8b 89       	ldd	r24, Y+19	; 0x13
    29b4:	9c 89       	ldd	r25, Y+20	; 0x14
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	88 8b       	std	Y+16, r24	; 0x10
    29c0:	88 89       	ldd	r24, Y+16	; 0x10
    29c2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	8a 95       	dec	r24
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <Ultrasonic_Trigger+0x196>
    29ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15);
	ret2=GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_LOW);
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	64 e0       	ldi	r22, 0x04	; 4
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_writePin>
    29d6:	89 8f       	std	Y+25, r24	; 0x19

	if(ret1 || ret2){
    29d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29da:	88 23       	and	r24, r24
    29dc:	19 f4       	brne	.+6      	; 0x29e4 <Ultrasonic_Trigger+0x1b4>
    29de:	89 8d       	ldd	r24, Y+25	; 0x19
    29e0:	88 23       	and	r24, r24
    29e2:	11 f0       	breq	.+4      	; 0x29e8 <Ultrasonic_Trigger+0x1b8>
		return NOT_OK;
    29e4:	1b 8e       	std	Y+27, r1	; 0x1b
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <Ultrasonic_Trigger+0x1bc>
	}

	return OK;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	8b 8f       	std	Y+27, r24	; 0x1b
    29ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
}
    29ee:	6b 96       	adiw	r28, 0x1b	; 27
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void){
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62


	if(ICU_ISR_lastEdge){				//last edge was rising edge and now we're at a falling edge
    2a08:	80 91 3f 02 	lds	r24, 0x023F
    2a0c:	88 23       	and	r24, r24
    2a0e:	61 f0       	breq	.+24     	; 0x2a28 <Ultrasonic_edgeProcessing+0x28>
		//Calculate captured pulse period
		ICU_CapturedValue=ICU_getInputCaptureValue();
    2a10:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <ICU_getInputCaptureValue>
    2a14:	90 93 3e 02 	sts	0x023E, r25
    2a18:	80 93 3d 02 	sts	0x023D, r24

		//Next time detect rising edge:

		//1) detect rising edge
		ICU_setEdgeDetectionType(ICU_RISING_EDGE);
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <ICU_setEdgeDetectionType>
		//2) next time (when ISR occurs) enter the "else condition"
		ICU_ISR_lastEdge=ICU_FALLING_EDGE;
    2a22:	10 92 3f 02 	sts	0x023F, r1
    2a26:	08 c0       	rjmp	.+16     	; 0x2a38 <Ultrasonic_edgeProcessing+0x38>

	}else{								//last edge was falling edge and now we're at a rising edge
		//Reset the current time
		ICU_clearTimer();
    2a28:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <ICU_clearTimer>

		//Next time detect falling edge:

		//1) detect falling edge
		ICU_setEdgeDetectionType(ICU_FALLING_EDGE);
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <ICU_setEdgeDetectionType>
		//2) next time (when ISR occurs) enter the "if condition"
		ICU_ISR_lastEdge=ICU_RISING_EDGE;
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	80 93 3f 02 	sts	0x023F, r24

	}



}
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <Ultrasonic_readDistance>:



funcReturn Ultrasonic_readDistance(uint16 *ret){
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <Ultrasonic_readDistance+0x6>
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <Ultrasonic_readDistance+0x8>
    2a46:	0f 92       	push	r0
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
    2a4c:	9c 83       	std	Y+4, r25	; 0x04
    2a4e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Ultrasonic_distance=0;
    2a50:	1a 82       	std	Y+2, r1	; 0x02
    2a52:	19 82       	std	Y+1, r1	; 0x01
	Ultrasonic_Trigger();
    2a54:	0e 94 18 14 	call	0x2830	; 0x2830 <Ultrasonic_Trigger>
	/* Ftimer = Fcpu/prescale= 16MHz / 8 = 2 MHz
	 * Ttimer = 1 / Ftimer = 1 Microsecond = 5 * 10^-7 second
	 */

//	Ultrasonic_distance = Ultrasonic_distance / 1000000;
	Ultrasonic_distance = ICU_CapturedValue / (58.5*2);
    2a58:	80 91 3d 02 	lds	r24, 0x023D
    2a5c:	90 91 3e 02 	lds	r25, 0x023E
    2a60:	cc 01       	movw	r24, r24
    2a62:	a0 e0       	ldi	r26, 0x00	; 0
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	4a ee       	ldi	r20, 0xEA	; 234
    2a7c:	52 e4       	ldi	r21, 0x42	; 66
    2a7e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01

	*ret=Ultrasonic_distance+1;
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9a:	01 96       	adiw	r24, 0x01	; 1
    2a9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24

	if(Ultrasonic_distance==0){
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <Ultrasonic_readDistance+0x72>
		return NOT_OK;
    2aac:	1d 82       	std	Y+5, r1	; 0x05
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <Ultrasonic_readDistance+0x76>
	}
	return OK;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	8d 83       	std	Y+5, r24	; 0x05
    2ab4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <main>:
funcReturn check_surroudings(void);




int main(){
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	c5 54       	subi	r28, 0x45	; 69
    2ad0:	d0 40       	sbci	r29, 0x00	; 0
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1<<7);
    2adc:	af e5       	ldi	r26, 0x5F	; 95
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	ef e5       	ldi	r30, 0x5F	; 95
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	80 68       	ori	r24, 0x80	; 128
    2ae8:	8c 93       	st	X, r24


	UART_ConfigType UART_GPS = {UART_8_Bits, UART_PARITY_DISABLED, UART_STOPBIT_1_BIT, 9600, UART_ASYNCHRONOUS};
    2aea:	ce 01       	movw	r24, r28
    2aec:	c9 96       	adiw	r24, 0x39	; 57
    2aee:	23 96       	adiw	r28, 0x03	; 3
    2af0:	9f af       	std	Y+63, r25	; 0x3f
    2af2:	8e af       	std	Y+62, r24	; 0x3e
    2af4:	23 97       	sbiw	r28, 0x03	; 3
    2af6:	e2 e3       	ldi	r30, 0x32	; 50
    2af8:	f2 e0       	ldi	r31, 0x02	; 2
    2afa:	25 96       	adiw	r28, 0x05	; 5
    2afc:	ff af       	std	Y+63, r31	; 0x3f
    2afe:	ee af       	std	Y+62, r30	; 0x3e
    2b00:	25 97       	sbiw	r28, 0x05	; 5
    2b02:	f8 e0       	ldi	r31, 0x08	; 8
    2b04:	26 96       	adiw	r28, 0x06	; 6
    2b06:	ff af       	std	Y+63, r31	; 0x3f
    2b08:	26 97       	sbiw	r28, 0x06	; 6
    2b0a:	25 96       	adiw	r28, 0x05	; 5
    2b0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b10:	25 97       	sbiw	r28, 0x05	; 5
    2b12:	00 80       	ld	r0, Z
    2b14:	25 96       	adiw	r28, 0x05	; 5
    2b16:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b18:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b1a:	25 97       	sbiw	r28, 0x05	; 5
    2b1c:	01 96       	adiw	r24, 0x01	; 1
    2b1e:	25 96       	adiw	r28, 0x05	; 5
    2b20:	9f af       	std	Y+63, r25	; 0x3f
    2b22:	8e af       	std	Y+62, r24	; 0x3e
    2b24:	25 97       	sbiw	r28, 0x05	; 5
    2b26:	23 96       	adiw	r28, 0x03	; 3
    2b28:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b2a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b2c:	23 97       	sbiw	r28, 0x03	; 3
    2b2e:	00 82       	st	Z, r0
    2b30:	23 96       	adiw	r28, 0x03	; 3
    2b32:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b34:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b36:	23 97       	sbiw	r28, 0x03	; 3
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	23 96       	adiw	r28, 0x03	; 3
    2b3c:	9f af       	std	Y+63, r25	; 0x3f
    2b3e:	8e af       	std	Y+62, r24	; 0x3e
    2b40:	23 97       	sbiw	r28, 0x03	; 3
    2b42:	26 96       	adiw	r28, 0x06	; 6
    2b44:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b46:	26 97       	sbiw	r28, 0x06	; 6
    2b48:	91 50       	subi	r25, 0x01	; 1
    2b4a:	26 96       	adiw	r28, 0x06	; 6
    2b4c:	9f af       	std	Y+63, r25	; 0x3f
    2b4e:	26 97       	sbiw	r28, 0x06	; 6
    2b50:	26 96       	adiw	r28, 0x06	; 6
    2b52:	ef ad       	ldd	r30, Y+63	; 0x3f
    2b54:	26 97       	sbiw	r28, 0x06	; 6
    2b56:	ee 23       	and	r30, r30
    2b58:	c1 f6       	brne	.-80     	; 0x2b0a <main+0x44>
	UART_init(&UART_GPS);
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	c9 96       	adiw	r24, 0x39	; 57
    2b5e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <UART_init>

	i2c_init();
    2b62:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <i2c_init>
	i2c_start();
    2b66:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <i2c_start>
	i2c_write(LCD_1);
    2b6a:	82 e7       	ldi	r24, 0x72	; 114
    2b6c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <i2c_write>
	lcd_init();
    2b70:	0e 94 9a 08 	call	0x1134	; 0x1134 <lcd_init>


	i2c_init();
    2b74:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <i2c_init>
	i2c_start();
    2b78:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <i2c_start>
	i2c_write(LCD_1);
    2b7c:	82 e7       	ldi	r24, 0x72	; 114
    2b7e:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <i2c_write>
	lcd_init();
    2b82:	0e 94 9a 08 	call	0x1134	; 0x1134 <lcd_init>
	lcd_clear();
    2b86:	0e 94 2a 09 	call	0x1254	; 0x1254 <lcd_clear>


	lcd_moveCursor(0, 0);
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	70 e0       	ldi	r23, 0x00	; 0
    2b92:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>

	SERVO_init();
    2b96:	0e 94 94 12 	call	0x2528	; 0x2528 <SERVO_init>

	DCMotor_Init();
    2b9a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DCMotor_Init>

	IR_PROXIMITY_init(LEFT_IR);
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	0e 94 c3 11 	call	0x2386	; 0x2386 <IR_PROXIMITY_init>
	IR_PROXIMITY_init(RIGHT_IR);
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	0e 94 c3 11 	call	0x2386	; 0x2386 <IR_PROXIMITY_init>
	IR_PROXIMITY_init(FRONT_IR);
    2baa:	82 e0       	ldi	r24, 0x02	; 2
    2bac:	0e 94 c3 11 	call	0x2386	; 0x2386 <IR_PROXIMITY_init>
	IR_PROXIMITY_init(BACK_IR);
    2bb0:	83 e0       	ldi	r24, 0x03	; 3
    2bb2:	0e 94 c3 11 	call	0x2386	; 0x2386 <IR_PROXIMITY_init>
	IR_PROXIMITY_init(GROUND_L_IR);
    2bb6:	84 e0       	ldi	r24, 0x04	; 4
    2bb8:	0e 94 c3 11 	call	0x2386	; 0x2386 <IR_PROXIMITY_init>
	IR_PROXIMITY_init(GROUND_R_IR);
    2bbc:	85 e0       	ldi	r24, 0x05	; 5
    2bbe:	0e 94 c3 11 	call	0x2386	; 0x2386 <IR_PROXIMITY_init>

	Ultrasonic_init();
    2bc2:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <Ultrasonic_init>

	lcd_send_string("waiting for the");
    2bc6:	80 e6       	ldi	r24, 0x60	; 96
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
	lcd_moveCursor(1, 0);
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
	lcd_send_string("start");
    2bda:	80 e7       	ldi	r24, 0x70	; 112
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	aa e7       	ldi	r26, 0x7A	; 122
    2be8:	b4 e4       	ldi	r27, 0x44	; 68
    2bea:	8d ab       	std	Y+53, r24	; 0x35
    2bec:	9e ab       	std	Y+54, r25	; 0x36
    2bee:	af ab       	std	Y+55, r26	; 0x37
    2bf0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf2:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf4:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf6:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	4a e7       	ldi	r20, 0x7A	; 122
    2c00:	55 e4       	ldi	r21, 0x45	; 69
    2c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	89 ab       	std	Y+49, r24	; 0x31
    2c0c:	9a ab       	std	Y+50, r25	; 0x32
    2c0e:	ab ab       	std	Y+51, r26	; 0x33
    2c10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c12:	69 a9       	ldd	r22, Y+49	; 0x31
    2c14:	7a a9       	ldd	r23, Y+50	; 0x32
    2c16:	8b a9       	ldd	r24, Y+51	; 0x33
    2c18:	9c a9       	ldd	r25, Y+52	; 0x34
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e8       	ldi	r20, 0x80	; 128
    2c20:	5f e3       	ldi	r21, 0x3F	; 63
    2c22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c26:	88 23       	and	r24, r24
    2c28:	2c f4       	brge	.+10     	; 0x2c34 <main+0x16e>
		__ticks = 1;
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	98 ab       	std	Y+48, r25	; 0x30
    2c30:	8f a7       	std	Y+47, r24	; 0x2f
    2c32:	3f c0       	rjmp	.+126    	; 0x2cb2 <main+0x1ec>
	else if (__tmp > 65535)
    2c34:	69 a9       	ldd	r22, Y+49	; 0x31
    2c36:	7a a9       	ldd	r23, Y+50	; 0x32
    2c38:	8b a9       	ldd	r24, Y+51	; 0x33
    2c3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	3f ef       	ldi	r19, 0xFF	; 255
    2c40:	4f e7       	ldi	r20, 0x7F	; 127
    2c42:	57 e4       	ldi	r21, 0x47	; 71
    2c44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c48:	18 16       	cp	r1, r24
    2c4a:	4c f5       	brge	.+82     	; 0x2c9e <main+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c4e:	7e a9       	ldd	r23, Y+54	; 0x36
    2c50:	8f a9       	ldd	r24, Y+55	; 0x37
    2c52:	98 ad       	ldd	r25, Y+56	; 0x38
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e2       	ldi	r20, 0x20	; 32
    2c5a:	51 e4       	ldi	r21, 0x41	; 65
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	bc 01       	movw	r22, r24
    2c66:	cd 01       	movw	r24, r26
    2c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	98 ab       	std	Y+48, r25	; 0x30
    2c72:	8f a7       	std	Y+47, r24	; 0x2f
    2c74:	0f c0       	rjmp	.+30     	; 0x2c94 <main+0x1ce>
    2c76:	80 e9       	ldi	r24, 0x90	; 144
    2c78:	91 e0       	ldi	r25, 0x01	; 1
    2c7a:	9e a7       	std	Y+46, r25	; 0x2e
    2c7c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c80:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <main+0x1bc>
    2c86:	9e a7       	std	Y+46, r25	; 0x2e
    2c88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	98 ab       	std	Y+48, r25	; 0x30
    2c92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c96:	98 a9       	ldd	r25, Y+48	; 0x30
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	69 f7       	brne	.-38     	; 0x2c76 <main+0x1b0>
    2c9c:	14 c0       	rjmp	.+40     	; 0x2cc6 <main+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ca2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ca4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	98 ab       	std	Y+48, r25	; 0x30
    2cb0:	8f a7       	std	Y+47, r24	; 0x2f
    2cb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb6:	9c a7       	std	Y+44, r25	; 0x2c
    2cb8:	8b a7       	std	Y+43, r24	; 0x2b
    2cba:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <main+0x1f8>
    2cc2:	9c a7       	std	Y+44, r25	; 0x2c
    2cc4:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1000);


	beginMovement=UART_recieveByte();
    2cc6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <UART_recieveByte>
    2cca:	80 93 5a 02 	sts	0x025A, r24

	lcd_clear();
    2cce:	0e 94 2a 09 	call	0x1254	; 0x1254 <lcd_clear>
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	aa ef       	ldi	r26, 0xFA	; 250
    2cd8:	b3 e4       	ldi	r27, 0x43	; 67
    2cda:	8f a3       	std	Y+39, r24	; 0x27
    2cdc:	98 a7       	std	Y+40, r25	; 0x28
    2cde:	a9 a7       	std	Y+41, r26	; 0x29
    2ce0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ce4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ce6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ce8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	4a e7       	ldi	r20, 0x7A	; 122
    2cf0:	55 e4       	ldi	r21, 0x45	; 69
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	8b a3       	std	Y+35, r24	; 0x23
    2cfc:	9c a3       	std	Y+36, r25	; 0x24
    2cfe:	ad a3       	std	Y+37, r26	; 0x25
    2d00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d02:	6b a1       	ldd	r22, Y+35	; 0x23
    2d04:	7c a1       	ldd	r23, Y+36	; 0x24
    2d06:	8d a1       	ldd	r24, Y+37	; 0x25
    2d08:	9e a1       	ldd	r25, Y+38	; 0x26
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e8       	ldi	r20, 0x80	; 128
    2d10:	5f e3       	ldi	r21, 0x3F	; 63
    2d12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d16:	88 23       	and	r24, r24
    2d18:	2c f4       	brge	.+10     	; 0x2d24 <main+0x25e>
		__ticks = 1;
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	9a a3       	std	Y+34, r25	; 0x22
    2d20:	89 a3       	std	Y+33, r24	; 0x21
    2d22:	3f c0       	rjmp	.+126    	; 0x2da2 <main+0x2dc>
	else if (__tmp > 65535)
    2d24:	6b a1       	ldd	r22, Y+35	; 0x23
    2d26:	7c a1       	ldd	r23, Y+36	; 0x24
    2d28:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	3f ef       	ldi	r19, 0xFF	; 255
    2d30:	4f e7       	ldi	r20, 0x7F	; 127
    2d32:	57 e4       	ldi	r21, 0x47	; 71
    2d34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d38:	18 16       	cp	r1, r24
    2d3a:	4c f5       	brge	.+82     	; 0x2d8e <main+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d3e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d40:	89 a5       	ldd	r24, Y+41	; 0x29
    2d42:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e2       	ldi	r20, 0x20	; 32
    2d4a:	51 e4       	ldi	r21, 0x41	; 65
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9a a3       	std	Y+34, r25	; 0x22
    2d62:	89 a3       	std	Y+33, r24	; 0x21
    2d64:	0f c0       	rjmp	.+30     	; 0x2d84 <main+0x2be>
    2d66:	80 e9       	ldi	r24, 0x90	; 144
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	98 a3       	std	Y+32, r25	; 0x20
    2d6c:	8f 8f       	std	Y+31, r24	; 0x1f
    2d6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d70:	98 a1       	ldd	r25, Y+32	; 0x20
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <main+0x2ac>
    2d76:	98 a3       	std	Y+32, r25	; 0x20
    2d78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	9a a3       	std	Y+34, r25	; 0x22
    2d82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d84:	89 a1       	ldd	r24, Y+33	; 0x21
    2d86:	9a a1       	ldd	r25, Y+34	; 0x22
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	69 f7       	brne	.-38     	; 0x2d66 <main+0x2a0>
    2d8c:	14 c0       	rjmp	.+40     	; 0x2db6 <main+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d90:	7c a1       	ldd	r23, Y+36	; 0x24
    2d92:	8d a1       	ldd	r24, Y+37	; 0x25
    2d94:	9e a1       	ldd	r25, Y+38	; 0x26
    2d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	9a a3       	std	Y+34, r25	; 0x22
    2da0:	89 a3       	std	Y+33, r24	; 0x21
    2da2:	89 a1       	ldd	r24, Y+33	; 0x21
    2da4:	9a a1       	ldd	r25, Y+34	; 0x22
    2da6:	9e 8f       	std	Y+30, r25	; 0x1e
    2da8:	8d 8f       	std	Y+29, r24	; 0x1d
    2daa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <main+0x2e8>
    2db2:	9e 8f       	std	Y+30, r25	; 0x1e
    2db4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	for(;;){
		if(beginMovement == 1){
    2db6:	80 91 5a 02 	lds	r24, 0x025A
    2dba:	81 30       	cpi	r24, 0x01	; 1
    2dbc:	e1 f7       	brne	.-8      	; 0x2db6 <main+0x2f0>

			Ultrasonic_readDistance(&ultrasonic_return);
    2dbe:	81 e6       	ldi	r24, 0x61	; 97
    2dc0:	92 e0       	ldi	r25, 0x02	; 2
    2dc2:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <Ultrasonic_readDistance>
    2dc6:	0c c1       	rjmp	.+536    	; 0x2fe0 <main+0x51a>

			while(ultrasonic_return >= COLLISION_AVOIDANCE_DISTANCE){
				lcd_moveCursor(0, 0);
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	60 e0       	ldi	r22, 0x00	; 0
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
				lcd_send_string("Obstacle detected at ");
    2dd4:	86 e7       	ldi	r24, 0x76	; 118
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>

				lcd_moveCursor(1, 0);
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
				LCD_intgerToString(ultrasonic_return);
    2de8:	80 91 61 02 	lds	r24, 0x0261
    2dec:	90 91 62 02 	lds	r25, 0x0262
    2df0:	0e 94 77 08 	call	0x10ee	; 0x10ee <LCD_intgerToString>
				lcd_send_string("m");
    2df4:	8c e8       	ldi	r24, 0x8C	; 140
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	aa ef       	ldi	r26, 0xFA	; 250
    2e02:	b3 e4       	ldi	r27, 0x43	; 67
    2e04:	89 8f       	std	Y+25, r24	; 0x19
    2e06:	9a 8f       	std	Y+26, r25	; 0x1a
    2e08:	ab 8f       	std	Y+27, r26	; 0x1b
    2e0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	4a e7       	ldi	r20, 0x7A	; 122
    2e1a:	55 e4       	ldi	r21, 0x45	; 69
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	8d 8b       	std	Y+21, r24	; 0x15
    2e26:	9e 8b       	std	Y+22, r25	; 0x16
    2e28:	af 8b       	std	Y+23, r26	; 0x17
    2e2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e30:	8f 89       	ldd	r24, Y+23	; 0x17
    2e32:	98 8d       	ldd	r25, Y+24	; 0x18
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e8       	ldi	r20, 0x80	; 128
    2e3a:	5f e3       	ldi	r21, 0x3F	; 63
    2e3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e40:	88 23       	and	r24, r24
    2e42:	2c f4       	brge	.+10     	; 0x2e4e <main+0x388>
		__ticks = 1;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	9c 8b       	std	Y+20, r25	; 0x14
    2e4a:	8b 8b       	std	Y+19, r24	; 0x13
    2e4c:	3f c0       	rjmp	.+126    	; 0x2ecc <main+0x406>
	else if (__tmp > 65535)
    2e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e50:	7e 89       	ldd	r23, Y+22	; 0x16
    2e52:	8f 89       	ldd	r24, Y+23	; 0x17
    2e54:	98 8d       	ldd	r25, Y+24	; 0x18
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	3f ef       	ldi	r19, 0xFF	; 255
    2e5a:	4f e7       	ldi	r20, 0x7F	; 127
    2e5c:	57 e4       	ldi	r21, 0x47	; 71
    2e5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e62:	18 16       	cp	r1, r24
    2e64:	4c f5       	brge	.+82     	; 0x2eb8 <main+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e66:	69 8d       	ldd	r22, Y+25	; 0x19
    2e68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e2       	ldi	r20, 0x20	; 32
    2e74:	51 e4       	ldi	r21, 0x41	; 65
    2e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	bc 01       	movw	r22, r24
    2e80:	cd 01       	movw	r24, r26
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	9c 8b       	std	Y+20, r25	; 0x14
    2e8c:	8b 8b       	std	Y+19, r24	; 0x13
    2e8e:	0f c0       	rjmp	.+30     	; 0x2eae <main+0x3e8>
    2e90:	80 e9       	ldi	r24, 0x90	; 144
    2e92:	91 e0       	ldi	r25, 0x01	; 1
    2e94:	9a 8b       	std	Y+18, r25	; 0x12
    2e96:	89 8b       	std	Y+17, r24	; 0x11
    2e98:	89 89       	ldd	r24, Y+17	; 0x11
    2e9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	f1 f7       	brne	.-4      	; 0x2e9c <main+0x3d6>
    2ea0:	9a 8b       	std	Y+18, r25	; 0x12
    2ea2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	9c 8b       	std	Y+20, r25	; 0x14
    2eac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eae:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	69 f7       	brne	.-38     	; 0x2e90 <main+0x3ca>
    2eb6:	14 c0       	rjmp	.+40     	; 0x2ee0 <main+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eba:	7e 89       	ldd	r23, Y+22	; 0x16
    2ebc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ebe:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	9c 8b       	std	Y+20, r25	; 0x14
    2eca:	8b 8b       	std	Y+19, r24	; 0x13
    2ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ece:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed0:	98 8b       	std	Y+16, r25	; 0x10
    2ed2:	8f 87       	std	Y+15, r24	; 0x0f
    2ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed6:	98 89       	ldd	r25, Y+16	; 0x10
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <main+0x412>
    2edc:	98 8b       	std	Y+16, r25	; 0x10
    2ede:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				lcd_clear();
    2ee0:	0e 94 2a 09 	call	0x1254	; 0x1254 <lcd_clear>

				stop_moving();
    2ee4:	0e 94 06 19 	call	0x320c	; 0x320c <stop_moving>
				check_surroudings();
    2ee8:	0e 94 3b 19 	call	0x3276	; 0x3276 <check_surroudings>
				pass_theObstacle();
    2eec:	0e 94 77 19 	call	0x32ee	; 0x32ee <pass_theObstacle>
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	aa ef       	ldi	r26, 0xFA	; 250
    2ef6:	b3 e4       	ldi	r27, 0x43	; 67
    2ef8:	8b 87       	std	Y+11, r24	; 0x0b
    2efa:	9c 87       	std	Y+12, r25	; 0x0c
    2efc:	ad 87       	std	Y+13, r26	; 0x0d
    2efe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	4a e7       	ldi	r20, 0x7A	; 122
    2f0e:	55 e4       	ldi	r21, 0x45	; 69
    2f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	8f 83       	std	Y+7, r24	; 0x07
    2f1a:	98 87       	std	Y+8, r25	; 0x08
    2f1c:	a9 87       	std	Y+9, r26	; 0x09
    2f1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f20:	6f 81       	ldd	r22, Y+7	; 0x07
    2f22:	78 85       	ldd	r23, Y+8	; 0x08
    2f24:	89 85       	ldd	r24, Y+9	; 0x09
    2f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e8       	ldi	r20, 0x80	; 128
    2f2e:	5f e3       	ldi	r21, 0x3F	; 63
    2f30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f34:	88 23       	and	r24, r24
    2f36:	2c f4       	brge	.+10     	; 0x2f42 <main+0x47c>
		__ticks = 1;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	9e 83       	std	Y+6, r25	; 0x06
    2f3e:	8d 83       	std	Y+5, r24	; 0x05
    2f40:	3f c0       	rjmp	.+126    	; 0x2fc0 <main+0x4fa>
	else if (__tmp > 65535)
    2f42:	6f 81       	ldd	r22, Y+7	; 0x07
    2f44:	78 85       	ldd	r23, Y+8	; 0x08
    2f46:	89 85       	ldd	r24, Y+9	; 0x09
    2f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	3f ef       	ldi	r19, 0xFF	; 255
    2f4e:	4f e7       	ldi	r20, 0x7F	; 127
    2f50:	57 e4       	ldi	r21, 0x47	; 71
    2f52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f56:	18 16       	cp	r1, r24
    2f58:	4c f5       	brge	.+82     	; 0x2fac <main+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e2       	ldi	r20, 0x20	; 32
    2f68:	51 e4       	ldi	r21, 0x41	; 65
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	9e 83       	std	Y+6, r25	; 0x06
    2f80:	8d 83       	std	Y+5, r24	; 0x05
    2f82:	0f c0       	rjmp	.+30     	; 0x2fa2 <main+0x4dc>
    2f84:	80 e9       	ldi	r24, 0x90	; 144
    2f86:	91 e0       	ldi	r25, 0x01	; 1
    2f88:	9c 83       	std	Y+4, r25	; 0x04
    2f8a:	8b 83       	std	Y+3, r24	; 0x03
    2f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <main+0x4ca>
    2f94:	9c 83       	std	Y+4, r25	; 0x04
    2f96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f98:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	69 f7       	brne	.-38     	; 0x2f84 <main+0x4be>
    2faa:	14 c0       	rjmp	.+40     	; 0x2fd4 <main+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fac:	6f 81       	ldd	r22, Y+7	; 0x07
    2fae:	78 85       	ldd	r23, Y+8	; 0x08
    2fb0:	89 85       	ldd	r24, Y+9	; 0x09
    2fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	9a 81       	ldd	r25, Y+2	; 0x02
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <main+0x506>
    2fd0:	9a 83       	std	Y+2, r25	; 0x02
    2fd2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				lcd_clear();
    2fd4:	0e 94 2a 09 	call	0x1254	; 0x1254 <lcd_clear>

				Ultrasonic_readDistance(&ultrasonic_return);
    2fd8:	81 e6       	ldi	r24, 0x61	; 97
    2fda:	92 e0       	ldi	r25, 0x02	; 2
    2fdc:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <Ultrasonic_readDistance>
	for(;;){
		if(beginMovement == 1){

			Ultrasonic_readDistance(&ultrasonic_return);

			while(ultrasonic_return >= COLLISION_AVOIDANCE_DISTANCE){
    2fe0:	80 91 61 02 	lds	r24, 0x0261
    2fe4:	90 91 62 02 	lds	r25, 0x0262
    2fe8:	82 33       	cpi	r24, 0x32	; 50
    2fea:	91 05       	cpc	r25, r1
    2fec:	08 f0       	brcs	.+2      	; 0x2ff0 <main+0x52a>
    2fee:	ec ce       	rjmp	.-552    	; 0x2dc8 <main+0x302>

				Ultrasonic_readDistance(&ultrasonic_return);

			}

			IR_PROXIMITY_read(GROUND_L_IR, &ground_L_ir_return);
    2ff0:	2b e5       	ldi	r18, 0x5B	; 91
    2ff2:	32 e0       	ldi	r19, 0x02	; 2
    2ff4:	84 e0       	ldi	r24, 0x04	; 4
    2ff6:	b9 01       	movw	r22, r18
    2ff8:	0e 94 23 12 	call	0x2446	; 0x2446 <IR_PROXIMITY_read>
			IR_PROXIMITY_read(GROUND_R_IR, &ground_R_ir_return);
    2ffc:	2c e5       	ldi	r18, 0x5C	; 92
    2ffe:	32 e0       	ldi	r19, 0x02	; 2
    3000:	85 e0       	ldi	r24, 0x05	; 5
    3002:	b9 01       	movw	r22, r18
    3004:	0e 94 23 12 	call	0x2446	; 0x2446 <IR_PROXIMITY_read>

			//Line is between the two wheels
			if( 		(ground_L_ir_return==0) && (ground_R_ir_return==0) ){
    3008:	80 91 5b 02 	lds	r24, 0x025B
    300c:	88 23       	and	r24, r24
    300e:	39 f4       	brne	.+14     	; 0x301e <main+0x558>
    3010:	80 91 5c 02 	lds	r24, 0x025C
    3014:	88 23       	and	r24, r24
    3016:	19 f4       	brne	.+6      	; 0x301e <main+0x558>
				move_forward();
    3018:	0e 94 32 18 	call	0x3064	; 0x3064 <move_forward>
    301c:	cc ce       	rjmp	.-616    	; 0x2db6 <main+0x2f0>
			}

			//Line is closer to the left wheel
			else if(	(ground_L_ir_return==1) && (ground_R_ir_return==0) ){
    301e:	80 91 5b 02 	lds	r24, 0x025B
    3022:	81 30       	cpi	r24, 0x01	; 1
    3024:	39 f4       	brne	.+14     	; 0x3034 <main+0x56e>
    3026:	80 91 5c 02 	lds	r24, 0x025C
    302a:	88 23       	and	r24, r24
    302c:	19 f4       	brne	.+6      	; 0x3034 <main+0x56e>
				move_forward_slightly_right();
    302e:	0e 94 9c 18 	call	0x3138	; 0x3138 <move_forward_slightly_right>
    3032:	c1 ce       	rjmp	.-638    	; 0x2db6 <main+0x2f0>
			}

			//Line is closer to the right wheel
			else if(	(ground_L_ir_return==0) && (ground_R_ir_return==1) ){
    3034:	80 91 5b 02 	lds	r24, 0x025B
    3038:	88 23       	and	r24, r24
    303a:	39 f4       	brne	.+14     	; 0x304a <main+0x584>
    303c:	80 91 5c 02 	lds	r24, 0x025C
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	19 f4       	brne	.+6      	; 0x304a <main+0x584>
				move_forward_slightly_left();
    3044:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <move_forward_slightly_left>
    3048:	b6 ce       	rjmp	.-660    	; 0x2db6 <main+0x2f0>
			}

			//Line has ended
			else if(	(ground_L_ir_return==1) && (ground_R_ir_return==1) ){
    304a:	80 91 5b 02 	lds	r24, 0x025B
    304e:	81 30       	cpi	r24, 0x01	; 1
    3050:	09 f0       	breq	.+2      	; 0x3054 <main+0x58e>
    3052:	b1 ce       	rjmp	.-670    	; 0x2db6 <main+0x2f0>
    3054:	80 91 5c 02 	lds	r24, 0x025C
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	09 f0       	breq	.+2      	; 0x305e <main+0x598>
    305c:	ac ce       	rjmp	.-680    	; 0x2db6 <main+0x2f0>
				stop_moving();
    305e:	0e 94 06 19 	call	0x320c	; 0x320c <stop_moving>
    3062:	a9 ce       	rjmp	.-686    	; 0x2db6 <main+0x2f0>

00003064 <move_forward>:
	}
	return 0;
}


funcReturn move_forward(void){
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	00 d0       	rcall	.+0      	; 0x306a <move_forward+0x6>
    306a:	00 d0       	rcall	.+0      	; 0x306c <move_forward+0x8>
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62

	funcReturn ret1,ret2,ret3;


	lcd_moveCursor(0, 0);
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	60 e0       	ldi	r22, 0x00	; 0
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
	//	lcd_clear();
	lcd_send_string("Forward       ");
    307c:	8e e8       	ldi	r24, 0x8E	; 142
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
	ret1=SERVO_rotate(DEG_90);
    3084:	82 e0       	ldi	r24, 0x02	; 2
    3086:	0e 94 bf 12 	call	0x257e	; 0x257e <SERVO_rotate>
    308a:	8b 83       	std	Y+3, r24	; 0x03
	ret2=DCMotor_Rotate(LB_DC, DC_MOTOR_CW, 100);
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	61 e0       	ldi	r22, 0x01	; 1
    3090:	44 e6       	ldi	r20, 0x64	; 100
    3092:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DCMotor_Rotate>
    3096:	8a 83       	std	Y+2, r24	; 0x02
	ret3=DCMotor_Rotate(RB_DC, DC_MOTOR_CW, 100);
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	61 e0       	ldi	r22, 0x01	; 1
    309c:	44 e6       	ldi	r20, 0x64	; 100
    309e:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DCMotor_Rotate>
    30a2:	89 83       	std	Y+1, r24	; 0x01

	if(ret1 || ret2 || ret3 ){
    30a4:	8b 81       	ldd	r24, Y+3	; 0x03
    30a6:	88 23       	and	r24, r24
    30a8:	31 f4       	brne	.+12     	; 0x30b6 <move_forward+0x52>
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	88 23       	and	r24, r24
    30ae:	19 f4       	brne	.+6      	; 0x30b6 <move_forward+0x52>
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	88 23       	and	r24, r24
    30b4:	11 f0       	breq	.+4      	; 0x30ba <move_forward+0x56>
		return NOT_OK;
    30b6:	1c 82       	std	Y+4, r1	; 0x04
    30b8:	02 c0       	rjmp	.+4      	; 0x30be <move_forward+0x5a>
	}
	return OK;
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	8c 83       	std	Y+4, r24	; 0x04
    30be:	8c 81       	ldd	r24, Y+4	; 0x04

}
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	cf 91       	pop	r28
    30ca:	df 91       	pop	r29
    30cc:	08 95       	ret

000030ce <move_backward>:

funcReturn move_backward(void){
    30ce:	df 93       	push	r29
    30d0:	cf 93       	push	r28
    30d2:	00 d0       	rcall	.+0      	; 0x30d4 <move_backward+0x6>
    30d4:	00 d0       	rcall	.+0      	; 0x30d6 <move_backward+0x8>
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
	funcReturn ret1,ret2,ret3;


	lcd_moveCursor(0, 0);
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
	lcd_send_string("Backward        ");
    30e6:	8d e9       	ldi	r24, 0x9D	; 157
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
	ret1=SERVO_rotate(DEG_90);
    30ee:	82 e0       	ldi	r24, 0x02	; 2
    30f0:	0e 94 bf 12 	call	0x257e	; 0x257e <SERVO_rotate>
    30f4:	8b 83       	std	Y+3, r24	; 0x03
	ret2=DCMotor_Rotate(LB_DC, DC_MOTOR_CCW, 100);
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	62 e0       	ldi	r22, 0x02	; 2
    30fa:	44 e6       	ldi	r20, 0x64	; 100
    30fc:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DCMotor_Rotate>
    3100:	8a 83       	std	Y+2, r24	; 0x02
	ret3=DCMotor_Rotate(RB_DC, DC_MOTOR_CCW, 100);
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	62 e0       	ldi	r22, 0x02	; 2
    3106:	44 e6       	ldi	r20, 0x64	; 100
    3108:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DCMotor_Rotate>
    310c:	89 83       	std	Y+1, r24	; 0x01

	if(ret1 || ret2 || ret3 ){
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	88 23       	and	r24, r24
    3112:	31 f4       	brne	.+12     	; 0x3120 <move_backward+0x52>
    3114:	8a 81       	ldd	r24, Y+2	; 0x02
    3116:	88 23       	and	r24, r24
    3118:	19 f4       	brne	.+6      	; 0x3120 <move_backward+0x52>
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	88 23       	and	r24, r24
    311e:	11 f0       	breq	.+4      	; 0x3124 <move_backward+0x56>
		return NOT_OK;
    3120:	1c 82       	std	Y+4, r1	; 0x04
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <move_backward+0x5a>
	}
	return OK;
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	8c 83       	std	Y+4, r24	; 0x04
    3128:	8c 81       	ldd	r24, Y+4	; 0x04

}
    312a:	0f 90       	pop	r0
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <move_forward_slightly_right>:



funcReturn move_forward_slightly_right(void){
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	00 d0       	rcall	.+0      	; 0x313e <move_forward_slightly_right+0x6>
    313e:	00 d0       	rcall	.+0      	; 0x3140 <move_forward_slightly_right+0x8>
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
	funcReturn ret1,ret2,ret3;

	lcd_moveCursor(0, 0);
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
	lcd_send_string("Slightly right");
    3150:	8e ea       	ldi	r24, 0xAE	; 174
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
	ret1=SERVO_rotate(DEG_45);
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	0e 94 bf 12 	call	0x257e	; 0x257e <SERVO_rotate>
    315e:	8b 83       	std	Y+3, r24	; 0x03
	ret2=DCMotor_Rotate(LB_DC, DC_MOTOR_CW, 100);
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	61 e0       	ldi	r22, 0x01	; 1
    3164:	44 e6       	ldi	r20, 0x64	; 100
    3166:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DCMotor_Rotate>
    316a:	8a 83       	std	Y+2, r24	; 0x02
	ret3=DCMotor_Rotate(RB_DC, DC_MOTOR_CW, 100);
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	61 e0       	ldi	r22, 0x01	; 1
    3170:	44 e6       	ldi	r20, 0x64	; 100
    3172:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DCMotor_Rotate>
    3176:	89 83       	std	Y+1, r24	; 0x01

	if(ret1 || ret2 || ret3 ){
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	88 23       	and	r24, r24
    317c:	31 f4       	brne	.+12     	; 0x318a <move_forward_slightly_right+0x52>
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	88 23       	and	r24, r24
    3182:	19 f4       	brne	.+6      	; 0x318a <move_forward_slightly_right+0x52>
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	88 23       	and	r24, r24
    3188:	11 f0       	breq	.+4      	; 0x318e <move_forward_slightly_right+0x56>
		return NOT_OK;
    318a:	1c 82       	std	Y+4, r1	; 0x04
    318c:	02 c0       	rjmp	.+4      	; 0x3192 <move_forward_slightly_right+0x5a>
	}
	return OK;
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	8c 83       	std	Y+4, r24	; 0x04
    3192:	8c 81       	ldd	r24, Y+4	; 0x04

}
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <move_forward_slightly_left>:


funcReturn move_forward_slightly_left(void){
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <move_forward_slightly_left+0x6>
    31a8:	00 d0       	rcall	.+0      	; 0x31aa <move_forward_slightly_left+0x8>
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
	funcReturn ret1,ret2,ret3;

	lcd_moveCursor(0, 0);
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	70 e0       	ldi	r23, 0x00	; 0
    31b6:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
	lcd_send_string("Slightly left ");
    31ba:	8d eb       	ldi	r24, 0xBD	; 189
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
	ret1=SERVO_rotate(DEG_135);
    31c2:	83 e0       	ldi	r24, 0x03	; 3
    31c4:	0e 94 bf 12 	call	0x257e	; 0x257e <SERVO_rotate>
    31c8:	8b 83       	std	Y+3, r24	; 0x03
	ret2=DCMotor_Rotate(LB_DC, DC_MOTOR_CW, 100);
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	61 e0       	ldi	r22, 0x01	; 1
    31ce:	44 e6       	ldi	r20, 0x64	; 100
    31d0:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DCMotor_Rotate>
    31d4:	8a 83       	std	Y+2, r24	; 0x02
	ret3=DCMotor_Rotate(RB_DC, DC_MOTOR_CW, 100);
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	61 e0       	ldi	r22, 0x01	; 1
    31da:	44 e6       	ldi	r20, 0x64	; 100
    31dc:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DCMotor_Rotate>
    31e0:	89 83       	std	Y+1, r24	; 0x01

	if(ret1 || ret2 || ret3 ){
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	88 23       	and	r24, r24
    31e6:	31 f4       	brne	.+12     	; 0x31f4 <move_forward_slightly_left+0x52>
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	88 23       	and	r24, r24
    31ec:	19 f4       	brne	.+6      	; 0x31f4 <move_forward_slightly_left+0x52>
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	88 23       	and	r24, r24
    31f2:	11 f0       	breq	.+4      	; 0x31f8 <move_forward_slightly_left+0x56>
		return NOT_OK;
    31f4:	1c 82       	std	Y+4, r1	; 0x04
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <move_forward_slightly_left+0x5a>
	}
	return OK;
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	8c 83       	std	Y+4, r24	; 0x04
    31fc:	8c 81       	ldd	r24, Y+4	; 0x04

}
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <stop_moving>:


funcReturn stop_moving(void){
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	00 d0       	rcall	.+0      	; 0x3212 <stop_moving+0x6>
    3212:	00 d0       	rcall	.+0      	; 0x3214 <stop_moving+0x8>
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
	funcReturn ret1,ret2,ret3;

	lcd_moveCursor(0, 0);
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	70 e0       	ldi	r23, 0x00	; 0
    3220:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
	lcd_send_string("Stopped       ");
    3224:	8c ec       	ldi	r24, 0xCC	; 204
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
	ret1=SERVO_rotate(DEG_90);
    322c:	82 e0       	ldi	r24, 0x02	; 2
    322e:	0e 94 bf 12 	call	0x257e	; 0x257e <SERVO_rotate>
    3232:	8b 83       	std	Y+3, r24	; 0x03
	ret2=DCMotor_Rotate(LB_DC, DC_MOTOR_STOP, 0);
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	60 e0       	ldi	r22, 0x00	; 0
    3238:	40 e0       	ldi	r20, 0x00	; 0
    323a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DCMotor_Rotate>
    323e:	8a 83       	std	Y+2, r24	; 0x02
	ret3=DCMotor_Rotate(RB_DC, DC_MOTOR_STOP, 0);
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	40 e0       	ldi	r20, 0x00	; 0
    3246:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <DCMotor_Rotate>
    324a:	89 83       	std	Y+1, r24	; 0x01

	if(ret1 || ret2 || ret3 ){
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	88 23       	and	r24, r24
    3250:	31 f4       	brne	.+12     	; 0x325e <stop_moving+0x52>
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	88 23       	and	r24, r24
    3256:	19 f4       	brne	.+6      	; 0x325e <stop_moving+0x52>
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	88 23       	and	r24, r24
    325c:	11 f0       	breq	.+4      	; 0x3262 <stop_moving+0x56>
		return NOT_OK;
    325e:	1c 82       	std	Y+4, r1	; 0x04
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <stop_moving+0x5a>
	}
	return OK;
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	8c 83       	std	Y+4, r24	; 0x04
    3266:	8c 81       	ldd	r24, Y+4	; 0x04

}
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret

00003276 <check_surroudings>:


funcReturn check_surroudings(void){
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	00 d0       	rcall	.+0      	; 0x327c <check_surroudings+0x6>
    327c:	00 d0       	rcall	.+0      	; 0x327e <check_surroudings+0x8>
    327e:	0f 92       	push	r0
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62

	funcReturn ret1,ret2,ret3,ret4;

	ret1=IR_PROXIMITY_read(RIGHT_IR, &right_ir_return);
    3284:	20 e6       	ldi	r18, 0x60	; 96
    3286:	32 e0       	ldi	r19, 0x02	; 2
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	b9 01       	movw	r22, r18
    328c:	0e 94 23 12 	call	0x2446	; 0x2446 <IR_PROXIMITY_read>
    3290:	8c 83       	std	Y+4, r24	; 0x04
	ret2=IR_PROXIMITY_read(LEFT_IR, &left_ir_return);
    3292:	2f e5       	ldi	r18, 0x5F	; 95
    3294:	32 e0       	ldi	r19, 0x02	; 2
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	b9 01       	movw	r22, r18
    329a:	0e 94 23 12 	call	0x2446	; 0x2446 <IR_PROXIMITY_read>
    329e:	8b 83       	std	Y+3, r24	; 0x03
	ret3=IR_PROXIMITY_read(FRONT_IR, &front_ir_return);
    32a0:	2e e5       	ldi	r18, 0x5E	; 94
    32a2:	32 e0       	ldi	r19, 0x02	; 2
    32a4:	82 e0       	ldi	r24, 0x02	; 2
    32a6:	b9 01       	movw	r22, r18
    32a8:	0e 94 23 12 	call	0x2446	; 0x2446 <IR_PROXIMITY_read>
    32ac:	8a 83       	std	Y+2, r24	; 0x02
	ret4=IR_PROXIMITY_read(BACK_IR, &back_ir_return);
    32ae:	2d e5       	ldi	r18, 0x5D	; 93
    32b0:	32 e0       	ldi	r19, 0x02	; 2
    32b2:	83 e0       	ldi	r24, 0x03	; 3
    32b4:	b9 01       	movw	r22, r18
    32b6:	0e 94 23 12 	call	0x2446	; 0x2446 <IR_PROXIMITY_read>
    32ba:	89 83       	std	Y+1, r24	; 0x01

	if(ret1 || ret2 || ret3 || ret4){
    32bc:	8c 81       	ldd	r24, Y+4	; 0x04
    32be:	88 23       	and	r24, r24
    32c0:	49 f4       	brne	.+18     	; 0x32d4 <check_surroudings+0x5e>
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	88 23       	and	r24, r24
    32c6:	31 f4       	brne	.+12     	; 0x32d4 <check_surroudings+0x5e>
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	88 23       	and	r24, r24
    32cc:	19 f4       	brne	.+6      	; 0x32d4 <check_surroudings+0x5e>
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	88 23       	and	r24, r24
    32d2:	11 f0       	breq	.+4      	; 0x32d8 <check_surroudings+0x62>
		return NOT_OK;
    32d4:	1d 82       	std	Y+5, r1	; 0x05
    32d6:	02 c0       	rjmp	.+4      	; 0x32dc <check_surroudings+0x66>
	}
	return OK;
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	8d 83       	std	Y+5, r24	; 0x05
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	cf 91       	pop	r28
    32ea:	df 91       	pop	r29
    32ec:	08 95       	ret

000032ee <pass_theObstacle>:


funcReturn pass_theObstacle(void){
    32ee:	0f 93       	push	r16
    32f0:	1f 93       	push	r17
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	c6 5d       	subi	r28, 0xD6	; 214
    32fc:	d0 40       	sbci	r29, 0x00	; 0
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61

	funcReturn ret1,ret2,ret3;

	if( (right_ir_return==0) && (left_ir_return==1) && (back_ir_return==0) ){	//back and right are empty
    3308:	80 91 60 02 	lds	r24, 0x0260
    330c:	88 23       	and	r24, r24
    330e:	09 f0       	breq	.+2      	; 0x3312 <pass_theObstacle+0x24>
    3310:	be c3       	rjmp	.+1916   	; 0x3a8e <pass_theObstacle+0x7a0>
    3312:	80 91 5f 02 	lds	r24, 0x025F
    3316:	81 30       	cpi	r24, 0x01	; 1
    3318:	09 f0       	breq	.+2      	; 0x331c <pass_theObstacle+0x2e>
    331a:	b9 c3       	rjmp	.+1906   	; 0x3a8e <pass_theObstacle+0x7a0>
    331c:	80 91 5d 02 	lds	r24, 0x025D
    3320:	88 23       	and	r24, r24
    3322:	09 f0       	breq	.+2      	; 0x3326 <pass_theObstacle+0x38>
    3324:	b4 c3       	rjmp	.+1896   	; 0x3a8e <pass_theObstacle+0x7a0>
		move_backward();
    3326:	0e 94 67 18 	call	0x30ce	; 0x30ce <move_backward>
    332a:	fe 01       	movw	r30, r28
    332c:	e1 53       	subi	r30, 0x31	; 49
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	aa ef       	ldi	r26, 0xFA	; 250
    3336:	b3 e4       	ldi	r27, 0x43	; 67
    3338:	80 83       	st	Z, r24
    333a:	91 83       	std	Z+1, r25	; 0x01
    333c:	a2 83       	std	Z+2, r26	; 0x02
    333e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	8e 01       	movw	r16, r28
    3342:	05 53       	subi	r16, 0x35	; 53
    3344:	1f 4f       	sbci	r17, 0xFF	; 255
    3346:	fe 01       	movw	r30, r28
    3348:	e1 53       	subi	r30, 0x31	; 49
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	60 81       	ld	r22, Z
    334e:	71 81       	ldd	r23, Z+1	; 0x01
    3350:	82 81       	ldd	r24, Z+2	; 0x02
    3352:	93 81       	ldd	r25, Z+3	; 0x03
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4a e7       	ldi	r20, 0x7A	; 122
    335a:	55 e4       	ldi	r21, 0x45	; 69
    335c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	f8 01       	movw	r30, r16
    3366:	80 83       	st	Z, r24
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	a2 83       	std	Z+2, r26	; 0x02
    336c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    336e:	fe 01       	movw	r30, r28
    3370:	e5 53       	subi	r30, 0x35	; 53
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	60 81       	ld	r22, Z
    3376:	71 81       	ldd	r23, Z+1	; 0x01
    3378:	82 81       	ldd	r24, Z+2	; 0x02
    337a:	93 81       	ldd	r25, Z+3	; 0x03
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	40 e8       	ldi	r20, 0x80	; 128
    3382:	5f e3       	ldi	r21, 0x3F	; 63
    3384:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3388:	88 23       	and	r24, r24
    338a:	44 f4       	brge	.+16     	; 0x339c <pass_theObstacle+0xae>
		__ticks = 1;
    338c:	fe 01       	movw	r30, r28
    338e:	e7 53       	subi	r30, 0x37	; 55
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	91 83       	std	Z+1, r25	; 0x01
    3398:	80 83       	st	Z, r24
    339a:	64 c0       	rjmp	.+200    	; 0x3464 <pass_theObstacle+0x176>
	else if (__tmp > 65535)
    339c:	fe 01       	movw	r30, r28
    339e:	e5 53       	subi	r30, 0x35	; 53
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	3f ef       	ldi	r19, 0xFF	; 255
    33ae:	4f e7       	ldi	r20, 0x7F	; 127
    33b0:	57 e4       	ldi	r21, 0x47	; 71
    33b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33b6:	18 16       	cp	r1, r24
    33b8:	0c f0       	brlt	.+2      	; 0x33bc <pass_theObstacle+0xce>
    33ba:	43 c0       	rjmp	.+134    	; 0x3442 <pass_theObstacle+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33bc:	fe 01       	movw	r30, r28
    33be:	e1 53       	subi	r30, 0x31	; 49
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	60 81       	ld	r22, Z
    33c4:	71 81       	ldd	r23, Z+1	; 0x01
    33c6:	82 81       	ldd	r24, Z+2	; 0x02
    33c8:	93 81       	ldd	r25, Z+3	; 0x03
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e2       	ldi	r20, 0x20	; 32
    33d0:	51 e4       	ldi	r21, 0x41	; 65
    33d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	8e 01       	movw	r16, r28
    33dc:	07 53       	subi	r16, 0x37	; 55
    33de:	1f 4f       	sbci	r17, 0xFF	; 255
    33e0:	bc 01       	movw	r22, r24
    33e2:	cd 01       	movw	r24, r26
    33e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	f8 01       	movw	r30, r16
    33ee:	91 83       	std	Z+1, r25	; 0x01
    33f0:	80 83       	st	Z, r24
    33f2:	1f c0       	rjmp	.+62     	; 0x3432 <pass_theObstacle+0x144>
    33f4:	fe 01       	movw	r30, r28
    33f6:	e9 53       	subi	r30, 0x39	; 57
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	80 e9       	ldi	r24, 0x90	; 144
    33fc:	91 e0       	ldi	r25, 0x01	; 1
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	80 83       	st	Z, r24
    3402:	fe 01       	movw	r30, r28
    3404:	e9 53       	subi	r30, 0x39	; 57
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <pass_theObstacle+0x11e>
    3410:	fe 01       	movw	r30, r28
    3412:	e9 53       	subi	r30, 0x39	; 57
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	91 83       	std	Z+1, r25	; 0x01
    3418:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341a:	de 01       	movw	r26, r28
    341c:	a7 53       	subi	r26, 0x37	; 55
    341e:	bf 4f       	sbci	r27, 0xFF	; 255
    3420:	fe 01       	movw	r30, r28
    3422:	e7 53       	subi	r30, 0x37	; 55
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	80 81       	ld	r24, Z
    3428:	91 81       	ldd	r25, Z+1	; 0x01
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	11 96       	adiw	r26, 0x01	; 1
    342e:	9c 93       	st	X, r25
    3430:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3432:	fe 01       	movw	r30, r28
    3434:	e7 53       	subi	r30, 0x37	; 55
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	80 81       	ld	r24, Z
    343a:	91 81       	ldd	r25, Z+1	; 0x01
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	d1 f6       	brne	.-76     	; 0x33f4 <pass_theObstacle+0x106>
    3440:	27 c0       	rjmp	.+78     	; 0x3490 <pass_theObstacle+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	8e 01       	movw	r16, r28
    3444:	07 53       	subi	r16, 0x37	; 55
    3446:	1f 4f       	sbci	r17, 0xFF	; 255
    3448:	fe 01       	movw	r30, r28
    344a:	e5 53       	subi	r30, 0x35	; 53
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	60 81       	ld	r22, Z
    3450:	71 81       	ldd	r23, Z+1	; 0x01
    3452:	82 81       	ldd	r24, Z+2	; 0x02
    3454:	93 81       	ldd	r25, Z+3	; 0x03
    3456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	f8 01       	movw	r30, r16
    3460:	91 83       	std	Z+1, r25	; 0x01
    3462:	80 83       	st	Z, r24
    3464:	de 01       	movw	r26, r28
    3466:	ab 53       	subi	r26, 0x3B	; 59
    3468:	bf 4f       	sbci	r27, 0xFF	; 255
    346a:	fe 01       	movw	r30, r28
    346c:	e7 53       	subi	r30, 0x37	; 55
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	80 81       	ld	r24, Z
    3472:	91 81       	ldd	r25, Z+1	; 0x01
    3474:	8d 93       	st	X+, r24
    3476:	9c 93       	st	X, r25
    3478:	fe 01       	movw	r30, r28
    347a:	eb 53       	subi	r30, 0x3B	; 59
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	80 81       	ld	r24, Z
    3480:	91 81       	ldd	r25, Z+1	; 0x01
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <pass_theObstacle+0x194>
    3486:	fe 01       	movw	r30, r28
    3488:	eb 53       	subi	r30, 0x3B	; 59
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	91 83       	std	Z+1, r25	; 0x01
    348e:	80 83       	st	Z, r24
		_delay_ms(500);

		move_forward_slightly_right();
    3490:	0e 94 9c 18 	call	0x3138	; 0x3138 <move_forward_slightly_right>
    3494:	fe 01       	movw	r30, r28
    3496:	ef 53       	subi	r30, 0x3F	; 63
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	aa e7       	ldi	r26, 0x7A	; 122
    34a0:	b4 e4       	ldi	r27, 0x44	; 68
    34a2:	80 83       	st	Z, r24
    34a4:	91 83       	std	Z+1, r25	; 0x01
    34a6:	a2 83       	std	Z+2, r26	; 0x02
    34a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34aa:	8e 01       	movw	r16, r28
    34ac:	03 54       	subi	r16, 0x43	; 67
    34ae:	1f 4f       	sbci	r17, 0xFF	; 255
    34b0:	fe 01       	movw	r30, r28
    34b2:	ef 53       	subi	r30, 0x3F	; 63
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	60 81       	ld	r22, Z
    34b8:	71 81       	ldd	r23, Z+1	; 0x01
    34ba:	82 81       	ldd	r24, Z+2	; 0x02
    34bc:	93 81       	ldd	r25, Z+3	; 0x03
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	4a e7       	ldi	r20, 0x7A	; 122
    34c4:	55 e4       	ldi	r21, 0x45	; 69
    34c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	f8 01       	movw	r30, r16
    34d0:	80 83       	st	Z, r24
    34d2:	91 83       	std	Z+1, r25	; 0x01
    34d4:	a2 83       	std	Z+2, r26	; 0x02
    34d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34d8:	fe 01       	movw	r30, r28
    34da:	e3 54       	subi	r30, 0x43	; 67
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	60 81       	ld	r22, Z
    34e0:	71 81       	ldd	r23, Z+1	; 0x01
    34e2:	82 81       	ldd	r24, Z+2	; 0x02
    34e4:	93 81       	ldd	r25, Z+3	; 0x03
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	40 e8       	ldi	r20, 0x80	; 128
    34ec:	5f e3       	ldi	r21, 0x3F	; 63
    34ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34f2:	88 23       	and	r24, r24
    34f4:	44 f4       	brge	.+16     	; 0x3506 <pass_theObstacle+0x218>
		__ticks = 1;
    34f6:	fe 01       	movw	r30, r28
    34f8:	e5 54       	subi	r30, 0x45	; 69
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	91 83       	std	Z+1, r25	; 0x01
    3502:	80 83       	st	Z, r24
    3504:	64 c0       	rjmp	.+200    	; 0x35ce <pass_theObstacle+0x2e0>
	else if (__tmp > 65535)
    3506:	fe 01       	movw	r30, r28
    3508:	e3 54       	subi	r30, 0x43	; 67
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	60 81       	ld	r22, Z
    350e:	71 81       	ldd	r23, Z+1	; 0x01
    3510:	82 81       	ldd	r24, Z+2	; 0x02
    3512:	93 81       	ldd	r25, Z+3	; 0x03
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	3f ef       	ldi	r19, 0xFF	; 255
    3518:	4f e7       	ldi	r20, 0x7F	; 127
    351a:	57 e4       	ldi	r21, 0x47	; 71
    351c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3520:	18 16       	cp	r1, r24
    3522:	0c f0       	brlt	.+2      	; 0x3526 <pass_theObstacle+0x238>
    3524:	43 c0       	rjmp	.+134    	; 0x35ac <pass_theObstacle+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3526:	fe 01       	movw	r30, r28
    3528:	ef 53       	subi	r30, 0x3F	; 63
    352a:	ff 4f       	sbci	r31, 0xFF	; 255
    352c:	60 81       	ld	r22, Z
    352e:	71 81       	ldd	r23, Z+1	; 0x01
    3530:	82 81       	ldd	r24, Z+2	; 0x02
    3532:	93 81       	ldd	r25, Z+3	; 0x03
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e2       	ldi	r20, 0x20	; 32
    353a:	51 e4       	ldi	r21, 0x41	; 65
    353c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	8e 01       	movw	r16, r28
    3546:	05 54       	subi	r16, 0x45	; 69
    3548:	1f 4f       	sbci	r17, 0xFF	; 255
    354a:	bc 01       	movw	r22, r24
    354c:	cd 01       	movw	r24, r26
    354e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	f8 01       	movw	r30, r16
    3558:	91 83       	std	Z+1, r25	; 0x01
    355a:	80 83       	st	Z, r24
    355c:	1f c0       	rjmp	.+62     	; 0x359c <pass_theObstacle+0x2ae>
    355e:	fe 01       	movw	r30, r28
    3560:	e7 54       	subi	r30, 0x47	; 71
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	80 e9       	ldi	r24, 0x90	; 144
    3566:	91 e0       	ldi	r25, 0x01	; 1
    3568:	91 83       	std	Z+1, r25	; 0x01
    356a:	80 83       	st	Z, r24
    356c:	fe 01       	movw	r30, r28
    356e:	e7 54       	subi	r30, 0x47	; 71
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <pass_theObstacle+0x288>
    357a:	fe 01       	movw	r30, r28
    357c:	e7 54       	subi	r30, 0x47	; 71
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	91 83       	std	Z+1, r25	; 0x01
    3582:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3584:	de 01       	movw	r26, r28
    3586:	a5 54       	subi	r26, 0x45	; 69
    3588:	bf 4f       	sbci	r27, 0xFF	; 255
    358a:	fe 01       	movw	r30, r28
    358c:	e5 54       	subi	r30, 0x45	; 69
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	80 81       	ld	r24, Z
    3592:	91 81       	ldd	r25, Z+1	; 0x01
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	11 96       	adiw	r26, 0x01	; 1
    3598:	9c 93       	st	X, r25
    359a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359c:	fe 01       	movw	r30, r28
    359e:	e5 54       	subi	r30, 0x45	; 69
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	80 81       	ld	r24, Z
    35a4:	91 81       	ldd	r25, Z+1	; 0x01
    35a6:	00 97       	sbiw	r24, 0x00	; 0
    35a8:	d1 f6       	brne	.-76     	; 0x355e <pass_theObstacle+0x270>
    35aa:	27 c0       	rjmp	.+78     	; 0x35fa <pass_theObstacle+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ac:	8e 01       	movw	r16, r28
    35ae:	05 54       	subi	r16, 0x45	; 69
    35b0:	1f 4f       	sbci	r17, 0xFF	; 255
    35b2:	fe 01       	movw	r30, r28
    35b4:	e3 54       	subi	r30, 0x43	; 67
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	60 81       	ld	r22, Z
    35ba:	71 81       	ldd	r23, Z+1	; 0x01
    35bc:	82 81       	ldd	r24, Z+2	; 0x02
    35be:	93 81       	ldd	r25, Z+3	; 0x03
    35c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	f8 01       	movw	r30, r16
    35ca:	91 83       	std	Z+1, r25	; 0x01
    35cc:	80 83       	st	Z, r24
    35ce:	de 01       	movw	r26, r28
    35d0:	a9 54       	subi	r26, 0x49	; 73
    35d2:	bf 4f       	sbci	r27, 0xFF	; 255
    35d4:	fe 01       	movw	r30, r28
    35d6:	e5 54       	subi	r30, 0x45	; 69
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 81       	ld	r24, Z
    35dc:	91 81       	ldd	r25, Z+1	; 0x01
    35de:	8d 93       	st	X+, r24
    35e0:	9c 93       	st	X, r25
    35e2:	fe 01       	movw	r30, r28
    35e4:	e9 54       	subi	r30, 0x49	; 73
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 81       	ld	r24, Z
    35ea:	91 81       	ldd	r25, Z+1	; 0x01
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <pass_theObstacle+0x2fe>
    35f0:	fe 01       	movw	r30, r28
    35f2:	e9 54       	subi	r30, 0x49	; 73
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	91 83       	std	Z+1, r25	; 0x01
    35f8:	80 83       	st	Z, r24
		_delay_ms(1000);

		move_forward_slightly_left();
    35fa:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <move_forward_slightly_left>
    35fe:	fe 01       	movw	r30, r28
    3600:	ed 54       	subi	r30, 0x4D	; 77
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	aa ef       	ldi	r26, 0xFA	; 250
    360a:	b3 e4       	ldi	r27, 0x43	; 67
    360c:	80 83       	st	Z, r24
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	a2 83       	std	Z+2, r26	; 0x02
    3612:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3614:	8e 01       	movw	r16, r28
    3616:	01 55       	subi	r16, 0x51	; 81
    3618:	1f 4f       	sbci	r17, 0xFF	; 255
    361a:	fe 01       	movw	r30, r28
    361c:	ed 54       	subi	r30, 0x4D	; 77
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	60 81       	ld	r22, Z
    3622:	71 81       	ldd	r23, Z+1	; 0x01
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	93 81       	ldd	r25, Z+3	; 0x03
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	4a e7       	ldi	r20, 0x7A	; 122
    362e:	55 e4       	ldi	r21, 0x45	; 69
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	f8 01       	movw	r30, r16
    363a:	80 83       	st	Z, r24
    363c:	91 83       	std	Z+1, r25	; 0x01
    363e:	a2 83       	std	Z+2, r26	; 0x02
    3640:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3642:	fe 01       	movw	r30, r28
    3644:	e1 55       	subi	r30, 0x51	; 81
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	60 81       	ld	r22, Z
    364a:	71 81       	ldd	r23, Z+1	; 0x01
    364c:	82 81       	ldd	r24, Z+2	; 0x02
    364e:	93 81       	ldd	r25, Z+3	; 0x03
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e8       	ldi	r20, 0x80	; 128
    3656:	5f e3       	ldi	r21, 0x3F	; 63
    3658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    365c:	88 23       	and	r24, r24
    365e:	44 f4       	brge	.+16     	; 0x3670 <pass_theObstacle+0x382>
		__ticks = 1;
    3660:	fe 01       	movw	r30, r28
    3662:	e3 55       	subi	r30, 0x53	; 83
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	80 83       	st	Z, r24
    366e:	64 c0       	rjmp	.+200    	; 0x3738 <pass_theObstacle+0x44a>
	else if (__tmp > 65535)
    3670:	fe 01       	movw	r30, r28
    3672:	e1 55       	subi	r30, 0x51	; 81
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	60 81       	ld	r22, Z
    3678:	71 81       	ldd	r23, Z+1	; 0x01
    367a:	82 81       	ldd	r24, Z+2	; 0x02
    367c:	93 81       	ldd	r25, Z+3	; 0x03
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	3f ef       	ldi	r19, 0xFF	; 255
    3682:	4f e7       	ldi	r20, 0x7F	; 127
    3684:	57 e4       	ldi	r21, 0x47	; 71
    3686:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    368a:	18 16       	cp	r1, r24
    368c:	0c f0       	brlt	.+2      	; 0x3690 <pass_theObstacle+0x3a2>
    368e:	43 c0       	rjmp	.+134    	; 0x3716 <pass_theObstacle+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3690:	fe 01       	movw	r30, r28
    3692:	ed 54       	subi	r30, 0x4D	; 77
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	60 81       	ld	r22, Z
    3698:	71 81       	ldd	r23, Z+1	; 0x01
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	93 81       	ldd	r25, Z+3	; 0x03
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e2       	ldi	r20, 0x20	; 32
    36a4:	51 e4       	ldi	r21, 0x41	; 65
    36a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	8e 01       	movw	r16, r28
    36b0:	03 55       	subi	r16, 0x53	; 83
    36b2:	1f 4f       	sbci	r17, 0xFF	; 255
    36b4:	bc 01       	movw	r22, r24
    36b6:	cd 01       	movw	r24, r26
    36b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	f8 01       	movw	r30, r16
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	80 83       	st	Z, r24
    36c6:	1f c0       	rjmp	.+62     	; 0x3706 <pass_theObstacle+0x418>
    36c8:	fe 01       	movw	r30, r28
    36ca:	e5 55       	subi	r30, 0x55	; 85
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	80 e9       	ldi	r24, 0x90	; 144
    36d0:	91 e0       	ldi	r25, 0x01	; 1
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
    36d6:	fe 01       	movw	r30, r28
    36d8:	e5 55       	subi	r30, 0x55	; 85
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	80 81       	ld	r24, Z
    36de:	91 81       	ldd	r25, Z+1	; 0x01
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	f1 f7       	brne	.-4      	; 0x36e0 <pass_theObstacle+0x3f2>
    36e4:	fe 01       	movw	r30, r28
    36e6:	e5 55       	subi	r30, 0x55	; 85
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	91 83       	std	Z+1, r25	; 0x01
    36ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ee:	de 01       	movw	r26, r28
    36f0:	a3 55       	subi	r26, 0x53	; 83
    36f2:	bf 4f       	sbci	r27, 0xFF	; 255
    36f4:	fe 01       	movw	r30, r28
    36f6:	e3 55       	subi	r30, 0x53	; 83
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	80 81       	ld	r24, Z
    36fc:	91 81       	ldd	r25, Z+1	; 0x01
    36fe:	01 97       	sbiw	r24, 0x01	; 1
    3700:	11 96       	adiw	r26, 0x01	; 1
    3702:	9c 93       	st	X, r25
    3704:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3706:	fe 01       	movw	r30, r28
    3708:	e3 55       	subi	r30, 0x53	; 83
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	80 81       	ld	r24, Z
    370e:	91 81       	ldd	r25, Z+1	; 0x01
    3710:	00 97       	sbiw	r24, 0x00	; 0
    3712:	d1 f6       	brne	.-76     	; 0x36c8 <pass_theObstacle+0x3da>
    3714:	f5 c0       	rjmp	.+490    	; 0x3900 <pass_theObstacle+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3716:	8e 01       	movw	r16, r28
    3718:	03 55       	subi	r16, 0x53	; 83
    371a:	1f 4f       	sbci	r17, 0xFF	; 255
    371c:	fe 01       	movw	r30, r28
    371e:	e1 55       	subi	r30, 0x51	; 81
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	60 81       	ld	r22, Z
    3724:	71 81       	ldd	r23, Z+1	; 0x01
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	f8 01       	movw	r30, r16
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	80 83       	st	Z, r24
    3738:	de 01       	movw	r26, r28
    373a:	a7 55       	subi	r26, 0x57	; 87
    373c:	bf 4f       	sbci	r27, 0xFF	; 255
    373e:	fe 01       	movw	r30, r28
    3740:	e3 55       	subi	r30, 0x53	; 83
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	80 81       	ld	r24, Z
    3746:	91 81       	ldd	r25, Z+1	; 0x01
    3748:	11 96       	adiw	r26, 0x01	; 1
    374a:	9c 93       	st	X, r25
    374c:	8e 93       	st	-X, r24
    374e:	fe 01       	movw	r30, r28
    3750:	e7 55       	subi	r30, 0x57	; 87
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	01 97       	sbiw	r24, 0x01	; 1
    375a:	f1 f7       	brne	.-4      	; 0x3758 <pass_theObstacle+0x46a>
    375c:	fe 01       	movw	r30, r28
    375e:	e7 55       	subi	r30, 0x57	; 87
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	91 83       	std	Z+1, r25	; 0x01
    3764:	80 83       	st	Z, r24
    3766:	cc c0       	rjmp	.+408    	; 0x3900 <pass_theObstacle+0x612>
		_delay_ms(500);

		while(left_ir_return==1){
			ret1=IR_PROXIMITY_read(LEFT_IR, &left_ir_return);
    3768:	2f e5       	ldi	r18, 0x5F	; 95
    376a:	32 e0       	ldi	r19, 0x02	; 2
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	b9 01       	movw	r22, r18
    3770:	0e 94 23 12 	call	0x2446	; 0x2446 <IR_PROXIMITY_read>
    3774:	fe 01       	movw	r30, r28
    3776:	eb 52       	subi	r30, 0x2B	; 43
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	80 83       	st	Z, r24
			move_forward();
    377c:	0e 94 32 18 	call	0x3064	; 0x3064 <move_forward>
    3780:	fe 01       	movw	r30, r28
    3782:	eb 55       	subi	r30, 0x5B	; 91
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	80 e0       	ldi	r24, 0x00	; 0
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	aa ef       	ldi	r26, 0xFA	; 250
    378c:	b3 e4       	ldi	r27, 0x43	; 67
    378e:	80 83       	st	Z, r24
    3790:	91 83       	std	Z+1, r25	; 0x01
    3792:	a2 83       	std	Z+2, r26	; 0x02
    3794:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3796:	8e 01       	movw	r16, r28
    3798:	0f 55       	subi	r16, 0x5F	; 95
    379a:	1f 4f       	sbci	r17, 0xFF	; 255
    379c:	fe 01       	movw	r30, r28
    379e:	eb 55       	subi	r30, 0x5B	; 91
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	60 81       	ld	r22, Z
    37a4:	71 81       	ldd	r23, Z+1	; 0x01
    37a6:	82 81       	ldd	r24, Z+2	; 0x02
    37a8:	93 81       	ldd	r25, Z+3	; 0x03
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	4a e7       	ldi	r20, 0x7A	; 122
    37b0:	55 e4       	ldi	r21, 0x45	; 69
    37b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	f8 01       	movw	r30, r16
    37bc:	80 83       	st	Z, r24
    37be:	91 83       	std	Z+1, r25	; 0x01
    37c0:	a2 83       	std	Z+2, r26	; 0x02
    37c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37c4:	fe 01       	movw	r30, r28
    37c6:	ef 55       	subi	r30, 0x5F	; 95
    37c8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ca:	60 81       	ld	r22, Z
    37cc:	71 81       	ldd	r23, Z+1	; 0x01
    37ce:	82 81       	ldd	r24, Z+2	; 0x02
    37d0:	93 81       	ldd	r25, Z+3	; 0x03
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	40 e8       	ldi	r20, 0x80	; 128
    37d8:	5f e3       	ldi	r21, 0x3F	; 63
    37da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37de:	88 23       	and	r24, r24
    37e0:	44 f4       	brge	.+16     	; 0x37f2 <pass_theObstacle+0x504>
		__ticks = 1;
    37e2:	fe 01       	movw	r30, r28
    37e4:	e1 56       	subi	r30, 0x61	; 97
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	91 83       	std	Z+1, r25	; 0x01
    37ee:	80 83       	st	Z, r24
    37f0:	64 c0       	rjmp	.+200    	; 0x38ba <pass_theObstacle+0x5cc>
	else if (__tmp > 65535)
    37f2:	fe 01       	movw	r30, r28
    37f4:	ef 55       	subi	r30, 0x5F	; 95
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	60 81       	ld	r22, Z
    37fa:	71 81       	ldd	r23, Z+1	; 0x01
    37fc:	82 81       	ldd	r24, Z+2	; 0x02
    37fe:	93 81       	ldd	r25, Z+3	; 0x03
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	3f ef       	ldi	r19, 0xFF	; 255
    3804:	4f e7       	ldi	r20, 0x7F	; 127
    3806:	57 e4       	ldi	r21, 0x47	; 71
    3808:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    380c:	18 16       	cp	r1, r24
    380e:	0c f0       	brlt	.+2      	; 0x3812 <pass_theObstacle+0x524>
    3810:	43 c0       	rjmp	.+134    	; 0x3898 <pass_theObstacle+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3812:	fe 01       	movw	r30, r28
    3814:	eb 55       	subi	r30, 0x5B	; 91
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	40 e2       	ldi	r20, 0x20	; 32
    3826:	51 e4       	ldi	r21, 0x41	; 65
    3828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	8e 01       	movw	r16, r28
    3832:	01 56       	subi	r16, 0x61	; 97
    3834:	1f 4f       	sbci	r17, 0xFF	; 255
    3836:	bc 01       	movw	r22, r24
    3838:	cd 01       	movw	r24, r26
    383a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	f8 01       	movw	r30, r16
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	80 83       	st	Z, r24
    3848:	1f c0       	rjmp	.+62     	; 0x3888 <pass_theObstacle+0x59a>
    384a:	fe 01       	movw	r30, r28
    384c:	e3 56       	subi	r30, 0x63	; 99
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	80 e9       	ldi	r24, 0x90	; 144
    3852:	91 e0       	ldi	r25, 0x01	; 1
    3854:	91 83       	std	Z+1, r25	; 0x01
    3856:	80 83       	st	Z, r24
    3858:	fe 01       	movw	r30, r28
    385a:	e3 56       	subi	r30, 0x63	; 99
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 81       	ld	r24, Z
    3860:	91 81       	ldd	r25, Z+1	; 0x01
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	f1 f7       	brne	.-4      	; 0x3862 <pass_theObstacle+0x574>
    3866:	fe 01       	movw	r30, r28
    3868:	e3 56       	subi	r30, 0x63	; 99
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	91 83       	std	Z+1, r25	; 0x01
    386e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3870:	de 01       	movw	r26, r28
    3872:	a1 56       	subi	r26, 0x61	; 97
    3874:	bf 4f       	sbci	r27, 0xFF	; 255
    3876:	fe 01       	movw	r30, r28
    3878:	e1 56       	subi	r30, 0x61	; 97
    387a:	ff 4f       	sbci	r31, 0xFF	; 255
    387c:	80 81       	ld	r24, Z
    387e:	91 81       	ldd	r25, Z+1	; 0x01
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	11 96       	adiw	r26, 0x01	; 1
    3884:	9c 93       	st	X, r25
    3886:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3888:	fe 01       	movw	r30, r28
    388a:	e1 56       	subi	r30, 0x61	; 97
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	80 81       	ld	r24, Z
    3890:	91 81       	ldd	r25, Z+1	; 0x01
    3892:	00 97       	sbiw	r24, 0x00	; 0
    3894:	d1 f6       	brne	.-76     	; 0x384a <pass_theObstacle+0x55c>
    3896:	28 c0       	rjmp	.+80     	; 0x38e8 <pass_theObstacle+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3898:	8e 01       	movw	r16, r28
    389a:	01 56       	subi	r16, 0x61	; 97
    389c:	1f 4f       	sbci	r17, 0xFF	; 255
    389e:	fe 01       	movw	r30, r28
    38a0:	ef 55       	subi	r30, 0x5F	; 95
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	f8 01       	movw	r30, r16
    38b6:	91 83       	std	Z+1, r25	; 0x01
    38b8:	80 83       	st	Z, r24
    38ba:	de 01       	movw	r26, r28
    38bc:	a5 56       	subi	r26, 0x65	; 101
    38be:	bf 4f       	sbci	r27, 0xFF	; 255
    38c0:	fe 01       	movw	r30, r28
    38c2:	e1 56       	subi	r30, 0x61	; 97
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	80 81       	ld	r24, Z
    38c8:	91 81       	ldd	r25, Z+1	; 0x01
    38ca:	11 96       	adiw	r26, 0x01	; 1
    38cc:	9c 93       	st	X, r25
    38ce:	8e 93       	st	-X, r24
    38d0:	fe 01       	movw	r30, r28
    38d2:	e5 56       	subi	r30, 0x65	; 101
    38d4:	ff 4f       	sbci	r31, 0xFF	; 255
    38d6:	80 81       	ld	r24, Z
    38d8:	91 81       	ldd	r25, Z+1	; 0x01
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <pass_theObstacle+0x5ec>
    38de:	fe 01       	movw	r30, r28
    38e0:	e5 56       	subi	r30, 0x65	; 101
    38e2:	ff 4f       	sbci	r31, 0xFF	; 255
    38e4:	91 83       	std	Z+1, r25	; 0x01
    38e6:	80 83       	st	Z, r24
			_delay_ms(500);
			if(ret1 == 0){
    38e8:	fe 01       	movw	r30, r28
    38ea:	eb 52       	subi	r30, 0x2B	; 43
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	80 81       	ld	r24, Z
    38f0:	88 23       	and	r24, r24
    38f2:	31 f4       	brne	.+12     	; 0x3900 <pass_theObstacle+0x612>
				return NOT_OK;
    38f4:	ca 52       	subi	r28, 0x2A	; 42
    38f6:	df 4f       	sbci	r29, 0xFF	; 255
    38f8:	18 82       	st	Y, r1
    38fa:	c6 5d       	subi	r28, 0xD6	; 214
    38fc:	d0 40       	sbci	r29, 0x00	; 0
    38fe:	44 c7       	rjmp	.+3720   	; 0x4788 <pass_theObstacle+0x149a>
		_delay_ms(1000);

		move_forward_slightly_left();
		_delay_ms(500);

		while(left_ir_return==1){
    3900:	80 91 5f 02 	lds	r24, 0x025F
    3904:	81 30       	cpi	r24, 0x01	; 1
    3906:	09 f4       	brne	.+2      	; 0x390a <pass_theObstacle+0x61c>
    3908:	2f cf       	rjmp	.-418    	; 0x3768 <pass_theObstacle+0x47a>
			if(ret1 == 0){
				return NOT_OK;
			}
		}

		move_forward_slightly_left();
    390a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <move_forward_slightly_left>
    390e:	fe 01       	movw	r30, r28
    3910:	e9 56       	subi	r30, 0x69	; 105
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	aa ef       	ldi	r26, 0xFA	; 250
    391a:	b3 e4       	ldi	r27, 0x43	; 67
    391c:	80 83       	st	Z, r24
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	a2 83       	std	Z+2, r26	; 0x02
    3922:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3924:	8e 01       	movw	r16, r28
    3926:	0d 56       	subi	r16, 0x6D	; 109
    3928:	1f 4f       	sbci	r17, 0xFF	; 255
    392a:	fe 01       	movw	r30, r28
    392c:	e9 56       	subi	r30, 0x69	; 105
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	60 81       	ld	r22, Z
    3932:	71 81       	ldd	r23, Z+1	; 0x01
    3934:	82 81       	ldd	r24, Z+2	; 0x02
    3936:	93 81       	ldd	r25, Z+3	; 0x03
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	4a e7       	ldi	r20, 0x7A	; 122
    393e:	55 e4       	ldi	r21, 0x45	; 69
    3940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	f8 01       	movw	r30, r16
    394a:	80 83       	st	Z, r24
    394c:	91 83       	std	Z+1, r25	; 0x01
    394e:	a2 83       	std	Z+2, r26	; 0x02
    3950:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3952:	fe 01       	movw	r30, r28
    3954:	ed 56       	subi	r30, 0x6D	; 109
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	60 81       	ld	r22, Z
    395a:	71 81       	ldd	r23, Z+1	; 0x01
    395c:	82 81       	ldd	r24, Z+2	; 0x02
    395e:	93 81       	ldd	r25, Z+3	; 0x03
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	40 e8       	ldi	r20, 0x80	; 128
    3966:	5f e3       	ldi	r21, 0x3F	; 63
    3968:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    396c:	88 23       	and	r24, r24
    396e:	44 f4       	brge	.+16     	; 0x3980 <pass_theObstacle+0x692>
		__ticks = 1;
    3970:	fe 01       	movw	r30, r28
    3972:	ef 56       	subi	r30, 0x6F	; 111
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	91 83       	std	Z+1, r25	; 0x01
    397c:	80 83       	st	Z, r24
    397e:	64 c0       	rjmp	.+200    	; 0x3a48 <pass_theObstacle+0x75a>
	else if (__tmp > 65535)
    3980:	fe 01       	movw	r30, r28
    3982:	ed 56       	subi	r30, 0x6D	; 109
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	60 81       	ld	r22, Z
    3988:	71 81       	ldd	r23, Z+1	; 0x01
    398a:	82 81       	ldd	r24, Z+2	; 0x02
    398c:	93 81       	ldd	r25, Z+3	; 0x03
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	3f ef       	ldi	r19, 0xFF	; 255
    3992:	4f e7       	ldi	r20, 0x7F	; 127
    3994:	57 e4       	ldi	r21, 0x47	; 71
    3996:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    399a:	18 16       	cp	r1, r24
    399c:	0c f0       	brlt	.+2      	; 0x39a0 <pass_theObstacle+0x6b2>
    399e:	43 c0       	rjmp	.+134    	; 0x3a26 <pass_theObstacle+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a0:	fe 01       	movw	r30, r28
    39a2:	e9 56       	subi	r30, 0x69	; 105
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	60 81       	ld	r22, Z
    39a8:	71 81       	ldd	r23, Z+1	; 0x01
    39aa:	82 81       	ldd	r24, Z+2	; 0x02
    39ac:	93 81       	ldd	r25, Z+3	; 0x03
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	40 e2       	ldi	r20, 0x20	; 32
    39b4:	51 e4       	ldi	r21, 0x41	; 65
    39b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	8e 01       	movw	r16, r28
    39c0:	0f 56       	subi	r16, 0x6F	; 111
    39c2:	1f 4f       	sbci	r17, 0xFF	; 255
    39c4:	bc 01       	movw	r22, r24
    39c6:	cd 01       	movw	r24, r26
    39c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	f8 01       	movw	r30, r16
    39d2:	91 83       	std	Z+1, r25	; 0x01
    39d4:	80 83       	st	Z, r24
    39d6:	1f c0       	rjmp	.+62     	; 0x3a16 <pass_theObstacle+0x728>
    39d8:	fe 01       	movw	r30, r28
    39da:	e1 57       	subi	r30, 0x71	; 113
    39dc:	ff 4f       	sbci	r31, 0xFF	; 255
    39de:	80 e9       	ldi	r24, 0x90	; 144
    39e0:	91 e0       	ldi	r25, 0x01	; 1
    39e2:	91 83       	std	Z+1, r25	; 0x01
    39e4:	80 83       	st	Z, r24
    39e6:	fe 01       	movw	r30, r28
    39e8:	e1 57       	subi	r30, 0x71	; 113
    39ea:	ff 4f       	sbci	r31, 0xFF	; 255
    39ec:	80 81       	ld	r24, Z
    39ee:	91 81       	ldd	r25, Z+1	; 0x01
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	f1 f7       	brne	.-4      	; 0x39f0 <pass_theObstacle+0x702>
    39f4:	fe 01       	movw	r30, r28
    39f6:	e1 57       	subi	r30, 0x71	; 113
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	91 83       	std	Z+1, r25	; 0x01
    39fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39fe:	de 01       	movw	r26, r28
    3a00:	af 56       	subi	r26, 0x6F	; 111
    3a02:	bf 4f       	sbci	r27, 0xFF	; 255
    3a04:	fe 01       	movw	r30, r28
    3a06:	ef 56       	subi	r30, 0x6F	; 111
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 81       	ld	r24, Z
    3a0c:	91 81       	ldd	r25, Z+1	; 0x01
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	11 96       	adiw	r26, 0x01	; 1
    3a12:	9c 93       	st	X, r25
    3a14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a16:	fe 01       	movw	r30, r28
    3a18:	ef 56       	subi	r30, 0x6F	; 111
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	80 81       	ld	r24, Z
    3a1e:	91 81       	ldd	r25, Z+1	; 0x01
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	d1 f6       	brne	.-76     	; 0x39d8 <pass_theObstacle+0x6ea>
    3a24:	27 c0       	rjmp	.+78     	; 0x3a74 <pass_theObstacle+0x786>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a26:	8e 01       	movw	r16, r28
    3a28:	0f 56       	subi	r16, 0x6F	; 111
    3a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	ed 56       	subi	r30, 0x6D	; 109
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	60 81       	ld	r22, Z
    3a34:	71 81       	ldd	r23, Z+1	; 0x01
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	93 81       	ldd	r25, Z+3	; 0x03
    3a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	f8 01       	movw	r30, r16
    3a44:	91 83       	std	Z+1, r25	; 0x01
    3a46:	80 83       	st	Z, r24
    3a48:	de 01       	movw	r26, r28
    3a4a:	a3 57       	subi	r26, 0x73	; 115
    3a4c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a4e:	fe 01       	movw	r30, r28
    3a50:	ef 56       	subi	r30, 0x6F	; 111
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	80 81       	ld	r24, Z
    3a56:	91 81       	ldd	r25, Z+1	; 0x01
    3a58:	8d 93       	st	X+, r24
    3a5a:	9c 93       	st	X, r25
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	e3 57       	subi	r30, 0x73	; 115
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	80 81       	ld	r24, Z
    3a64:	91 81       	ldd	r25, Z+1	; 0x01
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <pass_theObstacle+0x778>
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	e3 57       	subi	r30, 0x73	; 115
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	80 83       	st	Z, r24
		_delay_ms(500);
		move_forward();
    3a74:	0e 94 32 18 	call	0x3064	; 0x3064 <move_forward>

		lcd_moveCursor(0, 0);
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
		lcd_send_string("passed obstacle");
    3a84:	8b ed       	ldi	r24, 0xDB	; 219
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
    3a8c:	77 c6       	rjmp	.+3310   	; 0x477c <pass_theObstacle+0x148e>
	}
	else if( (right_ir_return==1) && (left_ir_return==0) && (back_ir_return==0) ){	//back and left are empty
    3a8e:	80 91 60 02 	lds	r24, 0x0260
    3a92:	81 30       	cpi	r24, 0x01	; 1
    3a94:	09 f0       	breq	.+2      	; 0x3a98 <pass_theObstacle+0x7aa>
    3a96:	da c3       	rjmp	.+1972   	; 0x424c <pass_theObstacle+0xf5e>
    3a98:	80 91 5f 02 	lds	r24, 0x025F
    3a9c:	88 23       	and	r24, r24
    3a9e:	09 f0       	breq	.+2      	; 0x3aa2 <pass_theObstacle+0x7b4>
    3aa0:	d5 c3       	rjmp	.+1962   	; 0x424c <pass_theObstacle+0xf5e>
    3aa2:	80 91 5d 02 	lds	r24, 0x025D
    3aa6:	88 23       	and	r24, r24
    3aa8:	09 f0       	breq	.+2      	; 0x3aac <pass_theObstacle+0x7be>
    3aaa:	d0 c3       	rjmp	.+1952   	; 0x424c <pass_theObstacle+0xf5e>
		move_backward();
    3aac:	0e 94 67 18 	call	0x30ce	; 0x30ce <move_backward>
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e7 57       	subi	r30, 0x77	; 119
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	aa ef       	ldi	r26, 0xFA	; 250
    3abc:	b3 e4       	ldi	r27, 0x43	; 67
    3abe:	80 83       	st	Z, r24
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	a2 83       	std	Z+2, r26	; 0x02
    3ac4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac6:	8e 01       	movw	r16, r28
    3ac8:	0b 57       	subi	r16, 0x7B	; 123
    3aca:	1f 4f       	sbci	r17, 0xFF	; 255
    3acc:	fe 01       	movw	r30, r28
    3ace:	e7 57       	subi	r30, 0x77	; 119
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	60 81       	ld	r22, Z
    3ad4:	71 81       	ldd	r23, Z+1	; 0x01
    3ad6:	82 81       	ldd	r24, Z+2	; 0x02
    3ad8:	93 81       	ldd	r25, Z+3	; 0x03
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	4a e7       	ldi	r20, 0x7A	; 122
    3ae0:	55 e4       	ldi	r21, 0x45	; 69
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	f8 01       	movw	r30, r16
    3aec:	80 83       	st	Z, r24
    3aee:	91 83       	std	Z+1, r25	; 0x01
    3af0:	a2 83       	std	Z+2, r26	; 0x02
    3af2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3af4:	fe 01       	movw	r30, r28
    3af6:	eb 57       	subi	r30, 0x7B	; 123
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	60 81       	ld	r22, Z
    3afc:	71 81       	ldd	r23, Z+1	; 0x01
    3afe:	82 81       	ldd	r24, Z+2	; 0x02
    3b00:	93 81       	ldd	r25, Z+3	; 0x03
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	40 e8       	ldi	r20, 0x80	; 128
    3b08:	5f e3       	ldi	r21, 0x3F	; 63
    3b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b0e:	88 23       	and	r24, r24
    3b10:	44 f4       	brge	.+16     	; 0x3b22 <pass_theObstacle+0x834>
		__ticks = 1;
    3b12:	fe 01       	movw	r30, r28
    3b14:	ed 57       	subi	r30, 0x7D	; 125
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	80 83       	st	Z, r24
    3b20:	64 c0       	rjmp	.+200    	; 0x3bea <pass_theObstacle+0x8fc>
	else if (__tmp > 65535)
    3b22:	fe 01       	movw	r30, r28
    3b24:	eb 57       	subi	r30, 0x7B	; 123
    3b26:	ff 4f       	sbci	r31, 0xFF	; 255
    3b28:	60 81       	ld	r22, Z
    3b2a:	71 81       	ldd	r23, Z+1	; 0x01
    3b2c:	82 81       	ldd	r24, Z+2	; 0x02
    3b2e:	93 81       	ldd	r25, Z+3	; 0x03
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	3f ef       	ldi	r19, 0xFF	; 255
    3b34:	4f e7       	ldi	r20, 0x7F	; 127
    3b36:	57 e4       	ldi	r21, 0x47	; 71
    3b38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b3c:	18 16       	cp	r1, r24
    3b3e:	0c f0       	brlt	.+2      	; 0x3b42 <pass_theObstacle+0x854>
    3b40:	43 c0       	rjmp	.+134    	; 0x3bc8 <pass_theObstacle+0x8da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b42:	fe 01       	movw	r30, r28
    3b44:	e7 57       	subi	r30, 0x77	; 119
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e2       	ldi	r20, 0x20	; 32
    3b56:	51 e4       	ldi	r21, 0x41	; 65
    3b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	8e 01       	movw	r16, r28
    3b62:	0d 57       	subi	r16, 0x7D	; 125
    3b64:	1f 4f       	sbci	r17, 0xFF	; 255
    3b66:	bc 01       	movw	r22, r24
    3b68:	cd 01       	movw	r24, r26
    3b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	f8 01       	movw	r30, r16
    3b74:	91 83       	std	Z+1, r25	; 0x01
    3b76:	80 83       	st	Z, r24
    3b78:	1f c0       	rjmp	.+62     	; 0x3bb8 <pass_theObstacle+0x8ca>
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	ef 57       	subi	r30, 0x7F	; 127
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	80 e9       	ldi	r24, 0x90	; 144
    3b82:	91 e0       	ldi	r25, 0x01	; 1
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	80 83       	st	Z, r24
    3b88:	fe 01       	movw	r30, r28
    3b8a:	ef 57       	subi	r30, 0x7F	; 127
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	80 81       	ld	r24, Z
    3b90:	91 81       	ldd	r25, Z+1	; 0x01
    3b92:	01 97       	sbiw	r24, 0x01	; 1
    3b94:	f1 f7       	brne	.-4      	; 0x3b92 <pass_theObstacle+0x8a4>
    3b96:	fe 01       	movw	r30, r28
    3b98:	ef 57       	subi	r30, 0x7F	; 127
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	91 83       	std	Z+1, r25	; 0x01
    3b9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba0:	de 01       	movw	r26, r28
    3ba2:	ad 57       	subi	r26, 0x7D	; 125
    3ba4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	ed 57       	subi	r30, 0x7D	; 125
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	11 96       	adiw	r26, 0x01	; 1
    3bb4:	9c 93       	st	X, r25
    3bb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb8:	fe 01       	movw	r30, r28
    3bba:	ed 57       	subi	r30, 0x7D	; 125
    3bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbe:	80 81       	ld	r24, Z
    3bc0:	91 81       	ldd	r25, Z+1	; 0x01
    3bc2:	00 97       	sbiw	r24, 0x00	; 0
    3bc4:	d1 f6       	brne	.-76     	; 0x3b7a <pass_theObstacle+0x88c>
    3bc6:	27 c0       	rjmp	.+78     	; 0x3c16 <pass_theObstacle+0x928>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc8:	8e 01       	movw	r16, r28
    3bca:	0d 57       	subi	r16, 0x7D	; 125
    3bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bce:	fe 01       	movw	r30, r28
    3bd0:	eb 57       	subi	r30, 0x7B	; 123
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	60 81       	ld	r22, Z
    3bd6:	71 81       	ldd	r23, Z+1	; 0x01
    3bd8:	82 81       	ldd	r24, Z+2	; 0x02
    3bda:	93 81       	ldd	r25, Z+3	; 0x03
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	f8 01       	movw	r30, r16
    3be6:	91 83       	std	Z+1, r25	; 0x01
    3be8:	80 83       	st	Z, r24
    3bea:	de 01       	movw	r26, r28
    3bec:	a1 58       	subi	r26, 0x81	; 129
    3bee:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	ed 57       	subi	r30, 0x7D	; 125
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	80 81       	ld	r24, Z
    3bf8:	91 81       	ldd	r25, Z+1	; 0x01
    3bfa:	8d 93       	st	X+, r24
    3bfc:	9c 93       	st	X, r25
    3bfe:	fe 01       	movw	r30, r28
    3c00:	e1 58       	subi	r30, 0x81	; 129
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	80 81       	ld	r24, Z
    3c06:	91 81       	ldd	r25, Z+1	; 0x01
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <pass_theObstacle+0x91a>
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e1 58       	subi	r30, 0x81	; 129
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	91 83       	std	Z+1, r25	; 0x01
    3c14:	80 83       	st	Z, r24
		_delay_ms(500);

		move_forward_slightly_left();
    3c16:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <move_forward_slightly_left>
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e5 58       	subi	r30, 0x85	; 133
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	aa e7       	ldi	r26, 0x7A	; 122
    3c26:	b4 e4       	ldi	r27, 0x44	; 68
    3c28:	80 83       	st	Z, r24
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	a2 83       	std	Z+2, r26	; 0x02
    3c2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c30:	8e 01       	movw	r16, r28
    3c32:	09 58       	subi	r16, 0x89	; 137
    3c34:	1f 4f       	sbci	r17, 0xFF	; 255
    3c36:	fe 01       	movw	r30, r28
    3c38:	e5 58       	subi	r30, 0x85	; 133
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	60 81       	ld	r22, Z
    3c3e:	71 81       	ldd	r23, Z+1	; 0x01
    3c40:	82 81       	ldd	r24, Z+2	; 0x02
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	4a e7       	ldi	r20, 0x7A	; 122
    3c4a:	55 e4       	ldi	r21, 0x45	; 69
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	f8 01       	movw	r30, r16
    3c56:	80 83       	st	Z, r24
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	a2 83       	std	Z+2, r26	; 0x02
    3c5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e9 58       	subi	r30, 0x89	; 137
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	60 81       	ld	r22, Z
    3c66:	71 81       	ldd	r23, Z+1	; 0x01
    3c68:	82 81       	ldd	r24, Z+2	; 0x02
    3c6a:	93 81       	ldd	r25, Z+3	; 0x03
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e8       	ldi	r20, 0x80	; 128
    3c72:	5f e3       	ldi	r21, 0x3F	; 63
    3c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c78:	88 23       	and	r24, r24
    3c7a:	44 f4       	brge	.+16     	; 0x3c8c <pass_theObstacle+0x99e>
		__ticks = 1;
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	eb 58       	subi	r30, 0x8B	; 139
    3c80:	ff 4f       	sbci	r31, 0xFF	; 255
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24
    3c8a:	64 c0       	rjmp	.+200    	; 0x3d54 <pass_theObstacle+0xa66>
	else if (__tmp > 65535)
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e9 58       	subi	r30, 0x89	; 137
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	60 81       	ld	r22, Z
    3c94:	71 81       	ldd	r23, Z+1	; 0x01
    3c96:	82 81       	ldd	r24, Z+2	; 0x02
    3c98:	93 81       	ldd	r25, Z+3	; 0x03
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	3f ef       	ldi	r19, 0xFF	; 255
    3c9e:	4f e7       	ldi	r20, 0x7F	; 127
    3ca0:	57 e4       	ldi	r21, 0x47	; 71
    3ca2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ca6:	18 16       	cp	r1, r24
    3ca8:	0c f0       	brlt	.+2      	; 0x3cac <pass_theObstacle+0x9be>
    3caa:	43 c0       	rjmp	.+134    	; 0x3d32 <pass_theObstacle+0xa44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cac:	fe 01       	movw	r30, r28
    3cae:	e5 58       	subi	r30, 0x85	; 133
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	60 81       	ld	r22, Z
    3cb4:	71 81       	ldd	r23, Z+1	; 0x01
    3cb6:	82 81       	ldd	r24, Z+2	; 0x02
    3cb8:	93 81       	ldd	r25, Z+3	; 0x03
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	40 e2       	ldi	r20, 0x20	; 32
    3cc0:	51 e4       	ldi	r21, 0x41	; 65
    3cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	8e 01       	movw	r16, r28
    3ccc:	0b 58       	subi	r16, 0x8B	; 139
    3cce:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	f8 01       	movw	r30, r16
    3cde:	91 83       	std	Z+1, r25	; 0x01
    3ce0:	80 83       	st	Z, r24
    3ce2:	1f c0       	rjmp	.+62     	; 0x3d22 <pass_theObstacle+0xa34>
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	ed 58       	subi	r30, 0x8D	; 141
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	80 e9       	ldi	r24, 0x90	; 144
    3cec:	91 e0       	ldi	r25, 0x01	; 1
    3cee:	91 83       	std	Z+1, r25	; 0x01
    3cf0:	80 83       	st	Z, r24
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	ed 58       	subi	r30, 0x8D	; 141
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	80 81       	ld	r24, Z
    3cfa:	91 81       	ldd	r25, Z+1	; 0x01
    3cfc:	01 97       	sbiw	r24, 0x01	; 1
    3cfe:	f1 f7       	brne	.-4      	; 0x3cfc <pass_theObstacle+0xa0e>
    3d00:	fe 01       	movw	r30, r28
    3d02:	ed 58       	subi	r30, 0x8D	; 141
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	91 83       	std	Z+1, r25	; 0x01
    3d08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0a:	de 01       	movw	r26, r28
    3d0c:	ab 58       	subi	r26, 0x8B	; 139
    3d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d10:	fe 01       	movw	r30, r28
    3d12:	eb 58       	subi	r30, 0x8B	; 139
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	80 81       	ld	r24, Z
    3d18:	91 81       	ldd	r25, Z+1	; 0x01
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	11 96       	adiw	r26, 0x01	; 1
    3d1e:	9c 93       	st	X, r25
    3d20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d22:	fe 01       	movw	r30, r28
    3d24:	eb 58       	subi	r30, 0x8B	; 139
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	80 81       	ld	r24, Z
    3d2a:	91 81       	ldd	r25, Z+1	; 0x01
    3d2c:	00 97       	sbiw	r24, 0x00	; 0
    3d2e:	d1 f6       	brne	.-76     	; 0x3ce4 <pass_theObstacle+0x9f6>
    3d30:	27 c0       	rjmp	.+78     	; 0x3d80 <pass_theObstacle+0xa92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d32:	8e 01       	movw	r16, r28
    3d34:	0b 58       	subi	r16, 0x8B	; 139
    3d36:	1f 4f       	sbci	r17, 0xFF	; 255
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e9 58       	subi	r30, 0x89	; 137
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	60 81       	ld	r22, Z
    3d40:	71 81       	ldd	r23, Z+1	; 0x01
    3d42:	82 81       	ldd	r24, Z+2	; 0x02
    3d44:	93 81       	ldd	r25, Z+3	; 0x03
    3d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	f8 01       	movw	r30, r16
    3d50:	91 83       	std	Z+1, r25	; 0x01
    3d52:	80 83       	st	Z, r24
    3d54:	de 01       	movw	r26, r28
    3d56:	af 58       	subi	r26, 0x8F	; 143
    3d58:	bf 4f       	sbci	r27, 0xFF	; 255
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	eb 58       	subi	r30, 0x8B	; 139
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	80 81       	ld	r24, Z
    3d62:	91 81       	ldd	r25, Z+1	; 0x01
    3d64:	8d 93       	st	X+, r24
    3d66:	9c 93       	st	X, r25
    3d68:	fe 01       	movw	r30, r28
    3d6a:	ef 58       	subi	r30, 0x8F	; 143
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	80 81       	ld	r24, Z
    3d70:	91 81       	ldd	r25, Z+1	; 0x01
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <pass_theObstacle+0xa84>
    3d76:	fe 01       	movw	r30, r28
    3d78:	ef 58       	subi	r30, 0x8F	; 143
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	80 83       	st	Z, r24
		_delay_ms(1000);

		move_forward_slightly_right();
    3d80:	0e 94 9c 18 	call	0x3138	; 0x3138 <move_forward_slightly_right>
    3d84:	fe 01       	movw	r30, r28
    3d86:	e3 59       	subi	r30, 0x93	; 147
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	80 e0       	ldi	r24, 0x00	; 0
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	aa ef       	ldi	r26, 0xFA	; 250
    3d90:	b3 e4       	ldi	r27, 0x43	; 67
    3d92:	80 83       	st	Z, r24
    3d94:	91 83       	std	Z+1, r25	; 0x01
    3d96:	a2 83       	std	Z+2, r26	; 0x02
    3d98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9a:	8e 01       	movw	r16, r28
    3d9c:	07 59       	subi	r16, 0x97	; 151
    3d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3da0:	fe 01       	movw	r30, r28
    3da2:	e3 59       	subi	r30, 0x93	; 147
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	60 81       	ld	r22, Z
    3da8:	71 81       	ldd	r23, Z+1	; 0x01
    3daa:	82 81       	ldd	r24, Z+2	; 0x02
    3dac:	93 81       	ldd	r25, Z+3	; 0x03
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	4a e7       	ldi	r20, 0x7A	; 122
    3db4:	55 e4       	ldi	r21, 0x45	; 69
    3db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	f8 01       	movw	r30, r16
    3dc0:	80 83       	st	Z, r24
    3dc2:	91 83       	std	Z+1, r25	; 0x01
    3dc4:	a2 83       	std	Z+2, r26	; 0x02
    3dc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e7 59       	subi	r30, 0x97	; 151
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	60 81       	ld	r22, Z
    3dd0:	71 81       	ldd	r23, Z+1	; 0x01
    3dd2:	82 81       	ldd	r24, Z+2	; 0x02
    3dd4:	93 81       	ldd	r25, Z+3	; 0x03
    3dd6:	20 e0       	ldi	r18, 0x00	; 0
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	40 e8       	ldi	r20, 0x80	; 128
    3ddc:	5f e3       	ldi	r21, 0x3F	; 63
    3dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de2:	88 23       	and	r24, r24
    3de4:	44 f4       	brge	.+16     	; 0x3df6 <pass_theObstacle+0xb08>
		__ticks = 1;
    3de6:	fe 01       	movw	r30, r28
    3de8:	e9 59       	subi	r30, 0x99	; 153
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	91 83       	std	Z+1, r25	; 0x01
    3df2:	80 83       	st	Z, r24
    3df4:	64 c0       	rjmp	.+200    	; 0x3ebe <pass_theObstacle+0xbd0>
	else if (__tmp > 65535)
    3df6:	fe 01       	movw	r30, r28
    3df8:	e7 59       	subi	r30, 0x97	; 151
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	60 81       	ld	r22, Z
    3dfe:	71 81       	ldd	r23, Z+1	; 0x01
    3e00:	82 81       	ldd	r24, Z+2	; 0x02
    3e02:	93 81       	ldd	r25, Z+3	; 0x03
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	3f ef       	ldi	r19, 0xFF	; 255
    3e08:	4f e7       	ldi	r20, 0x7F	; 127
    3e0a:	57 e4       	ldi	r21, 0x47	; 71
    3e0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e10:	18 16       	cp	r1, r24
    3e12:	0c f0       	brlt	.+2      	; 0x3e16 <pass_theObstacle+0xb28>
    3e14:	43 c0       	rjmp	.+134    	; 0x3e9c <pass_theObstacle+0xbae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e16:	fe 01       	movw	r30, r28
    3e18:	e3 59       	subi	r30, 0x93	; 147
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	60 81       	ld	r22, Z
    3e1e:	71 81       	ldd	r23, Z+1	; 0x01
    3e20:	82 81       	ldd	r24, Z+2	; 0x02
    3e22:	93 81       	ldd	r25, Z+3	; 0x03
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	40 e2       	ldi	r20, 0x20	; 32
    3e2a:	51 e4       	ldi	r21, 0x41	; 65
    3e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	8e 01       	movw	r16, r28
    3e36:	09 59       	subi	r16, 0x99	; 153
    3e38:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3a:	bc 01       	movw	r22, r24
    3e3c:	cd 01       	movw	r24, r26
    3e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	f8 01       	movw	r30, r16
    3e48:	91 83       	std	Z+1, r25	; 0x01
    3e4a:	80 83       	st	Z, r24
    3e4c:	1f c0       	rjmp	.+62     	; 0x3e8c <pass_theObstacle+0xb9e>
    3e4e:	fe 01       	movw	r30, r28
    3e50:	eb 59       	subi	r30, 0x9B	; 155
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	80 e9       	ldi	r24, 0x90	; 144
    3e56:	91 e0       	ldi	r25, 0x01	; 1
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	eb 59       	subi	r30, 0x9B	; 155
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	80 81       	ld	r24, Z
    3e64:	91 81       	ldd	r25, Z+1	; 0x01
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	f1 f7       	brne	.-4      	; 0x3e66 <pass_theObstacle+0xb78>
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	eb 59       	subi	r30, 0x9B	; 155
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	91 83       	std	Z+1, r25	; 0x01
    3e72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e74:	de 01       	movw	r26, r28
    3e76:	a9 59       	subi	r26, 0x99	; 153
    3e78:	bf 4f       	sbci	r27, 0xFF	; 255
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	e9 59       	subi	r30, 0x99	; 153
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	80 81       	ld	r24, Z
    3e82:	91 81       	ldd	r25, Z+1	; 0x01
    3e84:	01 97       	sbiw	r24, 0x01	; 1
    3e86:	11 96       	adiw	r26, 0x01	; 1
    3e88:	9c 93       	st	X, r25
    3e8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	e9 59       	subi	r30, 0x99	; 153
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	80 81       	ld	r24, Z
    3e94:	91 81       	ldd	r25, Z+1	; 0x01
    3e96:	00 97       	sbiw	r24, 0x00	; 0
    3e98:	d1 f6       	brne	.-76     	; 0x3e4e <pass_theObstacle+0xb60>
    3e9a:	f5 c0       	rjmp	.+490    	; 0x4086 <pass_theObstacle+0xd98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e9c:	8e 01       	movw	r16, r28
    3e9e:	09 59       	subi	r16, 0x99	; 153
    3ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea2:	fe 01       	movw	r30, r28
    3ea4:	e7 59       	subi	r30, 0x97	; 151
    3ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea8:	60 81       	ld	r22, Z
    3eaa:	71 81       	ldd	r23, Z+1	; 0x01
    3eac:	82 81       	ldd	r24, Z+2	; 0x02
    3eae:	93 81       	ldd	r25, Z+3	; 0x03
    3eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	f8 01       	movw	r30, r16
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	80 83       	st	Z, r24
    3ebe:	de 01       	movw	r26, r28
    3ec0:	ad 59       	subi	r26, 0x9D	; 157
    3ec2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e9 59       	subi	r30, 0x99	; 153
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	80 81       	ld	r24, Z
    3ecc:	91 81       	ldd	r25, Z+1	; 0x01
    3ece:	11 96       	adiw	r26, 0x01	; 1
    3ed0:	9c 93       	st	X, r25
    3ed2:	8e 93       	st	-X, r24
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	ed 59       	subi	r30, 0x9D	; 157
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	01 97       	sbiw	r24, 0x01	; 1
    3ee0:	f1 f7       	brne	.-4      	; 0x3ede <pass_theObstacle+0xbf0>
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	ed 59       	subi	r30, 0x9D	; 157
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	91 83       	std	Z+1, r25	; 0x01
    3eea:	80 83       	st	Z, r24
    3eec:	cc c0       	rjmp	.+408    	; 0x4086 <pass_theObstacle+0xd98>
		_delay_ms(500);

		while(right_ir_return==1){
			ret2=IR_PROXIMITY_read(RIGHT_IR, &right_ir_return);
    3eee:	20 e6       	ldi	r18, 0x60	; 96
    3ef0:	32 e0       	ldi	r19, 0x02	; 2
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	b9 01       	movw	r22, r18
    3ef6:	0e 94 23 12 	call	0x2446	; 0x2446 <IR_PROXIMITY_read>
    3efa:	fe 01       	movw	r30, r28
    3efc:	ec 52       	subi	r30, 0x2C	; 44
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	80 83       	st	Z, r24
			move_forward();
    3f02:	0e 94 32 18 	call	0x3064	; 0x3064 <move_forward>
    3f06:	fe 01       	movw	r30, r28
    3f08:	e1 5a       	subi	r30, 0xA1	; 161
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	aa ef       	ldi	r26, 0xFA	; 250
    3f12:	b3 e4       	ldi	r27, 0x43	; 67
    3f14:	80 83       	st	Z, r24
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	a2 83       	std	Z+2, r26	; 0x02
    3f1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f1c:	8e 01       	movw	r16, r28
    3f1e:	05 5a       	subi	r16, 0xA5	; 165
    3f20:	1f 4f       	sbci	r17, 0xFF	; 255
    3f22:	fe 01       	movw	r30, r28
    3f24:	e1 5a       	subi	r30, 0xA1	; 161
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	60 81       	ld	r22, Z
    3f2a:	71 81       	ldd	r23, Z+1	; 0x01
    3f2c:	82 81       	ldd	r24, Z+2	; 0x02
    3f2e:	93 81       	ldd	r25, Z+3	; 0x03
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	4a e7       	ldi	r20, 0x7A	; 122
    3f36:	55 e4       	ldi	r21, 0x45	; 69
    3f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	f8 01       	movw	r30, r16
    3f42:	80 83       	st	Z, r24
    3f44:	91 83       	std	Z+1, r25	; 0x01
    3f46:	a2 83       	std	Z+2, r26	; 0x02
    3f48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	e5 5a       	subi	r30, 0xA5	; 165
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	60 81       	ld	r22, Z
    3f52:	71 81       	ldd	r23, Z+1	; 0x01
    3f54:	82 81       	ldd	r24, Z+2	; 0x02
    3f56:	93 81       	ldd	r25, Z+3	; 0x03
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e8       	ldi	r20, 0x80	; 128
    3f5e:	5f e3       	ldi	r21, 0x3F	; 63
    3f60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f64:	88 23       	and	r24, r24
    3f66:	44 f4       	brge	.+16     	; 0x3f78 <pass_theObstacle+0xc8a>
		__ticks = 1;
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e7 5a       	subi	r30, 0xA7	; 167
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	91 83       	std	Z+1, r25	; 0x01
    3f74:	80 83       	st	Z, r24
    3f76:	64 c0       	rjmp	.+200    	; 0x4040 <pass_theObstacle+0xd52>
	else if (__tmp > 65535)
    3f78:	fe 01       	movw	r30, r28
    3f7a:	e5 5a       	subi	r30, 0xA5	; 165
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	60 81       	ld	r22, Z
    3f80:	71 81       	ldd	r23, Z+1	; 0x01
    3f82:	82 81       	ldd	r24, Z+2	; 0x02
    3f84:	93 81       	ldd	r25, Z+3	; 0x03
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	3f ef       	ldi	r19, 0xFF	; 255
    3f8a:	4f e7       	ldi	r20, 0x7F	; 127
    3f8c:	57 e4       	ldi	r21, 0x47	; 71
    3f8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f92:	18 16       	cp	r1, r24
    3f94:	0c f0       	brlt	.+2      	; 0x3f98 <pass_theObstacle+0xcaa>
    3f96:	43 c0       	rjmp	.+134    	; 0x401e <pass_theObstacle+0xd30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f98:	fe 01       	movw	r30, r28
    3f9a:	e1 5a       	subi	r30, 0xA1	; 161
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	60 81       	ld	r22, Z
    3fa0:	71 81       	ldd	r23, Z+1	; 0x01
    3fa2:	82 81       	ldd	r24, Z+2	; 0x02
    3fa4:	93 81       	ldd	r25, Z+3	; 0x03
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	40 e2       	ldi	r20, 0x20	; 32
    3fac:	51 e4       	ldi	r21, 0x41	; 65
    3fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	8e 01       	movw	r16, r28
    3fb8:	07 5a       	subi	r16, 0xA7	; 167
    3fba:	1f 4f       	sbci	r17, 0xFF	; 255
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	cd 01       	movw	r24, r26
    3fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	f8 01       	movw	r30, r16
    3fca:	91 83       	std	Z+1, r25	; 0x01
    3fcc:	80 83       	st	Z, r24
    3fce:	1f c0       	rjmp	.+62     	; 0x400e <pass_theObstacle+0xd20>
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e9 5a       	subi	r30, 0xA9	; 169
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	80 e9       	ldi	r24, 0x90	; 144
    3fd8:	91 e0       	ldi	r25, 0x01	; 1
    3fda:	91 83       	std	Z+1, r25	; 0x01
    3fdc:	80 83       	st	Z, r24
    3fde:	fe 01       	movw	r30, r28
    3fe0:	e9 5a       	subi	r30, 0xA9	; 169
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	80 81       	ld	r24, Z
    3fe6:	91 81       	ldd	r25, Z+1	; 0x01
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	f1 f7       	brne	.-4      	; 0x3fe8 <pass_theObstacle+0xcfa>
    3fec:	fe 01       	movw	r30, r28
    3fee:	e9 5a       	subi	r30, 0xA9	; 169
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	91 83       	std	Z+1, r25	; 0x01
    3ff4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff6:	de 01       	movw	r26, r28
    3ff8:	a7 5a       	subi	r26, 0xA7	; 167
    3ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e7 5a       	subi	r30, 0xA7	; 167
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	80 81       	ld	r24, Z
    4004:	91 81       	ldd	r25, Z+1	; 0x01
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	11 96       	adiw	r26, 0x01	; 1
    400a:	9c 93       	st	X, r25
    400c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400e:	fe 01       	movw	r30, r28
    4010:	e7 5a       	subi	r30, 0xA7	; 167
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	80 81       	ld	r24, Z
    4016:	91 81       	ldd	r25, Z+1	; 0x01
    4018:	00 97       	sbiw	r24, 0x00	; 0
    401a:	d1 f6       	brne	.-76     	; 0x3fd0 <pass_theObstacle+0xce2>
    401c:	28 c0       	rjmp	.+80     	; 0x406e <pass_theObstacle+0xd80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    401e:	8e 01       	movw	r16, r28
    4020:	07 5a       	subi	r16, 0xA7	; 167
    4022:	1f 4f       	sbci	r17, 0xFF	; 255
    4024:	fe 01       	movw	r30, r28
    4026:	e5 5a       	subi	r30, 0xA5	; 165
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	60 81       	ld	r22, Z
    402c:	71 81       	ldd	r23, Z+1	; 0x01
    402e:	82 81       	ldd	r24, Z+2	; 0x02
    4030:	93 81       	ldd	r25, Z+3	; 0x03
    4032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
    403a:	f8 01       	movw	r30, r16
    403c:	91 83       	std	Z+1, r25	; 0x01
    403e:	80 83       	st	Z, r24
    4040:	de 01       	movw	r26, r28
    4042:	ab 5a       	subi	r26, 0xAB	; 171
    4044:	bf 4f       	sbci	r27, 0xFF	; 255
    4046:	fe 01       	movw	r30, r28
    4048:	e7 5a       	subi	r30, 0xA7	; 167
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	80 81       	ld	r24, Z
    404e:	91 81       	ldd	r25, Z+1	; 0x01
    4050:	11 96       	adiw	r26, 0x01	; 1
    4052:	9c 93       	st	X, r25
    4054:	8e 93       	st	-X, r24
    4056:	fe 01       	movw	r30, r28
    4058:	eb 5a       	subi	r30, 0xAB	; 171
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	80 81       	ld	r24, Z
    405e:	91 81       	ldd	r25, Z+1	; 0x01
    4060:	01 97       	sbiw	r24, 0x01	; 1
    4062:	f1 f7       	brne	.-4      	; 0x4060 <pass_theObstacle+0xd72>
    4064:	fe 01       	movw	r30, r28
    4066:	eb 5a       	subi	r30, 0xAB	; 171
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	91 83       	std	Z+1, r25	; 0x01
    406c:	80 83       	st	Z, r24
			_delay_ms(500);
			if(ret2 == 0){
    406e:	fe 01       	movw	r30, r28
    4070:	ec 52       	subi	r30, 0x2C	; 44
    4072:	ff 4f       	sbci	r31, 0xFF	; 255
    4074:	80 81       	ld	r24, Z
    4076:	88 23       	and	r24, r24
    4078:	31 f4       	brne	.+12     	; 0x4086 <pass_theObstacle+0xd98>
				return NOT_OK;
    407a:	ca 52       	subi	r28, 0x2A	; 42
    407c:	df 4f       	sbci	r29, 0xFF	; 255
    407e:	18 82       	st	Y, r1
    4080:	c6 5d       	subi	r28, 0xD6	; 214
    4082:	d0 40       	sbci	r29, 0x00	; 0
    4084:	81 c3       	rjmp	.+1794   	; 0x4788 <pass_theObstacle+0x149a>
		_delay_ms(1000);

		move_forward_slightly_right();
		_delay_ms(500);

		while(right_ir_return==1){
    4086:	80 91 60 02 	lds	r24, 0x0260
    408a:	81 30       	cpi	r24, 0x01	; 1
    408c:	09 f4       	brne	.+2      	; 0x4090 <pass_theObstacle+0xda2>
    408e:	2f cf       	rjmp	.-418    	; 0x3eee <pass_theObstacle+0xc00>
			_delay_ms(500);
			if(ret2 == 0){
				return NOT_OK;
			}
		}
		SET_BIT(DDRA,0);
    4090:	aa e3       	ldi	r26, 0x3A	; 58
    4092:	b0 e0       	ldi	r27, 0x00	; 0
    4094:	ea e3       	ldi	r30, 0x3A	; 58
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	80 81       	ld	r24, Z
    409a:	81 60       	ori	r24, 0x01	; 1
    409c:	8c 93       	st	X, r24
		CLEAR_BIT(PORTA,0);
    409e:	ab e3       	ldi	r26, 0x3B	; 59
    40a0:	b0 e0       	ldi	r27, 0x00	; 0
    40a2:	eb e3       	ldi	r30, 0x3B	; 59
    40a4:	f0 e0       	ldi	r31, 0x00	; 0
    40a6:	80 81       	ld	r24, Z
    40a8:	8e 7f       	andi	r24, 0xFE	; 254
    40aa:	8c 93       	st	X, r24

		CLEAR_BIT(PORTA,0);
    40ac:	ab e3       	ldi	r26, 0x3B	; 59
    40ae:	b0 e0       	ldi	r27, 0x00	; 0
    40b0:	eb e3       	ldi	r30, 0x3B	; 59
    40b2:	f0 e0       	ldi	r31, 0x00	; 0
    40b4:	80 81       	ld	r24, Z
    40b6:	8e 7f       	andi	r24, 0xFE	; 254
    40b8:	8c 93       	st	X, r24
		SET_BIT(PORTA,0);
    40ba:	ab e3       	ldi	r26, 0x3B	; 59
    40bc:	b0 e0       	ldi	r27, 0x00	; 0
    40be:	eb e3       	ldi	r30, 0x3B	; 59
    40c0:	f0 e0       	ldi	r31, 0x00	; 0
    40c2:	80 81       	ld	r24, Z
    40c4:	81 60       	ori	r24, 0x01	; 1
    40c6:	8c 93       	st	X, r24
		move_forward_slightly_right();
    40c8:	0e 94 9c 18 	call	0x3138	; 0x3138 <move_forward_slightly_right>
    40cc:	fe 01       	movw	r30, r28
    40ce:	ef 5a       	subi	r30, 0xAF	; 175
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	aa ef       	ldi	r26, 0xFA	; 250
    40d8:	b3 e4       	ldi	r27, 0x43	; 67
    40da:	80 83       	st	Z, r24
    40dc:	91 83       	std	Z+1, r25	; 0x01
    40de:	a2 83       	std	Z+2, r26	; 0x02
    40e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e2:	8e 01       	movw	r16, r28
    40e4:	03 5b       	subi	r16, 0xB3	; 179
    40e6:	1f 4f       	sbci	r17, 0xFF	; 255
    40e8:	fe 01       	movw	r30, r28
    40ea:	ef 5a       	subi	r30, 0xAF	; 175
    40ec:	ff 4f       	sbci	r31, 0xFF	; 255
    40ee:	60 81       	ld	r22, Z
    40f0:	71 81       	ldd	r23, Z+1	; 0x01
    40f2:	82 81       	ldd	r24, Z+2	; 0x02
    40f4:	93 81       	ldd	r25, Z+3	; 0x03
    40f6:	20 e0       	ldi	r18, 0x00	; 0
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	4a e7       	ldi	r20, 0x7A	; 122
    40fc:	55 e4       	ldi	r21, 0x45	; 69
    40fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	f8 01       	movw	r30, r16
    4108:	80 83       	st	Z, r24
    410a:	91 83       	std	Z+1, r25	; 0x01
    410c:	a2 83       	std	Z+2, r26	; 0x02
    410e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4110:	fe 01       	movw	r30, r28
    4112:	e3 5b       	subi	r30, 0xB3	; 179
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	60 81       	ld	r22, Z
    4118:	71 81       	ldd	r23, Z+1	; 0x01
    411a:	82 81       	ldd	r24, Z+2	; 0x02
    411c:	93 81       	ldd	r25, Z+3	; 0x03
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	40 e8       	ldi	r20, 0x80	; 128
    4124:	5f e3       	ldi	r21, 0x3F	; 63
    4126:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    412a:	88 23       	and	r24, r24
    412c:	44 f4       	brge	.+16     	; 0x413e <pass_theObstacle+0xe50>
		__ticks = 1;
    412e:	fe 01       	movw	r30, r28
    4130:	e5 5b       	subi	r30, 0xB5	; 181
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	91 83       	std	Z+1, r25	; 0x01
    413a:	80 83       	st	Z, r24
    413c:	64 c0       	rjmp	.+200    	; 0x4206 <pass_theObstacle+0xf18>
	else if (__tmp > 65535)
    413e:	fe 01       	movw	r30, r28
    4140:	e3 5b       	subi	r30, 0xB3	; 179
    4142:	ff 4f       	sbci	r31, 0xFF	; 255
    4144:	60 81       	ld	r22, Z
    4146:	71 81       	ldd	r23, Z+1	; 0x01
    4148:	82 81       	ldd	r24, Z+2	; 0x02
    414a:	93 81       	ldd	r25, Z+3	; 0x03
    414c:	20 e0       	ldi	r18, 0x00	; 0
    414e:	3f ef       	ldi	r19, 0xFF	; 255
    4150:	4f e7       	ldi	r20, 0x7F	; 127
    4152:	57 e4       	ldi	r21, 0x47	; 71
    4154:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4158:	18 16       	cp	r1, r24
    415a:	0c f0       	brlt	.+2      	; 0x415e <pass_theObstacle+0xe70>
    415c:	43 c0       	rjmp	.+134    	; 0x41e4 <pass_theObstacle+0xef6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    415e:	fe 01       	movw	r30, r28
    4160:	ef 5a       	subi	r30, 0xAF	; 175
    4162:	ff 4f       	sbci	r31, 0xFF	; 255
    4164:	60 81       	ld	r22, Z
    4166:	71 81       	ldd	r23, Z+1	; 0x01
    4168:	82 81       	ldd	r24, Z+2	; 0x02
    416a:	93 81       	ldd	r25, Z+3	; 0x03
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	40 e2       	ldi	r20, 0x20	; 32
    4172:	51 e4       	ldi	r21, 0x41	; 65
    4174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	8e 01       	movw	r16, r28
    417e:	05 5b       	subi	r16, 0xB5	; 181
    4180:	1f 4f       	sbci	r17, 0xFF	; 255
    4182:	bc 01       	movw	r22, r24
    4184:	cd 01       	movw	r24, r26
    4186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	f8 01       	movw	r30, r16
    4190:	91 83       	std	Z+1, r25	; 0x01
    4192:	80 83       	st	Z, r24
    4194:	1f c0       	rjmp	.+62     	; 0x41d4 <pass_theObstacle+0xee6>
    4196:	fe 01       	movw	r30, r28
    4198:	e7 5b       	subi	r30, 0xB7	; 183
    419a:	ff 4f       	sbci	r31, 0xFF	; 255
    419c:	80 e9       	ldi	r24, 0x90	; 144
    419e:	91 e0       	ldi	r25, 0x01	; 1
    41a0:	91 83       	std	Z+1, r25	; 0x01
    41a2:	80 83       	st	Z, r24
    41a4:	fe 01       	movw	r30, r28
    41a6:	e7 5b       	subi	r30, 0xB7	; 183
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	80 81       	ld	r24, Z
    41ac:	91 81       	ldd	r25, Z+1	; 0x01
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <pass_theObstacle+0xec0>
    41b2:	fe 01       	movw	r30, r28
    41b4:	e7 5b       	subi	r30, 0xB7	; 183
    41b6:	ff 4f       	sbci	r31, 0xFF	; 255
    41b8:	91 83       	std	Z+1, r25	; 0x01
    41ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41bc:	de 01       	movw	r26, r28
    41be:	a5 5b       	subi	r26, 0xB5	; 181
    41c0:	bf 4f       	sbci	r27, 0xFF	; 255
    41c2:	fe 01       	movw	r30, r28
    41c4:	e5 5b       	subi	r30, 0xB5	; 181
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	80 81       	ld	r24, Z
    41ca:	91 81       	ldd	r25, Z+1	; 0x01
    41cc:	01 97       	sbiw	r24, 0x01	; 1
    41ce:	11 96       	adiw	r26, 0x01	; 1
    41d0:	9c 93       	st	X, r25
    41d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d4:	fe 01       	movw	r30, r28
    41d6:	e5 5b       	subi	r30, 0xB5	; 181
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	80 81       	ld	r24, Z
    41dc:	91 81       	ldd	r25, Z+1	; 0x01
    41de:	00 97       	sbiw	r24, 0x00	; 0
    41e0:	d1 f6       	brne	.-76     	; 0x4196 <pass_theObstacle+0xea8>
    41e2:	27 c0       	rjmp	.+78     	; 0x4232 <pass_theObstacle+0xf44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e4:	8e 01       	movw	r16, r28
    41e6:	05 5b       	subi	r16, 0xB5	; 181
    41e8:	1f 4f       	sbci	r17, 0xFF	; 255
    41ea:	fe 01       	movw	r30, r28
    41ec:	e3 5b       	subi	r30, 0xB3	; 179
    41ee:	ff 4f       	sbci	r31, 0xFF	; 255
    41f0:	60 81       	ld	r22, Z
    41f2:	71 81       	ldd	r23, Z+1	; 0x01
    41f4:	82 81       	ldd	r24, Z+2	; 0x02
    41f6:	93 81       	ldd	r25, Z+3	; 0x03
    41f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fc:	dc 01       	movw	r26, r24
    41fe:	cb 01       	movw	r24, r22
    4200:	f8 01       	movw	r30, r16
    4202:	91 83       	std	Z+1, r25	; 0x01
    4204:	80 83       	st	Z, r24
    4206:	de 01       	movw	r26, r28
    4208:	a9 5b       	subi	r26, 0xB9	; 185
    420a:	bf 4f       	sbci	r27, 0xFF	; 255
    420c:	fe 01       	movw	r30, r28
    420e:	e5 5b       	subi	r30, 0xB5	; 181
    4210:	ff 4f       	sbci	r31, 0xFF	; 255
    4212:	80 81       	ld	r24, Z
    4214:	91 81       	ldd	r25, Z+1	; 0x01
    4216:	8d 93       	st	X+, r24
    4218:	9c 93       	st	X, r25
    421a:	fe 01       	movw	r30, r28
    421c:	e9 5b       	subi	r30, 0xB9	; 185
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	80 81       	ld	r24, Z
    4222:	91 81       	ldd	r25, Z+1	; 0x01
    4224:	01 97       	sbiw	r24, 0x01	; 1
    4226:	f1 f7       	brne	.-4      	; 0x4224 <pass_theObstacle+0xf36>
    4228:	fe 01       	movw	r30, r28
    422a:	e9 5b       	subi	r30, 0xB9	; 185
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	91 83       	std	Z+1, r25	; 0x01
    4230:	80 83       	st	Z, r24
		_delay_ms(500);
		move_forward();
    4232:	0e 94 32 18 	call	0x3064	; 0x3064 <move_forward>

		lcd_moveCursor(0, 0);
    4236:	80 e0       	ldi	r24, 0x00	; 0
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	60 e0       	ldi	r22, 0x00	; 0
    423c:	70 e0       	ldi	r23, 0x00	; 0
    423e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
		lcd_send_string("passed obstacle");
    4242:	8b ed       	ldi	r24, 0xDB	; 219
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
    424a:	98 c2       	rjmp	.+1328   	; 0x477c <pass_theObstacle+0x148e>

	}
	else if( (right_ir_return==1) && (left_ir_return==1) && (back_ir_return==1) ){	//back and left are empty
    424c:	80 91 60 02 	lds	r24, 0x0260
    4250:	81 30       	cpi	r24, 0x01	; 1
    4252:	a9 f4       	brne	.+42     	; 0x427e <pass_theObstacle+0xf90>
    4254:	80 91 5f 02 	lds	r24, 0x025F
    4258:	81 30       	cpi	r24, 0x01	; 1
    425a:	89 f4       	brne	.+34     	; 0x427e <pass_theObstacle+0xf90>
    425c:	80 91 5d 02 	lds	r24, 0x025D
    4260:	81 30       	cpi	r24, 0x01	; 1
    4262:	69 f4       	brne	.+26     	; 0x427e <pass_theObstacle+0xf90>
		stop_moving();
    4264:	0e 94 06 19 	call	0x320c	; 0x320c <stop_moving>

		lcd_moveCursor(0, 0);
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	60 e0       	ldi	r22, 0x00	; 0
    426e:	70 e0       	ldi	r23, 0x00	; 0
    4270:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
		lcd_send_string("obstacle can't be passed");
    4274:	8b ee       	ldi	r24, 0xEB	; 235
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
    427c:	7f c2       	rjmp	.+1278   	; 0x477c <pass_theObstacle+0x148e>
	}else{
		move_backward();
    427e:	0e 94 67 18 	call	0x30ce	; 0x30ce <move_backward>
    4282:	fe 01       	movw	r30, r28
    4284:	ed 5b       	subi	r30, 0xBD	; 189
    4286:	ff 4f       	sbci	r31, 0xFF	; 255
    4288:	80 e0       	ldi	r24, 0x00	; 0
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	aa ef       	ldi	r26, 0xFA	; 250
    428e:	b3 e4       	ldi	r27, 0x43	; 67
    4290:	80 83       	st	Z, r24
    4292:	91 83       	std	Z+1, r25	; 0x01
    4294:	a2 83       	std	Z+2, r26	; 0x02
    4296:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4298:	8e 01       	movw	r16, r28
    429a:	01 5c       	subi	r16, 0xC1	; 193
    429c:	1f 4f       	sbci	r17, 0xFF	; 255
    429e:	fe 01       	movw	r30, r28
    42a0:	ed 5b       	subi	r30, 0xBD	; 189
    42a2:	ff 4f       	sbci	r31, 0xFF	; 255
    42a4:	60 81       	ld	r22, Z
    42a6:	71 81       	ldd	r23, Z+1	; 0x01
    42a8:	82 81       	ldd	r24, Z+2	; 0x02
    42aa:	93 81       	ldd	r25, Z+3	; 0x03
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	4a e7       	ldi	r20, 0x7A	; 122
    42b2:	55 e4       	ldi	r21, 0x45	; 69
    42b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b8:	dc 01       	movw	r26, r24
    42ba:	cb 01       	movw	r24, r22
    42bc:	f8 01       	movw	r30, r16
    42be:	80 83       	st	Z, r24
    42c0:	91 83       	std	Z+1, r25	; 0x01
    42c2:	a2 83       	std	Z+2, r26	; 0x02
    42c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42c6:	fe 01       	movw	r30, r28
    42c8:	ff 96       	adiw	r30, 0x3f	; 63
    42ca:	60 81       	ld	r22, Z
    42cc:	71 81       	ldd	r23, Z+1	; 0x01
    42ce:	82 81       	ldd	r24, Z+2	; 0x02
    42d0:	93 81       	ldd	r25, Z+3	; 0x03
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	40 e8       	ldi	r20, 0x80	; 128
    42d8:	5f e3       	ldi	r21, 0x3F	; 63
    42da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42de:	88 23       	and	r24, r24
    42e0:	2c f4       	brge	.+10     	; 0x42ec <pass_theObstacle+0xffe>
		__ticks = 1;
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	9e af       	std	Y+62, r25	; 0x3e
    42e8:	8d af       	std	Y+61, r24	; 0x3d
    42ea:	46 c0       	rjmp	.+140    	; 0x4378 <pass_theObstacle+0x108a>
	else if (__tmp > 65535)
    42ec:	fe 01       	movw	r30, r28
    42ee:	ff 96       	adiw	r30, 0x3f	; 63
    42f0:	60 81       	ld	r22, Z
    42f2:	71 81       	ldd	r23, Z+1	; 0x01
    42f4:	82 81       	ldd	r24, Z+2	; 0x02
    42f6:	93 81       	ldd	r25, Z+3	; 0x03
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	3f ef       	ldi	r19, 0xFF	; 255
    42fc:	4f e7       	ldi	r20, 0x7F	; 127
    42fe:	57 e4       	ldi	r21, 0x47	; 71
    4300:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4304:	18 16       	cp	r1, r24
    4306:	64 f5       	brge	.+88     	; 0x4360 <pass_theObstacle+0x1072>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4308:	fe 01       	movw	r30, r28
    430a:	ed 5b       	subi	r30, 0xBD	; 189
    430c:	ff 4f       	sbci	r31, 0xFF	; 255
    430e:	60 81       	ld	r22, Z
    4310:	71 81       	ldd	r23, Z+1	; 0x01
    4312:	82 81       	ldd	r24, Z+2	; 0x02
    4314:	93 81       	ldd	r25, Z+3	; 0x03
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	40 e2       	ldi	r20, 0x20	; 32
    431c:	51 e4       	ldi	r21, 0x41	; 65
    431e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	bc 01       	movw	r22, r24
    4328:	cd 01       	movw	r24, r26
    432a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	9e af       	std	Y+62, r25	; 0x3e
    4334:	8d af       	std	Y+61, r24	; 0x3d
    4336:	0f c0       	rjmp	.+30     	; 0x4356 <pass_theObstacle+0x1068>
    4338:	80 e9       	ldi	r24, 0x90	; 144
    433a:	91 e0       	ldi	r25, 0x01	; 1
    433c:	9c af       	std	Y+60, r25	; 0x3c
    433e:	8b af       	std	Y+59, r24	; 0x3b
    4340:	8b ad       	ldd	r24, Y+59	; 0x3b
    4342:	9c ad       	ldd	r25, Y+60	; 0x3c
    4344:	01 97       	sbiw	r24, 0x01	; 1
    4346:	f1 f7       	brne	.-4      	; 0x4344 <pass_theObstacle+0x1056>
    4348:	9c af       	std	Y+60, r25	; 0x3c
    434a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    434c:	8d ad       	ldd	r24, Y+61	; 0x3d
    434e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4350:	01 97       	sbiw	r24, 0x01	; 1
    4352:	9e af       	std	Y+62, r25	; 0x3e
    4354:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4356:	8d ad       	ldd	r24, Y+61	; 0x3d
    4358:	9e ad       	ldd	r25, Y+62	; 0x3e
    435a:	00 97       	sbiw	r24, 0x00	; 0
    435c:	69 f7       	brne	.-38     	; 0x4338 <pass_theObstacle+0x104a>
    435e:	16 c0       	rjmp	.+44     	; 0x438c <pass_theObstacle+0x109e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4360:	fe 01       	movw	r30, r28
    4362:	ff 96       	adiw	r30, 0x3f	; 63
    4364:	60 81       	ld	r22, Z
    4366:	71 81       	ldd	r23, Z+1	; 0x01
    4368:	82 81       	ldd	r24, Z+2	; 0x02
    436a:	93 81       	ldd	r25, Z+3	; 0x03
    436c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4370:	dc 01       	movw	r26, r24
    4372:	cb 01       	movw	r24, r22
    4374:	9e af       	std	Y+62, r25	; 0x3e
    4376:	8d af       	std	Y+61, r24	; 0x3d
    4378:	8d ad       	ldd	r24, Y+61	; 0x3d
    437a:	9e ad       	ldd	r25, Y+62	; 0x3e
    437c:	9a af       	std	Y+58, r25	; 0x3a
    437e:	89 af       	std	Y+57, r24	; 0x39
    4380:	89 ad       	ldd	r24, Y+57	; 0x39
    4382:	9a ad       	ldd	r25, Y+58	; 0x3a
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	f1 f7       	brne	.-4      	; 0x4384 <pass_theObstacle+0x1096>
    4388:	9a af       	std	Y+58, r25	; 0x3a
    438a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(500);

		move_forward_slightly_right();
    438c:	0e 94 9c 18 	call	0x3138	; 0x3138 <move_forward_slightly_right>
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	aa e7       	ldi	r26, 0x7A	; 122
    4396:	b4 e4       	ldi	r27, 0x44	; 68
    4398:	8d ab       	std	Y+53, r24	; 0x35
    439a:	9e ab       	std	Y+54, r25	; 0x36
    439c:	af ab       	std	Y+55, r26	; 0x37
    439e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a0:	6d a9       	ldd	r22, Y+53	; 0x35
    43a2:	7e a9       	ldd	r23, Y+54	; 0x36
    43a4:	8f a9       	ldd	r24, Y+55	; 0x37
    43a6:	98 ad       	ldd	r25, Y+56	; 0x38
    43a8:	20 e0       	ldi	r18, 0x00	; 0
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	4a e7       	ldi	r20, 0x7A	; 122
    43ae:	55 e4       	ldi	r21, 0x45	; 69
    43b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b4:	dc 01       	movw	r26, r24
    43b6:	cb 01       	movw	r24, r22
    43b8:	89 ab       	std	Y+49, r24	; 0x31
    43ba:	9a ab       	std	Y+50, r25	; 0x32
    43bc:	ab ab       	std	Y+51, r26	; 0x33
    43be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    43c0:	69 a9       	ldd	r22, Y+49	; 0x31
    43c2:	7a a9       	ldd	r23, Y+50	; 0x32
    43c4:	8b a9       	ldd	r24, Y+51	; 0x33
    43c6:	9c a9       	ldd	r25, Y+52	; 0x34
    43c8:	20 e0       	ldi	r18, 0x00	; 0
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	40 e8       	ldi	r20, 0x80	; 128
    43ce:	5f e3       	ldi	r21, 0x3F	; 63
    43d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43d4:	88 23       	and	r24, r24
    43d6:	2c f4       	brge	.+10     	; 0x43e2 <pass_theObstacle+0x10f4>
		__ticks = 1;
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	98 ab       	std	Y+48, r25	; 0x30
    43de:	8f a7       	std	Y+47, r24	; 0x2f
    43e0:	3f c0       	rjmp	.+126    	; 0x4460 <pass_theObstacle+0x1172>
	else if (__tmp > 65535)
    43e2:	69 a9       	ldd	r22, Y+49	; 0x31
    43e4:	7a a9       	ldd	r23, Y+50	; 0x32
    43e6:	8b a9       	ldd	r24, Y+51	; 0x33
    43e8:	9c a9       	ldd	r25, Y+52	; 0x34
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	3f ef       	ldi	r19, 0xFF	; 255
    43ee:	4f e7       	ldi	r20, 0x7F	; 127
    43f0:	57 e4       	ldi	r21, 0x47	; 71
    43f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43f6:	18 16       	cp	r1, r24
    43f8:	4c f5       	brge	.+82     	; 0x444c <pass_theObstacle+0x115e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43fa:	6d a9       	ldd	r22, Y+53	; 0x35
    43fc:	7e a9       	ldd	r23, Y+54	; 0x36
    43fe:	8f a9       	ldd	r24, Y+55	; 0x37
    4400:	98 ad       	ldd	r25, Y+56	; 0x38
    4402:	20 e0       	ldi	r18, 0x00	; 0
    4404:	30 e0       	ldi	r19, 0x00	; 0
    4406:	40 e2       	ldi	r20, 0x20	; 32
    4408:	51 e4       	ldi	r21, 0x41	; 65
    440a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    440e:	dc 01       	movw	r26, r24
    4410:	cb 01       	movw	r24, r22
    4412:	bc 01       	movw	r22, r24
    4414:	cd 01       	movw	r24, r26
    4416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    441a:	dc 01       	movw	r26, r24
    441c:	cb 01       	movw	r24, r22
    441e:	98 ab       	std	Y+48, r25	; 0x30
    4420:	8f a7       	std	Y+47, r24	; 0x2f
    4422:	0f c0       	rjmp	.+30     	; 0x4442 <pass_theObstacle+0x1154>
    4424:	80 e9       	ldi	r24, 0x90	; 144
    4426:	91 e0       	ldi	r25, 0x01	; 1
    4428:	9e a7       	std	Y+46, r25	; 0x2e
    442a:	8d a7       	std	Y+45, r24	; 0x2d
    442c:	8d a5       	ldd	r24, Y+45	; 0x2d
    442e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4430:	01 97       	sbiw	r24, 0x01	; 1
    4432:	f1 f7       	brne	.-4      	; 0x4430 <pass_theObstacle+0x1142>
    4434:	9e a7       	std	Y+46, r25	; 0x2e
    4436:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4438:	8f a5       	ldd	r24, Y+47	; 0x2f
    443a:	98 a9       	ldd	r25, Y+48	; 0x30
    443c:	01 97       	sbiw	r24, 0x01	; 1
    443e:	98 ab       	std	Y+48, r25	; 0x30
    4440:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4442:	8f a5       	ldd	r24, Y+47	; 0x2f
    4444:	98 a9       	ldd	r25, Y+48	; 0x30
    4446:	00 97       	sbiw	r24, 0x00	; 0
    4448:	69 f7       	brne	.-38     	; 0x4424 <pass_theObstacle+0x1136>
    444a:	14 c0       	rjmp	.+40     	; 0x4474 <pass_theObstacle+0x1186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    444c:	69 a9       	ldd	r22, Y+49	; 0x31
    444e:	7a a9       	ldd	r23, Y+50	; 0x32
    4450:	8b a9       	ldd	r24, Y+51	; 0x33
    4452:	9c a9       	ldd	r25, Y+52	; 0x34
    4454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4458:	dc 01       	movw	r26, r24
    445a:	cb 01       	movw	r24, r22
    445c:	98 ab       	std	Y+48, r25	; 0x30
    445e:	8f a7       	std	Y+47, r24	; 0x2f
    4460:	8f a5       	ldd	r24, Y+47	; 0x2f
    4462:	98 a9       	ldd	r25, Y+48	; 0x30
    4464:	9c a7       	std	Y+44, r25	; 0x2c
    4466:	8b a7       	std	Y+43, r24	; 0x2b
    4468:	8b a5       	ldd	r24, Y+43	; 0x2b
    446a:	9c a5       	ldd	r25, Y+44	; 0x2c
    446c:	01 97       	sbiw	r24, 0x01	; 1
    446e:	f1 f7       	brne	.-4      	; 0x446c <pass_theObstacle+0x117e>
    4470:	9c a7       	std	Y+44, r25	; 0x2c
    4472:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);

		move_forward_slightly_left();
    4474:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <move_forward_slightly_left>
    4478:	80 e0       	ldi	r24, 0x00	; 0
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	aa ef       	ldi	r26, 0xFA	; 250
    447e:	b3 e4       	ldi	r27, 0x43	; 67
    4480:	8f a3       	std	Y+39, r24	; 0x27
    4482:	98 a7       	std	Y+40, r25	; 0x28
    4484:	a9 a7       	std	Y+41, r26	; 0x29
    4486:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4488:	6f a1       	ldd	r22, Y+39	; 0x27
    448a:	78 a5       	ldd	r23, Y+40	; 0x28
    448c:	89 a5       	ldd	r24, Y+41	; 0x29
    448e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	4a e7       	ldi	r20, 0x7A	; 122
    4496:	55 e4       	ldi	r21, 0x45	; 69
    4498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	8b a3       	std	Y+35, r24	; 0x23
    44a2:	9c a3       	std	Y+36, r25	; 0x24
    44a4:	ad a3       	std	Y+37, r26	; 0x25
    44a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44a8:	6b a1       	ldd	r22, Y+35	; 0x23
    44aa:	7c a1       	ldd	r23, Y+36	; 0x24
    44ac:	8d a1       	ldd	r24, Y+37	; 0x25
    44ae:	9e a1       	ldd	r25, Y+38	; 0x26
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	40 e8       	ldi	r20, 0x80	; 128
    44b6:	5f e3       	ldi	r21, 0x3F	; 63
    44b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44bc:	88 23       	and	r24, r24
    44be:	2c f4       	brge	.+10     	; 0x44ca <pass_theObstacle+0x11dc>
		__ticks = 1;
    44c0:	81 e0       	ldi	r24, 0x01	; 1
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	9a a3       	std	Y+34, r25	; 0x22
    44c6:	89 a3       	std	Y+33, r24	; 0x21
    44c8:	3f c0       	rjmp	.+126    	; 0x4548 <pass_theObstacle+0x125a>
	else if (__tmp > 65535)
    44ca:	6b a1       	ldd	r22, Y+35	; 0x23
    44cc:	7c a1       	ldd	r23, Y+36	; 0x24
    44ce:	8d a1       	ldd	r24, Y+37	; 0x25
    44d0:	9e a1       	ldd	r25, Y+38	; 0x26
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	3f ef       	ldi	r19, 0xFF	; 255
    44d6:	4f e7       	ldi	r20, 0x7F	; 127
    44d8:	57 e4       	ldi	r21, 0x47	; 71
    44da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44de:	18 16       	cp	r1, r24
    44e0:	4c f5       	brge	.+82     	; 0x4534 <pass_theObstacle+0x1246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44e2:	6f a1       	ldd	r22, Y+39	; 0x27
    44e4:	78 a5       	ldd	r23, Y+40	; 0x28
    44e6:	89 a5       	ldd	r24, Y+41	; 0x29
    44e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    44ea:	20 e0       	ldi	r18, 0x00	; 0
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	40 e2       	ldi	r20, 0x20	; 32
    44f0:	51 e4       	ldi	r21, 0x41	; 65
    44f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f6:	dc 01       	movw	r26, r24
    44f8:	cb 01       	movw	r24, r22
    44fa:	bc 01       	movw	r22, r24
    44fc:	cd 01       	movw	r24, r26
    44fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	9a a3       	std	Y+34, r25	; 0x22
    4508:	89 a3       	std	Y+33, r24	; 0x21
    450a:	0f c0       	rjmp	.+30     	; 0x452a <pass_theObstacle+0x123c>
    450c:	80 e9       	ldi	r24, 0x90	; 144
    450e:	91 e0       	ldi	r25, 0x01	; 1
    4510:	98 a3       	std	Y+32, r25	; 0x20
    4512:	8f 8f       	std	Y+31, r24	; 0x1f
    4514:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4516:	98 a1       	ldd	r25, Y+32	; 0x20
    4518:	01 97       	sbiw	r24, 0x01	; 1
    451a:	f1 f7       	brne	.-4      	; 0x4518 <pass_theObstacle+0x122a>
    451c:	98 a3       	std	Y+32, r25	; 0x20
    451e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4520:	89 a1       	ldd	r24, Y+33	; 0x21
    4522:	9a a1       	ldd	r25, Y+34	; 0x22
    4524:	01 97       	sbiw	r24, 0x01	; 1
    4526:	9a a3       	std	Y+34, r25	; 0x22
    4528:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    452a:	89 a1       	ldd	r24, Y+33	; 0x21
    452c:	9a a1       	ldd	r25, Y+34	; 0x22
    452e:	00 97       	sbiw	r24, 0x00	; 0
    4530:	69 f7       	brne	.-38     	; 0x450c <pass_theObstacle+0x121e>
    4532:	9f c0       	rjmp	.+318    	; 0x4672 <pass_theObstacle+0x1384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4534:	6b a1       	ldd	r22, Y+35	; 0x23
    4536:	7c a1       	ldd	r23, Y+36	; 0x24
    4538:	8d a1       	ldd	r24, Y+37	; 0x25
    453a:	9e a1       	ldd	r25, Y+38	; 0x26
    453c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4540:	dc 01       	movw	r26, r24
    4542:	cb 01       	movw	r24, r22
    4544:	9a a3       	std	Y+34, r25	; 0x22
    4546:	89 a3       	std	Y+33, r24	; 0x21
    4548:	89 a1       	ldd	r24, Y+33	; 0x21
    454a:	9a a1       	ldd	r25, Y+34	; 0x22
    454c:	9e 8f       	std	Y+30, r25	; 0x1e
    454e:	8d 8f       	std	Y+29, r24	; 0x1d
    4550:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4552:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4554:	01 97       	sbiw	r24, 0x01	; 1
    4556:	f1 f7       	brne	.-4      	; 0x4554 <pass_theObstacle+0x1266>
    4558:	9e 8f       	std	Y+30, r25	; 0x1e
    455a:	8d 8f       	std	Y+29, r24	; 0x1d
    455c:	8a c0       	rjmp	.+276    	; 0x4672 <pass_theObstacle+0x1384>
		_delay_ms(500);

		while(left_ir_return==1){
			ret3=IR_PROXIMITY_read(LEFT_IR, &left_ir_return);
    455e:	2f e5       	ldi	r18, 0x5F	; 95
    4560:	32 e0       	ldi	r19, 0x02	; 2
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	b9 01       	movw	r22, r18
    4566:	0e 94 23 12 	call	0x2446	; 0x2446 <IR_PROXIMITY_read>
    456a:	fe 01       	movw	r30, r28
    456c:	ed 52       	subi	r30, 0x2D	; 45
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	80 83       	st	Z, r24
			move_forward();
    4572:	0e 94 32 18 	call	0x3064	; 0x3064 <move_forward>
    4576:	80 e0       	ldi	r24, 0x00	; 0
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	aa ef       	ldi	r26, 0xFA	; 250
    457c:	b3 e4       	ldi	r27, 0x43	; 67
    457e:	89 8f       	std	Y+25, r24	; 0x19
    4580:	9a 8f       	std	Y+26, r25	; 0x1a
    4582:	ab 8f       	std	Y+27, r26	; 0x1b
    4584:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4586:	69 8d       	ldd	r22, Y+25	; 0x19
    4588:	7a 8d       	ldd	r23, Y+26	; 0x1a
    458a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    458c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	4a e7       	ldi	r20, 0x7A	; 122
    4594:	55 e4       	ldi	r21, 0x45	; 69
    4596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	8d 8b       	std	Y+21, r24	; 0x15
    45a0:	9e 8b       	std	Y+22, r25	; 0x16
    45a2:	af 8b       	std	Y+23, r26	; 0x17
    45a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45a6:	6d 89       	ldd	r22, Y+21	; 0x15
    45a8:	7e 89       	ldd	r23, Y+22	; 0x16
    45aa:	8f 89       	ldd	r24, Y+23	; 0x17
    45ac:	98 8d       	ldd	r25, Y+24	; 0x18
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	40 e8       	ldi	r20, 0x80	; 128
    45b4:	5f e3       	ldi	r21, 0x3F	; 63
    45b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45ba:	88 23       	and	r24, r24
    45bc:	2c f4       	brge	.+10     	; 0x45c8 <pass_theObstacle+0x12da>
		__ticks = 1;
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	9c 8b       	std	Y+20, r25	; 0x14
    45c4:	8b 8b       	std	Y+19, r24	; 0x13
    45c6:	3f c0       	rjmp	.+126    	; 0x4646 <pass_theObstacle+0x1358>
	else if (__tmp > 65535)
    45c8:	6d 89       	ldd	r22, Y+21	; 0x15
    45ca:	7e 89       	ldd	r23, Y+22	; 0x16
    45cc:	8f 89       	ldd	r24, Y+23	; 0x17
    45ce:	98 8d       	ldd	r25, Y+24	; 0x18
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	3f ef       	ldi	r19, 0xFF	; 255
    45d4:	4f e7       	ldi	r20, 0x7F	; 127
    45d6:	57 e4       	ldi	r21, 0x47	; 71
    45d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45dc:	18 16       	cp	r1, r24
    45de:	4c f5       	brge	.+82     	; 0x4632 <pass_theObstacle+0x1344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e0:	69 8d       	ldd	r22, Y+25	; 0x19
    45e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	40 e2       	ldi	r20, 0x20	; 32
    45ee:	51 e4       	ldi	r21, 0x41	; 65
    45f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f4:	dc 01       	movw	r26, r24
    45f6:	cb 01       	movw	r24, r22
    45f8:	bc 01       	movw	r22, r24
    45fa:	cd 01       	movw	r24, r26
    45fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	9c 8b       	std	Y+20, r25	; 0x14
    4606:	8b 8b       	std	Y+19, r24	; 0x13
    4608:	0f c0       	rjmp	.+30     	; 0x4628 <pass_theObstacle+0x133a>
    460a:	80 e9       	ldi	r24, 0x90	; 144
    460c:	91 e0       	ldi	r25, 0x01	; 1
    460e:	9a 8b       	std	Y+18, r25	; 0x12
    4610:	89 8b       	std	Y+17, r24	; 0x11
    4612:	89 89       	ldd	r24, Y+17	; 0x11
    4614:	9a 89       	ldd	r25, Y+18	; 0x12
    4616:	01 97       	sbiw	r24, 0x01	; 1
    4618:	f1 f7       	brne	.-4      	; 0x4616 <pass_theObstacle+0x1328>
    461a:	9a 8b       	std	Y+18, r25	; 0x12
    461c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    461e:	8b 89       	ldd	r24, Y+19	; 0x13
    4620:	9c 89       	ldd	r25, Y+20	; 0x14
    4622:	01 97       	sbiw	r24, 0x01	; 1
    4624:	9c 8b       	std	Y+20, r25	; 0x14
    4626:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4628:	8b 89       	ldd	r24, Y+19	; 0x13
    462a:	9c 89       	ldd	r25, Y+20	; 0x14
    462c:	00 97       	sbiw	r24, 0x00	; 0
    462e:	69 f7       	brne	.-38     	; 0x460a <pass_theObstacle+0x131c>
    4630:	14 c0       	rjmp	.+40     	; 0x465a <pass_theObstacle+0x136c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4632:	6d 89       	ldd	r22, Y+21	; 0x15
    4634:	7e 89       	ldd	r23, Y+22	; 0x16
    4636:	8f 89       	ldd	r24, Y+23	; 0x17
    4638:	98 8d       	ldd	r25, Y+24	; 0x18
    463a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	9c 8b       	std	Y+20, r25	; 0x14
    4644:	8b 8b       	std	Y+19, r24	; 0x13
    4646:	8b 89       	ldd	r24, Y+19	; 0x13
    4648:	9c 89       	ldd	r25, Y+20	; 0x14
    464a:	98 8b       	std	Y+16, r25	; 0x10
    464c:	8f 87       	std	Y+15, r24	; 0x0f
    464e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4650:	98 89       	ldd	r25, Y+16	; 0x10
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	f1 f7       	brne	.-4      	; 0x4652 <pass_theObstacle+0x1364>
    4656:	98 8b       	std	Y+16, r25	; 0x10
    4658:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			if(ret3 == 0){
    465a:	fe 01       	movw	r30, r28
    465c:	ed 52       	subi	r30, 0x2D	; 45
    465e:	ff 4f       	sbci	r31, 0xFF	; 255
    4660:	80 81       	ld	r24, Z
    4662:	88 23       	and	r24, r24
    4664:	31 f4       	brne	.+12     	; 0x4672 <pass_theObstacle+0x1384>
				return NOT_OK;
    4666:	ca 52       	subi	r28, 0x2A	; 42
    4668:	df 4f       	sbci	r29, 0xFF	; 255
    466a:	18 82       	st	Y, r1
    466c:	c6 5d       	subi	r28, 0xD6	; 214
    466e:	d0 40       	sbci	r29, 0x00	; 0
    4670:	8b c0       	rjmp	.+278    	; 0x4788 <pass_theObstacle+0x149a>
		_delay_ms(1000);

		move_forward_slightly_left();
		_delay_ms(500);

		while(left_ir_return==1){
    4672:	80 91 5f 02 	lds	r24, 0x025F
    4676:	81 30       	cpi	r24, 0x01	; 1
    4678:	09 f4       	brne	.+2      	; 0x467c <pass_theObstacle+0x138e>
    467a:	71 cf       	rjmp	.-286    	; 0x455e <pass_theObstacle+0x1270>
			if(ret3 == 0){
				return NOT_OK;
			}
		}

		move_forward_slightly_left();
    467c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <move_forward_slightly_left>
    4680:	80 e0       	ldi	r24, 0x00	; 0
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	aa ef       	ldi	r26, 0xFA	; 250
    4686:	b3 e4       	ldi	r27, 0x43	; 67
    4688:	8b 87       	std	Y+11, r24	; 0x0b
    468a:	9c 87       	std	Y+12, r25	; 0x0c
    468c:	ad 87       	std	Y+13, r26	; 0x0d
    468e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4690:	6b 85       	ldd	r22, Y+11	; 0x0b
    4692:	7c 85       	ldd	r23, Y+12	; 0x0c
    4694:	8d 85       	ldd	r24, Y+13	; 0x0d
    4696:	9e 85       	ldd	r25, Y+14	; 0x0e
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	4a e7       	ldi	r20, 0x7A	; 122
    469e:	55 e4       	ldi	r21, 0x45	; 69
    46a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	8f 83       	std	Y+7, r24	; 0x07
    46aa:	98 87       	std	Y+8, r25	; 0x08
    46ac:	a9 87       	std	Y+9, r26	; 0x09
    46ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46b0:	6f 81       	ldd	r22, Y+7	; 0x07
    46b2:	78 85       	ldd	r23, Y+8	; 0x08
    46b4:	89 85       	ldd	r24, Y+9	; 0x09
    46b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	40 e8       	ldi	r20, 0x80	; 128
    46be:	5f e3       	ldi	r21, 0x3F	; 63
    46c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46c4:	88 23       	and	r24, r24
    46c6:	2c f4       	brge	.+10     	; 0x46d2 <pass_theObstacle+0x13e4>
		__ticks = 1;
    46c8:	81 e0       	ldi	r24, 0x01	; 1
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	9e 83       	std	Y+6, r25	; 0x06
    46ce:	8d 83       	std	Y+5, r24	; 0x05
    46d0:	3f c0       	rjmp	.+126    	; 0x4750 <pass_theObstacle+0x1462>
	else if (__tmp > 65535)
    46d2:	6f 81       	ldd	r22, Y+7	; 0x07
    46d4:	78 85       	ldd	r23, Y+8	; 0x08
    46d6:	89 85       	ldd	r24, Y+9	; 0x09
    46d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	3f ef       	ldi	r19, 0xFF	; 255
    46de:	4f e7       	ldi	r20, 0x7F	; 127
    46e0:	57 e4       	ldi	r21, 0x47	; 71
    46e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46e6:	18 16       	cp	r1, r24
    46e8:	4c f5       	brge	.+82     	; 0x473c <pass_theObstacle+0x144e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    46ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    46f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	40 e2       	ldi	r20, 0x20	; 32
    46f8:	51 e4       	ldi	r21, 0x41	; 65
    46fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fe:	dc 01       	movw	r26, r24
    4700:	cb 01       	movw	r24, r22
    4702:	bc 01       	movw	r22, r24
    4704:	cd 01       	movw	r24, r26
    4706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	9e 83       	std	Y+6, r25	; 0x06
    4710:	8d 83       	std	Y+5, r24	; 0x05
    4712:	0f c0       	rjmp	.+30     	; 0x4732 <pass_theObstacle+0x1444>
    4714:	80 e9       	ldi	r24, 0x90	; 144
    4716:	91 e0       	ldi	r25, 0x01	; 1
    4718:	9c 83       	std	Y+4, r25	; 0x04
    471a:	8b 83       	std	Y+3, r24	; 0x03
    471c:	8b 81       	ldd	r24, Y+3	; 0x03
    471e:	9c 81       	ldd	r25, Y+4	; 0x04
    4720:	01 97       	sbiw	r24, 0x01	; 1
    4722:	f1 f7       	brne	.-4      	; 0x4720 <pass_theObstacle+0x1432>
    4724:	9c 83       	std	Y+4, r25	; 0x04
    4726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4728:	8d 81       	ldd	r24, Y+5	; 0x05
    472a:	9e 81       	ldd	r25, Y+6	; 0x06
    472c:	01 97       	sbiw	r24, 0x01	; 1
    472e:	9e 83       	std	Y+6, r25	; 0x06
    4730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4732:	8d 81       	ldd	r24, Y+5	; 0x05
    4734:	9e 81       	ldd	r25, Y+6	; 0x06
    4736:	00 97       	sbiw	r24, 0x00	; 0
    4738:	69 f7       	brne	.-38     	; 0x4714 <pass_theObstacle+0x1426>
    473a:	14 c0       	rjmp	.+40     	; 0x4764 <pass_theObstacle+0x1476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    473c:	6f 81       	ldd	r22, Y+7	; 0x07
    473e:	78 85       	ldd	r23, Y+8	; 0x08
    4740:	89 85       	ldd	r24, Y+9	; 0x09
    4742:	9a 85       	ldd	r25, Y+10	; 0x0a
    4744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4748:	dc 01       	movw	r26, r24
    474a:	cb 01       	movw	r24, r22
    474c:	9e 83       	std	Y+6, r25	; 0x06
    474e:	8d 83       	std	Y+5, r24	; 0x05
    4750:	8d 81       	ldd	r24, Y+5	; 0x05
    4752:	9e 81       	ldd	r25, Y+6	; 0x06
    4754:	9a 83       	std	Y+2, r25	; 0x02
    4756:	89 83       	std	Y+1, r24	; 0x01
    4758:	89 81       	ldd	r24, Y+1	; 0x01
    475a:	9a 81       	ldd	r25, Y+2	; 0x02
    475c:	01 97       	sbiw	r24, 0x01	; 1
    475e:	f1 f7       	brne	.-4      	; 0x475c <pass_theObstacle+0x146e>
    4760:	9a 83       	std	Y+2, r25	; 0x02
    4762:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		move_forward();
    4764:	0e 94 32 18 	call	0x3064	; 0x3064 <move_forward>

		lcd_moveCursor(0, 0);
    4768:	80 e0       	ldi	r24, 0x00	; 0
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	60 e0       	ldi	r22, 0x00	; 0
    476e:	70 e0       	ldi	r23, 0x00	; 0
    4770:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_moveCursor>
		lcd_send_string("passed obstacle");
    4774:	8b ed       	ldi	r24, 0xDB	; 219
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_send_string>
	}

	return OK;
    477c:	f1 e0       	ldi	r31, 0x01	; 1
    477e:	ca 52       	subi	r28, 0x2A	; 42
    4780:	df 4f       	sbci	r29, 0xFF	; 255
    4782:	f8 83       	st	Y, r31
    4784:	c6 5d       	subi	r28, 0xD6	; 214
    4786:	d0 40       	sbci	r29, 0x00	; 0
    4788:	ca 52       	subi	r28, 0x2A	; 42
    478a:	df 4f       	sbci	r29, 0xFF	; 255
    478c:	88 81       	ld	r24, Y
    478e:	c6 5d       	subi	r28, 0xD6	; 214
    4790:	d0 40       	sbci	r29, 0x00	; 0
}
    4792:	ca 52       	subi	r28, 0x2A	; 42
    4794:	df 4f       	sbci	r29, 0xFF	; 255
    4796:	0f b6       	in	r0, 0x3f	; 63
    4798:	f8 94       	cli
    479a:	de bf       	out	0x3e, r29	; 62
    479c:	0f be       	out	0x3f, r0	; 63
    479e:	cd bf       	out	0x3d, r28	; 61
    47a0:	cf 91       	pop	r28
    47a2:	df 91       	pop	r29
    47a4:	1f 91       	pop	r17
    47a6:	0f 91       	pop	r16
    47a8:	08 95       	ret

000047aa <__udivmodqi4>:
    47aa:	99 1b       	sub	r25, r25
    47ac:	79 e0       	ldi	r23, 0x09	; 9
    47ae:	04 c0       	rjmp	.+8      	; 0x47b8 <__udivmodqi4_ep>

000047b0 <__udivmodqi4_loop>:
    47b0:	99 1f       	adc	r25, r25
    47b2:	96 17       	cp	r25, r22
    47b4:	08 f0       	brcs	.+2      	; 0x47b8 <__udivmodqi4_ep>
    47b6:	96 1b       	sub	r25, r22

000047b8 <__udivmodqi4_ep>:
    47b8:	88 1f       	adc	r24, r24
    47ba:	7a 95       	dec	r23
    47bc:	c9 f7       	brne	.-14     	; 0x47b0 <__udivmodqi4_loop>
    47be:	80 95       	com	r24
    47c0:	08 95       	ret

000047c2 <__udivmodhi4>:
    47c2:	aa 1b       	sub	r26, r26
    47c4:	bb 1b       	sub	r27, r27
    47c6:	51 e1       	ldi	r21, 0x11	; 17
    47c8:	07 c0       	rjmp	.+14     	; 0x47d8 <__udivmodhi4_ep>

000047ca <__udivmodhi4_loop>:
    47ca:	aa 1f       	adc	r26, r26
    47cc:	bb 1f       	adc	r27, r27
    47ce:	a6 17       	cp	r26, r22
    47d0:	b7 07       	cpc	r27, r23
    47d2:	10 f0       	brcs	.+4      	; 0x47d8 <__udivmodhi4_ep>
    47d4:	a6 1b       	sub	r26, r22
    47d6:	b7 0b       	sbc	r27, r23

000047d8 <__udivmodhi4_ep>:
    47d8:	88 1f       	adc	r24, r24
    47da:	99 1f       	adc	r25, r25
    47dc:	5a 95       	dec	r21
    47de:	a9 f7       	brne	.-22     	; 0x47ca <__udivmodhi4_loop>
    47e0:	80 95       	com	r24
    47e2:	90 95       	com	r25
    47e4:	bc 01       	movw	r22, r24
    47e6:	cd 01       	movw	r24, r26
    47e8:	08 95       	ret

000047ea <__udivmodsi4>:
    47ea:	a1 e2       	ldi	r26, 0x21	; 33
    47ec:	1a 2e       	mov	r1, r26
    47ee:	aa 1b       	sub	r26, r26
    47f0:	bb 1b       	sub	r27, r27
    47f2:	fd 01       	movw	r30, r26
    47f4:	0d c0       	rjmp	.+26     	; 0x4810 <__udivmodsi4_ep>

000047f6 <__udivmodsi4_loop>:
    47f6:	aa 1f       	adc	r26, r26
    47f8:	bb 1f       	adc	r27, r27
    47fa:	ee 1f       	adc	r30, r30
    47fc:	ff 1f       	adc	r31, r31
    47fe:	a2 17       	cp	r26, r18
    4800:	b3 07       	cpc	r27, r19
    4802:	e4 07       	cpc	r30, r20
    4804:	f5 07       	cpc	r31, r21
    4806:	20 f0       	brcs	.+8      	; 0x4810 <__udivmodsi4_ep>
    4808:	a2 1b       	sub	r26, r18
    480a:	b3 0b       	sbc	r27, r19
    480c:	e4 0b       	sbc	r30, r20
    480e:	f5 0b       	sbc	r31, r21

00004810 <__udivmodsi4_ep>:
    4810:	66 1f       	adc	r22, r22
    4812:	77 1f       	adc	r23, r23
    4814:	88 1f       	adc	r24, r24
    4816:	99 1f       	adc	r25, r25
    4818:	1a 94       	dec	r1
    481a:	69 f7       	brne	.-38     	; 0x47f6 <__udivmodsi4_loop>
    481c:	60 95       	com	r22
    481e:	70 95       	com	r23
    4820:	80 95       	com	r24
    4822:	90 95       	com	r25
    4824:	9b 01       	movw	r18, r22
    4826:	ac 01       	movw	r20, r24
    4828:	bd 01       	movw	r22, r26
    482a:	cf 01       	movw	r24, r30
    482c:	08 95       	ret

0000482e <__prologue_saves__>:
    482e:	2f 92       	push	r2
    4830:	3f 92       	push	r3
    4832:	4f 92       	push	r4
    4834:	5f 92       	push	r5
    4836:	6f 92       	push	r6
    4838:	7f 92       	push	r7
    483a:	8f 92       	push	r8
    483c:	9f 92       	push	r9
    483e:	af 92       	push	r10
    4840:	bf 92       	push	r11
    4842:	cf 92       	push	r12
    4844:	df 92       	push	r13
    4846:	ef 92       	push	r14
    4848:	ff 92       	push	r15
    484a:	0f 93       	push	r16
    484c:	1f 93       	push	r17
    484e:	cf 93       	push	r28
    4850:	df 93       	push	r29
    4852:	cd b7       	in	r28, 0x3d	; 61
    4854:	de b7       	in	r29, 0x3e	; 62
    4856:	ca 1b       	sub	r28, r26
    4858:	db 0b       	sbc	r29, r27
    485a:	0f b6       	in	r0, 0x3f	; 63
    485c:	f8 94       	cli
    485e:	de bf       	out	0x3e, r29	; 62
    4860:	0f be       	out	0x3f, r0	; 63
    4862:	cd bf       	out	0x3d, r28	; 61
    4864:	09 94       	ijmp

00004866 <__epilogue_restores__>:
    4866:	2a 88       	ldd	r2, Y+18	; 0x12
    4868:	39 88       	ldd	r3, Y+17	; 0x11
    486a:	48 88       	ldd	r4, Y+16	; 0x10
    486c:	5f 84       	ldd	r5, Y+15	; 0x0f
    486e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4870:	7d 84       	ldd	r7, Y+13	; 0x0d
    4872:	8c 84       	ldd	r8, Y+12	; 0x0c
    4874:	9b 84       	ldd	r9, Y+11	; 0x0b
    4876:	aa 84       	ldd	r10, Y+10	; 0x0a
    4878:	b9 84       	ldd	r11, Y+9	; 0x09
    487a:	c8 84       	ldd	r12, Y+8	; 0x08
    487c:	df 80       	ldd	r13, Y+7	; 0x07
    487e:	ee 80       	ldd	r14, Y+6	; 0x06
    4880:	fd 80       	ldd	r15, Y+5	; 0x05
    4882:	0c 81       	ldd	r16, Y+4	; 0x04
    4884:	1b 81       	ldd	r17, Y+3	; 0x03
    4886:	aa 81       	ldd	r26, Y+2	; 0x02
    4888:	b9 81       	ldd	r27, Y+1	; 0x01
    488a:	ce 0f       	add	r28, r30
    488c:	d1 1d       	adc	r29, r1
    488e:	0f b6       	in	r0, 0x3f	; 63
    4890:	f8 94       	cli
    4892:	de bf       	out	0x3e, r29	; 62
    4894:	0f be       	out	0x3f, r0	; 63
    4896:	cd bf       	out	0x3d, r28	; 61
    4898:	ed 01       	movw	r28, r26
    489a:	08 95       	ret

0000489c <itoa>:
    489c:	fb 01       	movw	r30, r22
    489e:	9f 01       	movw	r18, r30
    48a0:	e8 94       	clt
    48a2:	42 30       	cpi	r20, 0x02	; 2
    48a4:	c4 f0       	brlt	.+48     	; 0x48d6 <itoa+0x3a>
    48a6:	45 32       	cpi	r20, 0x25	; 37
    48a8:	b4 f4       	brge	.+44     	; 0x48d6 <itoa+0x3a>
    48aa:	4a 30       	cpi	r20, 0x0A	; 10
    48ac:	29 f4       	brne	.+10     	; 0x48b8 <itoa+0x1c>
    48ae:	97 fb       	bst	r25, 7
    48b0:	1e f4       	brtc	.+6      	; 0x48b8 <itoa+0x1c>
    48b2:	90 95       	com	r25
    48b4:	81 95       	neg	r24
    48b6:	9f 4f       	sbci	r25, 0xFF	; 255
    48b8:	64 2f       	mov	r22, r20
    48ba:	77 27       	eor	r23, r23
    48bc:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__udivmodhi4>
    48c0:	80 5d       	subi	r24, 0xD0	; 208
    48c2:	8a 33       	cpi	r24, 0x3A	; 58
    48c4:	0c f0       	brlt	.+2      	; 0x48c8 <itoa+0x2c>
    48c6:	89 5d       	subi	r24, 0xD9	; 217
    48c8:	81 93       	st	Z+, r24
    48ca:	cb 01       	movw	r24, r22
    48cc:	00 97       	sbiw	r24, 0x00	; 0
    48ce:	a1 f7       	brne	.-24     	; 0x48b8 <itoa+0x1c>
    48d0:	16 f4       	brtc	.+4      	; 0x48d6 <itoa+0x3a>
    48d2:	5d e2       	ldi	r21, 0x2D	; 45
    48d4:	51 93       	st	Z+, r21
    48d6:	10 82       	st	Z, r1
    48d8:	c9 01       	movw	r24, r18
    48da:	0c 94 6f 24 	jmp	0x48de	; 0x48de <strrev>

000048de <strrev>:
    48de:	dc 01       	movw	r26, r24
    48e0:	fc 01       	movw	r30, r24
    48e2:	67 2f       	mov	r22, r23
    48e4:	71 91       	ld	r23, Z+
    48e6:	77 23       	and	r23, r23
    48e8:	e1 f7       	brne	.-8      	; 0x48e2 <strrev+0x4>
    48ea:	32 97       	sbiw	r30, 0x02	; 2
    48ec:	04 c0       	rjmp	.+8      	; 0x48f6 <strrev+0x18>
    48ee:	7c 91       	ld	r23, X
    48f0:	6d 93       	st	X+, r22
    48f2:	70 83       	st	Z, r23
    48f4:	62 91       	ld	r22, -Z
    48f6:	ae 17       	cp	r26, r30
    48f8:	bf 07       	cpc	r27, r31
    48fa:	c8 f3       	brcs	.-14     	; 0x48ee <strrev+0x10>
    48fc:	08 95       	ret

000048fe <_exit>:
    48fe:	f8 94       	cli

00004900 <__stop_program>:
    4900:	ff cf       	rjmp	.-2      	; 0x4900 <__stop_program>
